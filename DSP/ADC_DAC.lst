;  LST file generated by mikroListExporter - v.2.0 
; Date/Time: 13/02/2017 16:49:47
;----------------------------------------------

;Address Opcode 	ASM
0x0000	0x000000040C38  	GOTO	_main
0x0004	0x000000  	0
0x0006	0x000000  	0
0x0008	0x000000  	0
0x000A	0x000000  	0
0x000C	0x000000  	0
0x000E	0x000000  	0
0x0010	0x000000  	0
0x0012	0x000000  	0
0x0014	0x000000  	0
0x0016	0x000000  	0
0x0018	0x000000  	0
0x001A	0x000B68  	2920
0x001C	0x000000  	0
0x001E	0x000000  	0
0x0020	0x000000  	0
0x0022	0x000BF4  	3060
0x0024	0x000000  	0
0x0026	0x000000  	0
0x0028	0x000000  	0
0x002A	0x000000  	0
0x002C	0x000000  	0
0x002E	0x000000  	0
0x0030	0x000000  	0
0x0032	0x000000  	0
0x0034	0x000000  	0
0x0036	0x000000  	0
0x0038	0x000000  	0
0x003A	0x000000  	0
0x003C	0x000000  	0
0x003E	0x000000  	0
0x0040	0x000000  	0
0x0042	0x000000  	0
0x0044	0x000000  	0
0x0046	0x000000  	0
0x0048	0x000000  	0
0x004A	0x000000  	0
0x004C	0x000000  	0
0x004E	0x000000  	0
0x0050	0x000000  	0
0x0052	0x000000  	0
0x0054	0x000000  	0
0x0056	0x000000  	0
0x0058	0x000000  	0
0x005A	0x000000  	0
0x005C	0x000000  	0
0x005E	0x000000  	0
0x0060	0x000000  	0
0x0062	0x000000  	0
0x0064	0x000000  	0
0x0066	0x000000  	0
0x0068	0x000000  	0
0x006A	0x000000  	0
0x006C	0x000000  	0
0x006E	0x000000  	0
0x0070	0x000000  	0
0x0072	0x000000  	0
0x0074	0x000000  	0
0x0076	0x000000  	0
0x0078	0x000000  	0
0x007A	0x000000  	0
0x007C	0x000000  	0
0x007E	0x000000  	0
0x0080	0x000000  	0
0x0082	0x000000  	0
0x0084	0x000000  	0
0x0086	0x000000  	0
0x0088	0x000000  	0
0x008A	0x000000  	0
0x008C	0x000000  	0
0x008E	0x000000  	0
0x0090	0x000000  	0
0x0092	0x000000  	0
0x0094	0x000000  	0
0x0096	0x000000  	0
0x0098	0x000000  	0
0x009A	0x000000  	0
0x009C	0x000000  	0
0x009E	0x000000  	0
0x00A0	0x000000  	0
0x00A2	0x000000  	0
0x00A4	0x000000  	0
0x00A6	0x000000  	0
0x00A8	0x000000  	0
0x00AA	0x000000  	0
0x00AC	0x000000  	0
0x00AE	0x000000  	0
0x00B0	0x000000  	0
0x00B2	0x000000  	0
0x00B4	0x000000  	0
0x00B6	0x000000  	0
0x00B8	0x000000  	0
0x00BA	0x000000  	0
0x00BC	0x000000  	0
0x00BE	0x000000  	0
0x00C0	0x000000  	0
0x00C2	0x000000  	0
0x00C4	0x000000  	0
0x00C6	0x000000  	0
0x00C8	0x000000  	0
0x00CA	0x000000  	0
0x00CC	0x000000  	0
0x00CE	0x000000  	0
0x00D0	0x000000  	0
0x00D2	0x000000  	0
0x00D4	0x000000  	0
0x00D6	0x000000  	0
0x00D8	0x000000  	0
0x00DA	0x000000  	0
0x00DC	0x000000  	0
0x00DE	0x000000  	0
0x00E0	0x000000  	0
0x00E2	0x000000  	0
0x00E4	0x000000  	0
0x00E6	0x000000  	0
0x00E8	0x000000  	0
0x00EA	0x000000  	0
0x00EC	0x000000  	0
0x00EE	0x000000  	0
0x00F0	0x000000  	0
0x00F2	0x000000  	0
0x00F4	0x000000  	0
0x00F6	0x000000  	0
0x00F8	0x000000  	0
0x00FA	0x000000  	0
0x00FC	0x000000  	0
0x00FE	0x000000  	0
0x0100	0x000000  	0
0x0102	0x000000  	0
0x0104	0x000000  	0
0x0106	0x000000  	0
0x0108	0x000000  	0
0x010A	0x000000  	0
0x010C	0x000000  	0
0x010E	0x000000  	0
0x0110	0x000000  	0
0x0112	0x000000  	0
0x0114	0x000000  	0
0x0116	0x000000  	0
0x0118	0x000000  	0
0x011A	0x000000  	0
0x011C	0x000000  	0
0x011E	0x000000  	0
0x0120	0x000000  	0
0x0122	0x000000  	0
0x0124	0x000000  	0
0x0126	0x000000  	0
0x0128	0x000000  	0
0x012A	0x000000  	0
0x012C	0x000000  	0
0x012E	0x000000  	0
0x0130	0x000000  	0
0x0132	0x000000  	0
0x0134	0x000000  	0
0x0136	0x000000  	0
0x0138	0x000000  	0
0x013A	0x000000  	0
0x013C	0x000000  	0
0x013E	0x000000  	0
0x0140	0x000000  	0
0x0142	0x000000  	0
0x0144	0x000000  	0
0x0146	0x000000  	0
0x0148	0x000000  	0
0x014A	0x000000  	0
0x014C	0x000000  	0
0x014E	0x000000  	0
0x0150	0x000000  	0
0x0152	0x000000  	0
0x0154	0x000000  	0
0x0156	0x000000  	0
0x0158	0x000000  	0
0x015A	0x000000  	0
0x015C	0x000000  	0
0x015E	0x000000  	0
0x0160	0x000000  	0
0x0162	0x000000  	0
0x0164	0x000000  	0
0x0166	0x000000  	0
0x0168	0x000000  	0
0x016A	0x000000  	0
0x016C	0x000000  	0
0x016E	0x000000  	0
0x0170	0x000000  	0
0x0172	0x000000  	0
0x0174	0x000000  	0
0x0176	0x000000  	0
0x0178	0x000000  	0
0x017A	0x000000  	0
0x017C	0x000000  	0
0x017E	0x000000  	0
0x0180	0x000000  	0
0x0182	0x000000  	0
0x0184	0x000000  	0
0x0186	0x000000  	0
0x0188	0x000000  	0
0x018A	0x000000  	0
0x018C	0x000000  	0
0x018E	0x000000  	0
0x0190	0x000000  	0
0x0192	0x000000  	0
0x0194	0x000000  	0
0x0196	0x000000  	0
0x0198	0x000000  	0
0x019A	0x000000  	0
0x019C	0x000000  	0
0x019E	0x000000  	0
0x01A0	0x000000  	0
0x01A2	0x000000  	0
0x01A4	0x000000  	0
0x01A6	0x000000  	0
0x01A8	0x000000  	0
0x01AA	0x000000  	0
0x01AC	0x000000  	0
0x01AE	0x000000  	0
0x01B0	0x000000  	0
0x01B2	0x000000  	0
0x01B4	0x000000  	0
0x01B6	0x000000  	0
0x01B8	0x000000  	0
0x01BA	0x000000  	0
0x01BC	0x000000  	0
0x01BE	0x000000  	0
0x01C0	0x000000  	0
0x01C2	0x000000  	0
0x01C4	0x000000  	0
0x01C6	0x000000  	0
0x01C8	0x000000  	0
0x01CA	0x000000  	0
0x01CC	0x000000  	0
0x01CE	0x000000  	0
0x01D0	0x000000  	0
0x01D2	0x000000  	0
0x01D4	0x000000  	0
0x01D6	0x000000  	0
0x01D8	0x000000  	0
0x01DA	0x000000  	0
0x01DC	0x000000  	0
0x01DE	0x000000  	0
0x01E0	0x000000  	0
0x01E2	0x000000  	0
0x01E4	0x000000  	0
0x01E6	0x000000  	0
0x01E8	0x000000  	0
0x01EA	0x000000  	0
0x01EC	0x000000  	0
0x01EE	0x000000  	0
0x01F0	0x000000  	0
0x01F2	0x000000  	0
0x01F4	0x000000  	0
0x01F6	0x000000  	0
0x01F8	0x000000  	0
0x01FA	0x000000  	0
0x01FC	0x000000  	0
0x01FE	0x000000  	0
_main:
0x0C38	0x20DECF  	MOV	#3564, W15
0x0C3A	0x20FFF0  	MOV	#4095, W0
0x0C3C	0xB7A020  	MOV	WREG, SPLIM
0x0C3E	0x200000  	MOV	#0, W0
0x0C40	0xB7A034  	MOV	WREG, PSVPAG
0x0C42	0x200040  	MOV	#4, W0
0x0C44	0xB72044  	IOR	CORCON
0x0C46	0xFA0008  	LNK	#8
0x0C48	0x000000020DB0  	CALL	3504
;ADC_DAC.c,200 :: 		void main() {
;ADC_DAC.c,202 :: 		Configuracion();
0x0C4C	0x07FF30  	RCALL	_Configuracion
;ADC_DAC.c,204 :: 		while(1){
L_main16:
;ADC_DAC.c,207 :: 		if (bm==0){
0x0C4E	0x20B040  	MOV	#lo_addr(_bm), W0
0x0C50	0x784010  	MOV.B	[W0], W0
0x0C52	0xE10460  	CP.B	W0, #0
0x0C54	0x3A000B  	BRA NZ	L_main18
L__main39:
;ADC_DAC.c,209 :: 		contp = 0;                                               //Limpia la variable del contador de pulsos
0x0C56	0xEF2000  	CLR	W0
0x0C58	0x885810  	MOV	W0, _contp
;ADC_DAC.c,210 :: 		RB14_bit = 0;                                            //Limpia el pin que produce los pulsos de exitacion del transductor
0x0C5A	0xA9C2CB  	BCLR	RB14_bit, BitPos(RB14_bit+0)
;ADC_DAC.c,211 :: 		IEC0.T2IE = 1;                                           //Habilita la interrupcion por desborde del TMR2
0x0C5C	0xA8E094  	BSET	IEC0, #7
;ADC_DAC.c,212 :: 		TMR2 = 0;                                                //Encera el TMR2
0x0C5E	0xEF2106  	CLR	TMR2
;ADC_DAC.c,213 :: 		T2CON.TON = 1;                                           //Enciende el TMR2
0x0C60	0xA8E111  	BSET	T2CON, #15
;ADC_DAC.c,215 :: 		i = 0;                                                   //Limpia las variables asociadas al almacenamiento de la señal muestreada
0x0C62	0xEF2000  	CLR	W0
0x0C64	0x885840  	MOV	W0, _i
;ADC_DAC.c,216 :: 		j = 0;
0x0C66	0xEF2000  	CLR	W0
0x0C68	0x885830  	MOV	W0, _j
;ADC_DAC.c,218 :: 		}
0x0C6A	0x370088  	BRA	L_main19
L_main18:
;ADC_DAC.c,223 :: 		Velocidad();                                             //Llama a la funcion para calcular la Velocidad del sonido
0x0C6C	0x07FEC7  	RCALL	_Velocidad
;ADC_DAC.c,226 :: 		VMmax = Vector_Max(M, nm, &IndexMax);
0x0C6E	0x208220  	MOV	#lo_addr(_IndexMax), W0
0x0C70	0x781F80  	PUSH	W0
0x0C72	0x2016D0  	MOV	#365, W0
0x0C74	0x781F80  	PUSH	W0
0x0C76	0x208240  	MOV	#lo_addr(_M), W0
0x0C78	0x781F80  	PUSH	W0
0x0C7A	0x07FEAE  	RCALL	_Vector_Max
0x0C7C	0xB1006F  	SUB	#6, W15
0x0C7E	0x884100  	MOV	W0, _VMmax
;ADC_DAC.c,227 :: 		VMmin = Vector_Min(M, nm, &IndexMin);
0x0C80	0x20AFE0  	MOV	#lo_addr(_IndexMin), W0
0x0C82	0x781F80  	PUSH	W0
0x0C84	0x2016D0  	MOV	#365, W0
0x0C86	0x781F80  	PUSH	W0
0x0C88	0x208240  	MOV	#lo_addr(_M), W0
0x0C8A	0x781F80  	PUSH	W0
0x0C8C	0x07FE52  	RCALL	_Vector_Min
0x0C8E	0xB1006F  	SUB	#6, W15
0x0C90	0x8840C0  	MOV	W0, _VMmin
;ADC_DAC.c,228 :: 		VMmed = VMmax-((VMmax-VMmin)/2);
0x0C92	0x208201  	MOV	#lo_addr(_VMmax), W1
0x0C94	0x100011  	SUBR	W0, [W1], W0
0x0C96	0xDE0141  	LSR	W0, #1, W2
0x0C98	0x208201  	MOV	#lo_addr(_VMmax), W1
0x0C9A	0x2081A0  	MOV	#lo_addr(_VMmed), W0
0x0C9C	0x110811  	SUBR	W2, [W1], [W0]
;ADC_DAC.c,230 :: 		for (k=0;k<nm;k++){
0x0C9E	0xEF2000  	CLR	W0
0x0CA0	0x885800  	MOV	W0, _k
L_main20:
0x0CA2	0x805801  	MOV	_k, W1
0x0CA4	0x2016D0  	MOV	#365, W0
0x0CA6	0xE10800  	CP	W1, W0
0x0CA8	0x310067  	BRA GEU	L_main21
L__main40:
;ADC_DAC.c,234 :: 		value = M[k]-VMmed;
0x0CAA	0x805800  	MOV	_k, W0
0x0CAC	0xDD00C1  	SL	W0, #1, W1
0x0CAE	0x208240  	MOV	#lo_addr(_M), W0
0x0CB0	0x400181  	ADD	W0, W1, W3
0x0CB2	0x780113  	MOV	[W3], W2
0x0CB4	0x2081A1  	MOV	#lo_addr(_VMmed), W1
0x0CB6	0x208160  	MOV	#lo_addr(_value), W0
0x0CB8	0x510811  	SUB	W2, [W1], [W0]
;ADC_DAC.c,235 :: 		if (M[k]<VMmed){
0x0CBA	0x780093  	MOV	[W3], W1
0x0CBC	0x2081A0  	MOV	#lo_addr(_VMmed), W0
0x0CBE	0xE10810  	CP	W1, [W0]
0x0CC0	0x31000B  	BRA GEU	L_main23
L__main41:
;ADC_DAC.c,236 :: 		value = (M[k]+((VMmed-M[k])*2))-(VMmed);
0x0CC2	0x805800  	MOV	_k, W0
0x0CC4	0xDD00C1  	SL	W0, #1, W1
0x0CC6	0x208240  	MOV	#lo_addr(_M), W0
0x0CC8	0x400081  	ADD	W0, W1, W1
0x0CCA	0x8040D0  	MOV	_VMmed, W0
0x0CCC	0x500011  	SUB	W0, [W1], W0
0x0CCE	0xDD0041  	SL	W0, #1, W0
0x0CD0	0x400111  	ADD	W0, [W1], W2
0x0CD2	0x2081A1  	MOV	#lo_addr(_VMmed), W1
0x0CD4	0x208160  	MOV	#lo_addr(_value), W0
0x0CD6	0x510811  	SUB	W2, [W1], [W0]
;ADC_DAC.c,237 :: 		}
L_main23:
;ADC_DAC.c,245 :: 		x0 = (float)(value);                             //Adquisición de una muestra de 10 bits en, x[0].
0x0CD8	0x8040B0  	MOV	_value, W0
0x0CDA	0xEB0080  	CLR	W1
0x0CDC	0x07FD21  	RCALL	__Long2Float
0x0CDE	0x884020  	MOV	W0, _x0
0x0CE0	0x884031  	MOV	W1, _x0+2
;ADC_DAC.c,246 :: 		y0 = ((x0+x2)*ca1)+(x1*ca2)-(y1*cb2)-(y2*cb3);       //Implementación de la ecuación en diferencias
0x0CE2	0x8040E2  	MOV	_x2, W2
0x0CE4	0x8040F3  	MOV	_x2+2, W3
0x0CE6	0x07FBB0  	RCALL	__AddSub_FP
0x0CE8	0x20BA62  	MOV	#2982, W2
0x0CEA	0x23BDD3  	MOV	#15325, W3
0x0CEC	0x07FC8C  	RCALL	__Mul_FP
0x0CEE	0x980700  	MOV	W0, [W14+0]
0x0CF0	0x980711  	MOV	W1, [W14+2]
0x0CF2	0x804000  	MOV	_x1, W0
0x0CF4	0x804011  	MOV	_x1+2, W1
0x0CF6	0x20BA62  	MOV	#2982, W2
0x0CF8	0x23C5D3  	MOV	#15453, W3
0x0CFA	0x07FC85  	RCALL	__Mul_FP
0x0CFC	0x90010E  	MOV	[W14+0], W2
0x0CFE	0x90019E  	MOV	[W14+2], W3
0x0D00	0x07FBA3  	RCALL	__AddSub_FP
0x0D02	0x980720  	MOV	W0, [W14+4]
0x0D04	0x980731  	MOV	W1, [W14+6]
0x0D06	0x804050  	MOV	_y1, W0
0x0D08	0x804061  	MOV	_y1+2, W1
0x0D0A	0x2968C2  	MOV	#38540, W2
0x0D0C	0x2BFE03  	MOV	#49120, W3
0x0D0E	0x07FC7B  	RCALL	__Mul_FP
0x0D10	0x980700  	MOV	W0, [W14+0]
0x0D12	0x980711  	MOV	W1, [W14+2]
0x0D14	0x90002E  	MOV	[W14+4], W0
0x0D16	0x9000BE  	MOV	[W14+6], W1
0x0D18	0xBE9F82  	PUSH.D	W2
0x0D1A	0x90010E  	MOV	[W14+0], W2
0x0D1C	0x90019E  	MOV	[W14+2], W3
0x0D1E	0x07FE57  	RCALL	__Sub_FP
0x0D20	0xBE014F  	POP.D	W2
0x0D22	0x980720  	MOV	W0, [W14+4]
0x0D24	0x980731  	MOV	W1, [W14+6]
0x0D26	0x804070  	MOV	_y2, W0
0x0D28	0x804081  	MOV	_y2+2, W1
0x0D2A	0x215752  	MOV	#5493, W2
0x0D2C	0x23F483  	MOV	#16200, W3
0x0D2E	0x07FC6B  	RCALL	__Mul_FP
0x0D30	0x980700  	MOV	W0, [W14+0]
0x0D32	0x980711  	MOV	W1, [W14+2]
0x0D34	0x90002E  	MOV	[W14+4], W0
0x0D36	0x9000BE  	MOV	[W14+6], W1
0x0D38	0xBE9F82  	PUSH.D	W2
0x0D3A	0x90010E  	MOV	[W14+0], W2
0x0D3C	0x90019E  	MOV	[W14+2], W3
0x0D3E	0x07FE47  	RCALL	__Sub_FP
0x0D40	0xBE014F  	POP.D	W2
0x0D42	0x884090  	MOV	W0, _y0
0x0D44	0x8840A1  	MOV	W1, _y0+2
;ADC_DAC.c,248 :: 		y2 = y1;                                             //Corrimiento de los valores x(n), y y(n).
0x0D46	0x804052  	MOV	_y1, W2
0x0D48	0x804063  	MOV	_y1+2, W3
0x0D4A	0x884072  	MOV	W2, _y2
0x0D4C	0x884083  	MOV	W3, _y2+2
;ADC_DAC.c,249 :: 		y1 = y0;
0x0D4E	0x884050  	MOV	W0, _y1
0x0D50	0x884061  	MOV	W1, _y1+2
;ADC_DAC.c,250 :: 		x2 = x1;
0x0D52	0x804002  	MOV	_x1, W2
0x0D54	0x804013  	MOV	_x1+2, W3
0x0D56	0x8840E2  	MOV	W2, _x2
0x0D58	0x8840F3  	MOV	W3, _x2+2
;ADC_DAC.c,251 :: 		x1 = x0;
0x0D5A	0x804022  	MOV	_x0, W2
0x0D5C	0x804033  	MOV	_x0+2, W3
0x0D5E	0x884002  	MOV	W2, _x1
0x0D60	0x884013  	MOV	W3, _x1+2
;ADC_DAC.c,253 :: 		YY = (unsigned int)(y0);                             //Reconstrucción de la señal: y en 10 bits.
0x0D62	0x07FDF9  	RCALL	__Float2Longint
0x0D64	0x884040  	MOV	W0, _YY
;ADC_DAC.c,255 :: 		R[k] = YY;
0x0D66	0x805801  	MOV	_k, W1
0x0D68	0xDD0941  	SL	W1, #1, W2
0x0D6A	0x20B0A1  	MOV	#lo_addr(_R), W1
0x0D6C	0x408082  	ADD	W1, W2, W1
0x0D6E	0x780880  	MOV	W0, [W1]
;ADC_DAC.c,230 :: 		for (k=0;k<nm;k++){
0x0D70	0x200011  	MOV	#1, W1
0x0D72	0x20B000  	MOV	#lo_addr(_k), W0
0x0D74	0x408810  	ADD	W1, [W0], [W0]
;ADC_DAC.c,257 :: 		}
0x0D76	0x37FF95  	BRA	L_main20
L_main21:
;ADC_DAC.c,259 :: 		T1CON.TON = 1;                                           //Enciende el TMR1
0x0D78	0xA8E105  	BSET	T1CON, #15
;ADC_DAC.c,260 :: 		IEC0.T1IE = 1;                                           //Habilita la interrupcion por desborde del TMR1
0x0D7A	0xA86094  	BSET	IEC0, #3
;ADC_DAC.c,262 :: 		}
L_main19:
;ADC_DAC.c,264 :: 		Delay_ms(10);
0x0D7C	0x200038  	MOV	#3, W8
0x0D7E	0x208D57  	MOV	#2261, W7
L_main24:
0x0D80	0xED200E  	DEC	W7
0x0D82	0x3AFFFE  	BRA NZ	L_main24
0x0D84	0xED2010  	DEC	W8
0x0D86	0x3AFFFC  	BRA NZ	L_main24
;ADC_DAC.c,266 :: 		}
0x0D88	0x37FF62  	BRA	L_main16
;ADC_DAC.c,268 :: 		}
L_end_main:
0x0D8A	0xFA8000  	ULNK
L__main_end_loop:
0x0D8C	0x37FFFF  	BRA	L__main_end_loop
; end of _main
_Configuracion:
;ADC_DAC.c,134 :: 		void Configuracion(){
;ADC_DAC.c,137 :: 		CLKDIVbits.PLLPRE = 0;                        //PLLPRE<4:0> = 0  ->  N1 = 2    8MHz / 2 = 4MHz
0x0AAE	0x207440  	MOV	#lo_addr(CLKDIVbits), W0
0x0AB0	0x784090  	MOV.B	[W0], W1
0x0AB2	0xB3CE00  	MOV.B	#224, W0
0x0AB4	0x60C080  	AND.B	W1, W0, W1
0x0AB6	0x207440  	MOV	#lo_addr(CLKDIVbits), W0
0x0AB8	0x784801  	MOV.B	W1, [W0]
;ADC_DAC.c,138 :: 		PLLFBD = 38;                                  //PLLDIV<8:0> = 38 ->  M = 40    4MHz * 40 = 160MHz
0x0ABA	0x200260  	MOV	#38, W0
0x0ABC	0xB7A746  	MOV	WREG, PLLFBD
;ADC_DAC.c,139 :: 		CLKDIVbits.PLLPOST = 0;                       //PLLPOST<1:0> = 0 ->  N2 = 2    160MHz / 2 = 80MHz
0x0ABE	0x207440  	MOV	#lo_addr(CLKDIVbits), W0
0x0AC0	0x784090  	MOV.B	[W0], W1
0x0AC2	0xB3C3F0  	MOV.B	#63, W0
0x0AC4	0x60C080  	AND.B	W1, W0, W1
0x0AC6	0x207440  	MOV	#lo_addr(CLKDIVbits), W0
0x0AC8	0x784801  	MOV.B	W1, [W0]
;ADC_DAC.c,142 :: 		AD1PCFGL = 0xFFFE;                            //Configura el puerto AN0 como entrada analogica y todas las demas como digitales
0x0ACA	0x2FFFE0  	MOV	#65534, W0
0x0ACC	0xB7A32C  	MOV	WREG, AD1PCFGL
;ADC_DAC.c,143 :: 		TRISA0_bit = 1;                               //Set RA0 pin as input
0x0ACE	0xA802C0  	BSET	TRISA0_bit, BitPos(TRISA0_bit+0)
;ADC_DAC.c,144 :: 		TRISA1_bit = 0;                               //Set RA1 pin as output
0x0AD0	0xA922C0  	BCLR	TRISA1_bit, BitPos(TRISA1_bit+0)
;ADC_DAC.c,145 :: 		TRISA4_bit = 0;
0x0AD2	0xA982C0  	BCLR	TRISA4_bit, BitPos(TRISA4_bit+0)
;ADC_DAC.c,146 :: 		TRISB = 0x8080;                               //Establece los pines 8 y 15 como entradas y todas las demas como salidas
0x0AD4	0x280800  	MOV	#32896, W0
0x0AD6	0xB7A2C8  	MOV	WREG, TRISB
;ADC_DAC.c,149 :: 		AD1CON1.AD12B = 0;                            //Configura el ADC en modo de 10 bits
0x0AD8	0xA94321  	BCLR	AD1CON1, #10
;ADC_DAC.c,150 :: 		AD1CON1bits.FORM = 0x00;                      //Formato de la canversion: 00->(0_1023)|01->(-512_511)|02->(0_0.999)|03->(-1_0.999)
0x0ADA	0x801901  	MOV	AD1CON1bits, W1
0x0ADC	0x2FCFF0  	MOV	#64767, W0
0x0ADE	0x608000  	AND	W1, W0, W0
0x0AE0	0xB7A320  	MOV	WREG, AD1CON1bits
;ADC_DAC.c,151 :: 		AD1CON1.SIMSAM = 0;                           //0 -> Muestrea múltiples canales individualmente en secuencia
0x0AE2	0xA96320  	BCLR	AD1CON1, #3
;ADC_DAC.c,152 :: 		AD1CON1.ADSIDL = 1;                           //Continua con la operacion del modulo durante el modo desocupado
0x0AE4	0xA8A321  	BSET	AD1CON1, #13
;ADC_DAC.c,153 :: 		AD1CON1.ASAM = 1;                             //Muestreo automatico
0x0AE6	0xA84320  	BSET	AD1CON1, #2
;ADC_DAC.c,154 :: 		AD1CON1bits.SSRC = 0x00;                      //Conversion manual
0x0AE8	0x203200  	MOV	#lo_addr(AD1CON1bits), W0
0x0AEA	0x784090  	MOV.B	[W0], W1
0x0AEC	0xB3C1F0  	MOV.B	#31, W0
0x0AEE	0x60C080  	AND.B	W1, W0, W1
0x0AF0	0x203200  	MOV	#lo_addr(AD1CON1bits), W0
0x0AF2	0x784801  	MOV.B	W1, [W0]
;ADC_DAC.c,156 :: 		AD1CON2bits.VCFG = 0;                         //Selecciona AVDD y AVSS como fuentes de voltaje de referencia
0x0AF4	0x801911  	MOV	AD1CON2bits, W1
0x0AF6	0x21FFF0  	MOV	#8191, W0
0x0AF8	0x608000  	AND	W1, W0, W0
0x0AFA	0xB7A322  	MOV	WREG, AD1CON2bits
;ADC_DAC.c,157 :: 		AD1CON2bits.CHPS = 0;                         //Selecciona unicamente el canal CH0
0x0AFC	0x801911  	MOV	AD1CON2bits, W1
0x0AFE	0x2FCFF0  	MOV	#64767, W0
0x0B00	0x608000  	AND	W1, W0, W0
0x0B02	0xB7A322  	MOV	WREG, AD1CON2bits
;ADC_DAC.c,158 :: 		AD1CON2.CSCNA = 0;                            //No escanea las entradas de CH0 durante la Muestra A
0x0B04	0xA94323  	BCLR	AD1CON2, #10
;ADC_DAC.c,160 :: 		AD1CON2.BUFM = 0;                             //Bit de selección del modo de relleno del búfer, 0 -> Siempre comienza a llenar el buffer desde el principio
0x0B06	0xA92322  	BCLR	AD1CON2, #1
;ADC_DAC.c,161 :: 		AD1CON2.ALTS = 0x00;                          //Utiliza siempre la selección de entrada de canal para la muestra A
0x0B08	0xA90322  	BCLR	AD1CON2, #0
;ADC_DAC.c,163 :: 		AD1CON3.ADRC = 0;                             //Selecciona el reloj de conversion del ADC derivado del reloj del sistema
0x0B0A	0xA9E325  	BCLR	AD1CON3, #15
;ADC_DAC.c,164 :: 		AD1CON3bits.ADCS = 0x00;                      //Configura el periodo del reloj del ADC fijando el valor de los bits ADCS segun la formula: TAD = TCY*(ADCS+1) = 75ns  -> ADCS = 2
0x0B0C	0x203240  	MOV	#lo_addr(AD1CON3bits), W0
0x0B0E	0x784090  	MOV.B	[W0], W1
0x0B10	0xB3C000  	MOV.B	#0, W0
0x0B12	0x60C080  	AND.B	W1, W0, W1
0x0B14	0x203240  	MOV	#lo_addr(AD1CON3bits), W0
0x0B16	0x784801  	MOV.B	W1, [W0]
;ADC_DAC.c,167 :: 		AD1CHS0 = 0;                                  //ADC1 INPUT CHANNEL 0 SELECT REGISTER
0x0B18	0xEF2328  	CLR	AD1CHS0
;ADC_DAC.c,168 :: 		AD1CHS123 = 0;                                //AD1CHS123: ADC1 INPUT CHANNEL 1, 2, 3 SELECT REGISTER
0x0B1A	0xEF2326  	CLR	AD1CHS123
;ADC_DAC.c,170 :: 		AD1CSSL = 0x00;                               //Se salta todos los puertos ANx para los escaneos de entrada
0x0B1C	0xEF2330  	CLR	AD1CSSL
;ADC_DAC.c,174 :: 		AD1CON1.ADON = 1;                             //Enciende el modulo ADC
0x0B1E	0xA8E321  	BSET	AD1CON1, #15
;ADC_DAC.c,177 :: 		T1CON = 0x8000;                               //Habilita el TMR1, selecciona el reloj interno, desabilita el modo Gated Timer, selecciona el preescalador 1:1,
0x0B20	0x280000  	MOV	#32768, W0
0x0B22	0xB7A104  	MOV	WREG, T1CON
;ADC_DAC.c,178 :: 		IEC0.T1IE = 0;                                //Inicializa el programa con la interrupcion por desborde de TMR1 desabilitada para no interferir con la lectura del sensor de temperatura
0x0B24	0xA96094  	BCLR	IEC0, #3
;ADC_DAC.c,179 :: 		T1IF_bit = 0;                                 //Limpia la bandera de interrupcion
0x0B26	0xA96084  	BCLR	T1IF_bit, BitPos(T1IF_bit+0)
;ADC_DAC.c,180 :: 		PR1 = 200;                                    //Genera una interrupcion cada 5us (Fs=200KHz)
0x0B28	0x200C80  	MOV	#200, W0
0x0B2A	0xB7A102  	MOV	WREG, PR1
;ADC_DAC.c,183 :: 		T2CON = 0x8000;                               //Habilita el TMR2, selecciona el reloj interno, desabilita el modo Gated Timer, selecciona el preescalador 1:1,
0x0B2C	0x280000  	MOV	#32768, W0
0x0B2E	0xB7A110  	MOV	WREG, T2CON
;ADC_DAC.c,184 :: 		IEC0.T2IE = 0;                                //Inicializa el programa con la interrupcion por desborde de TMR2 desabilitada para no interferir con la lectura del sensor de temperatura
0x0B30	0xA9E094  	BCLR	IEC0, #7
;ADC_DAC.c,185 :: 		T2IF_bit = 0;                                 //Limpia la bandera de interrupcion
0x0B32	0xA9E084  	BCLR	T2IF_bit, BitPos(T2IF_bit+0)
;ADC_DAC.c,186 :: 		PR2 = 500;                                    //Genera una interrupcion cada 12.5us
0x0B34	0x201F40  	MOV	#500, W0
0x0B36	0xB7A10C  	MOV	WREG, PR2
;ADC_DAC.c,189 :: 		INTCON2.INT0EP = 0;                           //Interrupcion en flanco positivo
0x0B38	0xA90082  	BCLR	INTCON2, #0
;ADC_DAC.c,193 :: 		IPC0bits.T1IP = 0x07;                         //Nivel de prioridad de la interrupcion por desbordamiento del TMR1
0x0B3A	0x800521  	MOV	IPC0bits, W1
0x0B3C	0x270000  	MOV	#28672, W0
0x0B3E	0x708000  	IOR	W1, W0, W0
0x0B40	0xB7A0A4  	MOV	WREG, IPC0bits
;ADC_DAC.c,194 :: 		IPC1bits.T2IP = 0x05;                         //Nivel de prioridad de la interrupcion por desbordamiento del TMR2
0x0B42	0x250000  	MOV	#20480, W0
0x0B44	0x780080  	MOV	W0, W1
0x0B46	0x200A60  	MOV	#lo_addr(IPC1bits), W0
0x0B48	0x688090  	XOR	W1, [W0], W1
0x0B4A	0x270000  	MOV	#28672, W0
0x0B4C	0x608080  	AND	W1, W0, W1
0x0B4E	0x200A60  	MOV	#lo_addr(IPC1bits), W0
0x0B50	0x688090  	XOR	W1, [W0], W1
0x0B52	0x880531  	MOV	W1, IPC1bits
;ADC_DAC.c,195 :: 		IPC0bits.INT0IP = 0x04;                       //Nivel de prioridad de la interrupcion INT0
0x0B54	0xB3C040  	MOV.B	#4, W0
0x0B56	0x784080  	MOV.B	W0, W1
0x0B58	0x200A40  	MOV	#lo_addr(IPC0bits), W0
0x0B5A	0x68C090  	XOR.B	W1, [W0], W1
0x0B5C	0x60C0E7  	AND.B	W1, #7, W1
0x0B5E	0x200A40  	MOV	#lo_addr(IPC0bits), W0
0x0B60	0x68C090  	XOR.B	W1, [W0], W1
0x0B62	0x200A40  	MOV	#lo_addr(IPC0bits), W0
0x0B64	0x784801  	MOV.B	W1, [W0]
;ADC_DAC.c,196 :: 		}
L_end_Configuracion:
0x0B66	0x060000  	RETURN
; end of _Configuracion
_Velocidad:
0x09FC	0xFA0004  	LNK	#4
;ADC_DAC.c,54 :: 		void Velocidad(){
;ADC_DAC.c,59 :: 		Ow_Reset(&PORTB, 15);                        //Onewire reset signal
0x09FE	0x781F8A  	PUSH	W10
0x0A00	0x781F8B  	PUSH	W11
0x0A02	0x781F8C  	PUSH	W12
0x0A04	0x2000FB  	MOV	#15, W11
0x0A06	0x202CAA  	MOV	#lo_addr(PORTB), W10
0x0A08	0x07FDE6  	RCALL	_Ow_Reset
;ADC_DAC.c,60 :: 		Ow_Write(&PORTB, 15, 0xCC);                  //Issue command SKIP_ROM
0x0A0A	0xB3CCCC  	MOV.B	#204, W12
0x0A0C	0x2000FB  	MOV	#15, W11
0x0A0E	0x202CAA  	MOV	#lo_addr(PORTB), W10
0x0A10	0x07FF00  	RCALL	_Ow_Write
;ADC_DAC.c,61 :: 		Ow_Write(&PORTB, 15, 0x44);                  //Issue command CONVERT_T
0x0A12	0xB3C44C  	MOV.B	#68, W12
0x0A14	0x2000FB  	MOV	#15, W11
0x0A16	0x202CAA  	MOV	#lo_addr(PORTB), W10
0x0A18	0x07FEFC  	RCALL	_Ow_Write
;ADC_DAC.c,62 :: 		Delay_us(100);
0x0A1A	0x205357  	MOV	#1333, W7
L_Velocidad0:
0x0A1C	0xED200E  	DEC	W7
0x0A1E	0x3AFFFE  	BRA NZ	L_Velocidad0
0x0A20	0x000000  	NOP
;ADC_DAC.c,64 :: 		Ow_Reset(&PORTB, 15);
0x0A22	0x2000FB  	MOV	#15, W11
0x0A24	0x202CAA  	MOV	#lo_addr(PORTB), W10
0x0A26	0x07FDD7  	RCALL	_Ow_Reset
;ADC_DAC.c,65 :: 		Ow_Write(&PORTB, 15, 0xCC);                  //Issue command SKIP_ROM
0x0A28	0xB3CCCC  	MOV.B	#204, W12
0x0A2A	0x2000FB  	MOV	#15, W11
0x0A2C	0x202CAA  	MOV	#lo_addr(PORTB), W10
0x0A2E	0x07FEF1  	RCALL	_Ow_Write
;ADC_DAC.c,66 :: 		Ow_Write(&PORTB, 15, 0xBE);                  //Issue command READ_SCRATCHPAD
0x0A30	0xB3CBEC  	MOV.B	#190, W12
0x0A32	0x2000FB  	MOV	#15, W11
0x0A34	0x202CAA  	MOV	#lo_addr(PORTB), W10
0x0A36	0x07FEED  	RCALL	_Ow_Write
;ADC_DAC.c,67 :: 		Delay_us(100);
0x0A38	0x205357  	MOV	#1333, W7
L_Velocidad2:
0x0A3A	0xED200E  	DEC	W7
0x0A3C	0x3AFFFE  	BRA NZ	L_Velocidad2
0x0A3E	0x000000  	NOP
;ADC_DAC.c,69 :: 		Temp =  Ow_Read(&PORTB, 15);
0x0A40	0x2000FB  	MOV	#15, W11
0x0A42	0x202CAA  	MOV	#lo_addr(PORTB), W10
0x0A44	0x07FEC8  	RCALL	_Ow_Read
; Temp start address is: 10 (W5)
0x0A46	0xFB8280  	ZE	W0, W5
;ADC_DAC.c,70 :: 		Temp = (Ow_Read(&PORTB, 15) << 8) + Temp;
0x0A48	0x2000FB  	MOV	#15, W11
0x0A4A	0x202CAA  	MOV	#lo_addr(PORTB), W10
0x0A4C	0x07FEC4  	RCALL	_Ow_Read
0x0A4E	0xFB8000  	ZE	W0, W0
0x0A50	0xDD0048  	SL	W0, #8, W0
0x0A52	0x400005  	ADD	W0, W5, W0
; Temp end address is: 10 (W5)
; Temp start address is: 4 (W2)
0x0A54	0x780100  	MOV	W0, W2
;ADC_DAC.c,72 :: 		if (Temp & 0x8000) {
0x0A56	0xAEE001  	BTSS	W0, #15
0x0A58	0x370002  	BRA	L__Velocidad26
;ADC_DAC.c,73 :: 		Temp = 0;                                //Si la temperatura es negativa la establece como cero.
0x0A5A	0xEF2004  	CLR	W2
; Temp end address is: 4 (W2)
;ADC_DAC.c,74 :: 		}
0x0A5C	0x370000  	BRA	L_Velocidad4
L__Velocidad26:
;ADC_DAC.c,72 :: 		if (Temp & 0x8000) {
;ADC_DAC.c,74 :: 		}
L_Velocidad4:
;ADC_DAC.c,76 :: 		Rint = Temp >> 4;                           //Extrae la parte entera de la respuesta del sensor
; Temp start address is: 4 (W2)
0x0A5E	0xDE1044  	LSR	W2, #4, W0
; Rint start address is: 6 (W3)
0x0A60	0x780180  	MOV	W0, W3
;ADC_DAC.c,77 :: 		Rfrac = ((Temp & 0x000F) * 625) / 10000.;   //Extrae la parte decimal de la respuesta del sensor
0x0A62	0x6100EF  	AND	W2, #15, W1
; Temp end address is: 4 (W2)
0x0A64	0x202710  	MOV	#625, W0
0x0A66	0xB80800  	MUL.UU	W1, W0, W0
0x0A68	0x781F83  	PUSH	W3
0x0A6A	0xEB0080  	CLR	W1
0x0A6C	0x07FE59  	RCALL	__Long2Float
0x0A6E	0x240002  	MOV	#16384, W2
0x0A70	0x2461C3  	MOV	#17948, W3
0x0A72	0x07FC4F  	RCALL	__Div_FP
0x0A74	0x7801CF  	POP	W3
0x0A76	0x980700  	MOV	W0, [W14+0]
0x0A78	0x980711  	MOV	W1, [W14+2]
;ADC_DAC.c,78 :: 		DSTemp = Rint + Rfrac;
0x0A7A	0x780003  	MOV	W3, W0
0x0A7C	0xEB0080  	CLR	W1
0x0A7E	0x07FE50  	RCALL	__Long2Float
; Rint end address is: 6 (W3)
0x0A80	0x90010E  	MOV	[W14+0], W2
0x0A82	0x90019E  	MOV	[W14+2], W3
0x0A84	0x07FCE1  	RCALL	__AddSub_FP
0x0A86	0x886F40  	MOV	W0, _DSTemp
0x0A88	0x886F51  	MOV	W1, _DSTemp+2
;ADC_DAC.c,80 :: 		VSnd = 331.45 * sqrt(1+(DsTemp/273));       //Expresa la temperatura en punto flotante
0x0A8A	0x280002  	MOV	#32768, W2
0x0A8C	0x243883  	MOV	#17288, W3
0x0A8E	0x07FC41  	RCALL	__Div_FP
0x0A90	0x200002  	MOV	#0, W2
0x0A92	0x23F803  	MOV	#16256, W3
0x0A94	0x07FCD9  	RCALL	__AddSub_FP
0x0A96	0xBE0500  	MOV.D	W0, W10
0x0A98	0x07FEDA  	RCALL	_sqrt
0x0A9A	0x2B99A2  	MOV	#47514, W2
0x0A9C	0x243A53  	MOV	#17317, W3
0x0A9E	0x07FDB3  	RCALL	__Mul_FP
0x0AA0	0x886F20  	MOV	W0, _VSnd
0x0AA2	0x886F31  	MOV	W1, _VSnd+2
;ADC_DAC.c,81 :: 		}
L_end_Velocidad:
0x0AA4	0x78064F  	POP	W12
0x0AA6	0x7805CF  	POP	W11
0x0AA8	0x78054F  	POP	W10
0x0AAA	0xFA8000  	ULNK
0x0AAC	0x060000  	RETURN
; end of _Velocidad
_Ow_Reset:
0x05D6	0xFA0000  	LNK	#0
;__Lib_OneWire.c,6 :: 		
;__Lib_OneWire.c,9 :: 		
0x05D8	0x200010  	MOV	#1, W0
0x05DA	0xDD000B  	SL	W0, W11, W0
; bit_mask_1 start address is: 4 (W2)
0x05DC	0x780100  	MOV	W0, W2
;__Lib_OneWire.c,10 :: 		
0x05DE	0xEA8080  	COM	W0, W1
; bit_mask_0 start address is: 6 (W3)
0x05E0	0x780181  	MOV	W1, W3
;__Lib_OneWire.c,13 :: 		
0x05E2	0x450062  	ADD	W10, #2, W0
0x05E4	0x608810  	AND	W1, [W0], [W0]
;__Lib_OneWire.c,14 :: 		
0x05E6	0x550062  	SUB	W10, #2, W0
0x05E8	0x618810  	AND	W3, [W0], [W0]
; bit_mask_0 end address is: 6 (W3)
;__Lib_OneWire.c,16 :: 		
0x05EA	0x07FFEF  	RCALL	_Delay_500us
;__Lib_OneWire.c,19 :: 		
0x05EC	0x550062  	SUB	W10, #2, W0
0x05EE	0x710810  	IOR	W2, [W0], [W0]
;__Lib_OneWire.c,21 :: 		
0x05F0	0x07FFE6  	RCALL	_Delay_80us
;__Lib_OneWire.c,24 :: 		
0x05F2	0x61001A  	AND	W2, [W10], W0
; bit_mask_1 end address is: 4 (W2)
0x05F4	0xE10060  	CP	W0, #0
0x05F6	0xEF6000  	CLR.B	W0
0x05F8	0x320001  	BRA Z	L__Ow_Reset10
0x05FA	0xEC6000  	INC.B	W0
L__Ow_Reset10:
; res start address is: 2 (W1)
0x05FC	0xFB8080  	ZE	W0, W1
;__Lib_OneWire.c,26 :: 		
0x05FE	0x07FFE5  	RCALL	_Delay_500us
;__Lib_OneWire.c,30 :: 		
0x0600	0x780001  	MOV	W1, W0
; res end address is: 2 (W1)
;__Lib_OneWire.c,31 :: 		
L_end_Ow_Reset:
0x0602	0xFA8000  	ULNK
0x0604	0x060000  	RETURN
; end of _Ow_Reset
_Delay_500us:
;__Lib_Delays.c,510 :: 		void Delay_500us()
;__Lib_Delays.c,512 :: 		Delay_us(500);
0x05CA	0x21A0A7  	MOV	#6666, W7
L_Delay_500us21:
0x05CC	0xED200E  	DEC	W7
0x05CE	0x3AFFFE  	BRA NZ	L_Delay_500us21
0x05D0	0x000000  	NOP
0x05D2	0x000000  	NOP
;__Lib_Delays.c,513 :: 		}
L_end_Delay_500us:
0x05D4	0x060000  	RETURN
; end of _Delay_500us
_Delay_80us:
;__Lib_Delays.c,484 :: 		void Delay_80us()
;__Lib_Delays.c,486 :: 		Delay_us(80);
0x05BE	0x2042A7  	MOV	#1066, W7
L_Delay_80us19:
0x05C0	0xED200E  	DEC	W7
0x05C2	0x3AFFFE  	BRA NZ	L_Delay_80us19
0x05C4	0x000000  	NOP
0x05C6	0x000000  	NOP
;__Lib_Delays.c,487 :: 		}
L_end_Delay_80us:
0x05C8	0x060000  	RETURN
; end of _Delay_80us
_Ow_Write:
0x0812	0xFA0000  	LNK	#0
;__Lib_OneWire.c,68 :: 		
;__Lib_OneWire.c,71 :: 		
0x0814	0x200010  	MOV	#1, W0
0x0816	0xDD000B  	SL	W0, W11, W0
; bit_mask_1 start address is: 4 (W2)
0x0818	0x780100  	MOV	W0, W2
;__Lib_OneWire.c,72 :: 		
; bit_mask_0 start address is: 2 (W1)
0x081A	0xEA8080  	COM	W0, W1
;__Lib_OneWire.c,75 :: 		
; i start address is: 6 (W3)
0x081C	0xEF2006  	CLR	W3
; i end address is: 6 (W3)
L_Ow_Write4:
; i start address is: 6 (W3)
; bit_mask_0 start address is: 2 (W1)
; bit_mask_0 end address is: 2 (W1)
; bit_mask_1 start address is: 4 (W2)
; bit_mask_1 end address is: 4 (W2)
0x081E	0xE11867  	CP	W3, #7
0x0820	0x3E0012  	BRA GTU	L_Ow_Write5
L__Ow_Write15:
; bit_mask_0 end address is: 2 (W1)
; bit_mask_1 end address is: 4 (W2)
;__Lib_OneWire.c,77 :: 		
; bit_mask_1 start address is: 4 (W2)
; bit_mask_0 start address is: 2 (W1)
0x0822	0xFB800C  	ZE	W12, W0
0x0824	0xDE0003  	LSR	W0, W3, W0
; j start address is: 0 (W0)
0x0826	0xFB8000  	ZE	W0, W0
;__Lib_OneWire.c,78 :: 		
; j start address is: 8 (W4)
0x0828	0x600261  	AND	W0, #1, W4
; j end address is: 0 (W0)
;__Lib_OneWire.c,81 :: 		
0x082A	0x450062  	ADD	W10, #2, W0
0x082C	0x608810  	AND	W1, [W0], [W0]
;__Lib_OneWire.c,83 :: 		
0x082E	0x550062  	SUB	W10, #2, W0
0x0830	0x608810  	AND	W1, [W0], [W0]
;__Lib_OneWire.c,85 :: 		
0x0832	0xE20008  	CP0	W4
0x0834	0x320002  	BRA Z	L_Ow_Write7
L__Ow_Write16:
; j end address is: 8 (W4)
;__Lib_OneWire.c,86 :: 		
0x0836	0x550062  	SUB	W10, #2, W0
0x0838	0x710810  	IOR	W2, [W0], [W0]
;__Lib_OneWire.c,87 :: 		
L_Ow_Write7:
;__Lib_OneWire.c,89 :: 		
0x083A	0x07FEC1  	RCALL	_Delay_80us
;__Lib_OneWire.c,92 :: 		
0x083C	0x550062  	SUB	W10, #2, W0
0x083E	0x710810  	IOR	W2, [W0], [W0]
;__Lib_OneWire.c,93 :: 		
0x0840	0x07FEB9  	RCALL	_Delay_1us
;__Lib_OneWire.c,75 :: 		
0x0842	0xEC2006  	INC	W3
;__Lib_OneWire.c,94 :: 		
; bit_mask_0 end address is: 2 (W1)
; bit_mask_1 end address is: 4 (W2)
; i end address is: 6 (W3)
0x0844	0x37FFEC  	BRA	L_Ow_Write4
L_Ow_Write5:
;__Lib_OneWire.c,96 :: 		
0x0846	0x07FD30  	RCALL	_Delay_50us
;__Lib_OneWire.c,97 :: 		
0x0848	0x07FD2F  	RCALL	_Delay_50us
;__Lib_OneWire.c,98 :: 		
L_end_Ow_Write:
0x084A	0xFA8000  	ULNK
0x084C	0x060000  	RETURN
; end of _Ow_Write
_Delay_1us:
;__Lib_Delays.c,380 :: 		void Delay_1us()
;__Lib_Delays.c,382 :: 		Delay_us(1);
0x05B4	0x2000D7  	MOV	#13, W7
L_Delay_1us11:
0x05B6	0xED200E  	DEC	W7
0x05B8	0x3AFFFE  	BRA NZ	L_Delay_1us11
0x05BA	0x000000  	NOP
;__Lib_Delays.c,383 :: 		}
L_end_Delay_1us:
0x05BC	0x060000  	RETURN
; end of _Delay_1us
_Delay_50us:
;__Lib_Delays.c,458 :: 		void Delay_50us()
;__Lib_Delays.c,460 :: 		Delay_us(50);
0x02A8	0x2029A7  	MOV	#666, W7
L_Delay_50us17:
0x02AA	0xED200E  	DEC	W7
0x02AC	0x3AFFFE  	BRA NZ	L_Delay_50us17
0x02AE	0x000000  	NOP
0x02B0	0x000000  	NOP
;__Lib_Delays.c,461 :: 		}
L_end_Delay_50us:
0x02B2	0x060000  	RETURN
; end of _Delay_50us
_Ow_Read:
0x07D6	0xFA0000  	LNK	#0
;__Lib_OneWire.c,34 :: 		
;__Lib_OneWire.c,37 :: 		
0x07D8	0x200010  	MOV	#1, W0
0x07DA	0xDD000B  	SL	W0, W11, W0
; bit_mask_1 start address is: 4 (W2)
0x07DC	0x780100  	MOV	W0, W2
;__Lib_OneWire.c,38 :: 		
; bit_mask_0 start address is: 2 (W1)
0x07DE	0xEA8080  	COM	W0, W1
;__Lib_OneWire.c,40 :: 		
; tmp start address is: 8 (W4)
0x07E0	0xEF2008  	CLR	W4
;__Lib_OneWire.c,43 :: 		
; i start address is: 6 (W3)
0x07E2	0xEF2006  	CLR	W3
; tmp end address is: 8 (W4)
; i end address is: 6 (W3)
L_Ow_Read0:
; i start address is: 6 (W3)
; tmp start address is: 8 (W4)
; bit_mask_0 start address is: 2 (W1)
; bit_mask_0 end address is: 2 (W1)
; bit_mask_1 start address is: 4 (W2)
; bit_mask_1 end address is: 4 (W2)
0x07E4	0xE11867  	CP	W3, #7
0x07E6	0x3E0012  	BRA GTU	L_Ow_Read1
L__Ow_Read12:
; bit_mask_0 end address is: 2 (W1)
; bit_mask_1 end address is: 4 (W2)
;__Lib_OneWire.c,46 :: 		
; bit_mask_1 start address is: 4 (W2)
; bit_mask_0 start address is: 2 (W1)
0x07E8	0x450062  	ADD	W10, #2, W0
0x07EA	0x608810  	AND	W1, [W0], [W0]
;__Lib_OneWire.c,48 :: 		
0x07EC	0x550062  	SUB	W10, #2, W0
0x07EE	0x608810  	AND	W1, [W0], [W0]
;__Lib_OneWire.c,50 :: 		
0x07F0	0x07FEE1  	RCALL	_Delay_1us
;__Lib_OneWire.c,53 :: 		
0x07F2	0x550062  	SUB	W10, #2, W0
0x07F4	0x710810  	IOR	W2, [W0], [W0]
;__Lib_OneWire.c,55 :: 		
0x07F6	0x07FEDE  	RCALL	_Delay_1us
;__Lib_OneWire.c,57 :: 		
0x07F8	0x61001A  	AND	W2, [W10], W0
0x07FA	0x320004  	BRA Z	L__Ow_Read8
L__Ow_Read13:
;__Lib_OneWire.c,58 :: 		
0x07FC	0x200010  	MOV	#1, W0
0x07FE	0xDD0003  	SL	W0, W3, W0
0x0800	0x720200  	IOR	W4, W0, W4
; tmp end address is: 8 (W4)
0x0802	0x370000  	BRA	L_Ow_Read3
L__Ow_Read8:
;__Lib_OneWire.c,57 :: 		
;__Lib_OneWire.c,58 :: 		
L_Ow_Read3:
;__Lib_OneWire.c,60 :: 		
; tmp start address is: 8 (W4)
0x0804	0x07FD51  	RCALL	_Delay_50us
;__Lib_OneWire.c,61 :: 		
0x0806	0x07FD50  	RCALL	_Delay_50us
;__Lib_OneWire.c,43 :: 		
0x0808	0xEC2006  	INC	W3
;__Lib_OneWire.c,63 :: 		
; bit_mask_0 end address is: 2 (W1)
; bit_mask_1 end address is: 4 (W2)
; i end address is: 6 (W3)
0x080A	0x37FFEC  	BRA	L_Ow_Read0
L_Ow_Read1:
;__Lib_OneWire.c,64 :: 		
0x080C	0x784004  	MOV.B	W4, W0
; tmp end address is: 8 (W4)
;__Lib_OneWire.c,65 :: 		
L_end_Ow_Read:
0x080E	0xFA8000  	ULNK
0x0810	0x060000  	RETURN
; end of _Ow_Read
_sqrt:
0x084E	0xFA000C  	LNK	#12
;__Lib_CMath.c,151 :: 		
;__Lib_CMath.c,156 :: 		
0x0850	0x781F8C  	PUSH	W12
0x0852	0xBE9F8A  	PUSH.D	W10
0x0854	0xEF2004  	CLR	W2
0x0856	0xEF2006  	CLR	W3
0x0858	0xBE000A  	MOV.D	W10, W0
0x085A	0x07FD0B  	RCALL	__Compare_Le_Fp
0x085C	0xE00000  	CP0	W0
0x085E	0xEF6000  	CLR.B	W0
0x0860	0x3C0001  	BRA GT	L__sqrt108
0x0862	0xEC6000  	INC.B	W0
L__sqrt108:
0x0864	0xBE054F  	POP.D	W10
0x0866	0xE24000  	CP0.B	W0
0x0868	0x320003  	BRA Z	L_sqrt27
L__sqrt109:
;__Lib_CMath.c,157 :: 		
0x086A	0xEF2000  	CLR	W0
0x086C	0xEF2002  	CLR	W1
0x086E	0x37005E  	BRA	L_end_sqrt
L_sqrt27:
;__Lib_CMath.c,158 :: 		
0x0870	0x98070A  	MOV	W10, [W14+0]
0x0872	0x98071B  	MOV	W11, [W14+2]
;__Lib_CMath.c,159 :: 		
0x0874	0xBE9F8A  	PUSH.D	W10
0x0876	0x200002  	MOV	#0, W2
0x0878	0x23F803  	MOV	#16256, W3
0x087A	0xBE000A  	MOV.D	W10, W0
0x087C	0x07FCFA  	RCALL	__Compare_Le_Fp
0x087E	0xE00000  	CP0	W0
0x0880	0xEF6000  	CLR.B	W0
0x0882	0x3D0001  	BRA GE	L__sqrt110
0x0884	0xEC6000  	INC.B	W0
L__sqrt110:
0x0886	0xBE054F  	POP.D	W10
0x0888	0xE24000  	CP0.B	W0
0x088A	0x320009  	BRA Z	L_sqrt28
L__sqrt111:
;__Lib_CMath.c,160 :: 		
0x088C	0xBE9F8A  	PUSH.D	W10
0x088E	0x90010E  	MOV	[W14+0], W2
0x0890	0x90019E  	MOV	[W14+2], W3
0x0892	0x200000  	MOV	#0, W0
0x0894	0x23F801  	MOV	#16256, W1
0x0896	0x07FD3D  	RCALL	__Div_FP
0x0898	0xBE054F  	POP.D	W10
0x089A	0x980700  	MOV	W0, [W14+0]
0x089C	0x980711  	MOV	W1, [W14+2]
L_sqrt28:
;__Lib_CMath.c,161 :: 		
0x089E	0x47006A  	ADD	W14, #10, W0
0x08A0	0xBE9F8A  	PUSH.D	W10
0x08A2	0x780600  	MOV	W0, W12
0x08A4	0x90050E  	MOV	[W14+0], W10
0x08A6	0x90059E  	MOV	[W14+2], W11
0x08A8	0x07FCE9  	RCALL	_frexp
;__Lib_CMath.c,162 :: 		
0x08AA	0x90015E  	MOV	[W14+10], W2
0x08AC	0xDE9141  	ASR	W2, #1, W2
0x08AE	0x780602  	MOV	W2, W12
0x08B0	0xBE0500  	MOV.D	W0, W10
0x08B2	0x07FD00  	RCALL	_ldexp
0x08B4	0xBE054F  	POP.D	W10
0x08B6	0x980700  	MOV	W0, [W14+0]
0x08B8	0x980711  	MOV	W1, [W14+2]
;__Lib_CMath.c,163 :: 		
0x08BA	0xBE9F8A  	PUSH.D	W10
0x08BC	0x200002  	MOV	#0, W2
0x08BE	0x23F803  	MOV	#16256, W3
0x08C0	0xBE000A  	MOV.D	W10, W0
0x08C2	0x07FCD7  	RCALL	__Compare_Le_Fp
0x08C4	0xE00000  	CP0	W0
0x08C6	0xEF6000  	CLR.B	W0
0x08C8	0x3D0001  	BRA GE	L__sqrt112
0x08CA	0xEC6000  	INC.B	W0
L__sqrt112:
0x08CC	0xBE054F  	POP.D	W10
0x08CE	0xE24000  	CP0.B	W0
0x08D0	0x320009  	BRA Z	L_sqrt29
L__sqrt113:
;__Lib_CMath.c,164 :: 		
0x08D2	0xBE9F8A  	PUSH.D	W10
0x08D4	0x90010E  	MOV	[W14+0], W2
0x08D6	0x90019E  	MOV	[W14+2], W3
0x08D8	0x200000  	MOV	#0, W0
0x08DA	0x23F801  	MOV	#16256, W1
0x08DC	0x07FD1A  	RCALL	__Div_FP
0x08DE	0xBE054F  	POP.D	W10
0x08E0	0x980700  	MOV	W0, [W14+0]
0x08E2	0x980711  	MOV	W1, [W14+2]
L_sqrt29:
;__Lib_CMath.c,165 :: 		
0x08E4	0x200140  	MOV	#20, W0
0x08E6	0x980740  	MOV	W0, [W14+8]
;__Lib_CMath.c,166 :: 		
L_sqrt30:
;__Lib_CMath.c,167 :: 		
0x08E8	0xBE9F8A  	PUSH.D	W10
0x08EA	0x90010E  	MOV	[W14+0], W2
0x08EC	0x90019E  	MOV	[W14+2], W3
0x08EE	0xBE000A  	MOV.D	W10, W0
0x08F0	0x07FD10  	RCALL	__Div_FP
0x08F2	0x90010E  	MOV	[W14+0], W2
0x08F4	0x90019E  	MOV	[W14+2], W3
0x08F6	0x07FDA8  	RCALL	__AddSub_FP
0x08F8	0x200002  	MOV	#0, W2
0x08FA	0x240003  	MOV	#16384, W3
0x08FC	0x07FD0A  	RCALL	__Div_FP
0x08FE	0x980720  	MOV	W0, [W14+4]
0x0900	0x980731  	MOV	W1, [W14+6]
;__Lib_CMath.c,168 :: 		
0x0902	0x90010E  	MOV	[W14+0], W2
0x0904	0x90019E  	MOV	[W14+2], W3
0x0906	0x07FCB5  	RCALL	__Compare_Le_Fp
0x0908	0xE00000  	CP0	W0
0x090A	0xEF6000  	CLR.B	W0
0x090C	0x3A0001  	BRA NZ	L__sqrt114
0x090E	0xEC6000  	INC.B	W0
L__sqrt114:
0x0910	0xBE054F  	POP.D	W10
0x0912	0xE24000  	CP0.B	W0
0x0914	0x320001  	BRA Z	L_sqrt33
L__sqrt115:
;__Lib_CMath.c,169 :: 		
0x0916	0x370008  	BRA	L_sqrt31
L_sqrt33:
;__Lib_CMath.c,170 :: 		
0x0918	0x90002E  	MOV	[W14+4], W0
0x091A	0x9000BE  	MOV	[W14+6], W1
0x091C	0x980700  	MOV	W0, [W14+0]
0x091E	0x980711  	MOV	W1, [W14+2]
;__Lib_CMath.c,171 :: 		
0x0920	0x90004E  	MOV	[W14+8], W0
0x0922	0xED2000  	DEC	W0
0x0924	0x980740  	MOV	W0, [W14+8]
0x0926	0x3AFFE0  	BRA NZ	L_sqrt30
L__sqrt116:
L_sqrt31:
;__Lib_CMath.c,173 :: 		
0x0928	0x90000E  	MOV	[W14+0], W0
0x092A	0x90009E  	MOV	[W14+2], W1
;__Lib_CMath.c,174 :: 		
;__Lib_CMath.c,173 :: 		
;__Lib_CMath.c,174 :: 		
L_end_sqrt:
0x092C	0x78064F  	POP	W12
0x092E	0xFA8000  	ULNK
0x0930	0x060000  	RETURN
; end of _sqrt
_frexp:
0x027C	0xFA0004  	LNK	#4
;__Lib_CMath.c,80 :: 		
;__Lib_CMath.c,84 :: 		
0x027E	0x98070A  	MOV	W10, [W14+0]
0x0280	0x98071B  	MOV	W11, [W14+2]
;__Lib_CMath.c,85 :: 		
0x0282	0x90009E  	MOV	[W14+2], W1
0x0284	0x27F800  	MOV	#32640, W0
0x0286	0x608080  	AND	W1, W0, W1
0x0288	0xDE08C7  	LSR	W1, #7, W1
0x028A	0x2007E0  	MOV	#126, W0
0x028C	0x508000  	SUB	W1, W0, W0
;__Lib_CMath.c,86 :: 		
0x028E	0x780E00  	MOV	W0, [W12]
;__Lib_CMath.c,87 :: 		
0x0290	0x23F001  	MOV	#16128, W1
0x0292	0x470062  	ADD	W14, #2, W0
0x0294	0x688090  	XOR	W1, [W0], W1
0x0296	0x27F800  	MOV	#32640, W0
0x0298	0x608080  	AND	W1, W0, W1
0x029A	0x470062  	ADD	W14, #2, W0
0x029C	0x688090  	XOR	W1, [W0], W1
0x029E	0x980711  	MOV	W1, [W14+2]
;__Lib_CMath.c,88 :: 		
0x02A0	0x90000E  	MOV	[W14+0], W0
0x02A2	0x90009E  	MOV	[W14+2], W1
;__Lib_CMath.c,95 :: 		
L_end_frexp:
0x02A4	0xFA8000  	ULNK
0x02A6	0x060000  	RETURN
; end of _frexp
_ldexp:
0x02B4	0xFA0004  	LNK	#4
;__Lib_CMath.c,98 :: 		
;__Lib_CMath.c,101 :: 		
0x02B6	0x98070A  	MOV	W10, [W14+0]
0x02B8	0x98071B  	MOV	W11, [W14+2]
;__Lib_CMath.c,102 :: 		
0x02BA	0x90009E  	MOV	[W14+2], W1
0x02BC	0x27F800  	MOV	#32640, W0
0x02BE	0x608000  	AND	W1, W0, W0
0x02C0	0xDE0047  	LSR	W0, #7, W0
0x02C2	0x460000  	ADD	W12, W0, W0
0x02C4	0x780600  	MOV	W0, W12
;__Lib_CMath.c,103 :: 		
0x02C6	0xE10060  	CP	W0, #0
0x02C8	0x3D0003  	BRA GE	L_ldexp11
L__ldexp90:
;__Lib_CMath.c,104 :: 		
0x02CA	0xEF2000  	CLR	W0
0x02CC	0xEF2002  	CLR	W1
0x02CE	0x37001F  	BRA	L_end_ldexp
L_ldexp11:
;__Lib_CMath.c,106 :: 		
0x02D0	0x200FF0  	MOV	#255, W0
0x02D2	0xE16000  	CP	W12, W0
0x02D4	0x340010  	BRA LE	L_ldexp13
L__ldexp91:
;__Lib_CMath.c,107 :: 		
0x02D6	0xEF2004  	CLR	W2
0x02D8	0xEF2006  	CLR	W3
0x02DA	0xBE000A  	MOV.D	W10, W0
0x02DC	0x07FFCA  	RCALL	__Compare_Le_Fp
0x02DE	0xE00000  	CP0	W0
0x02E0	0xEF6000  	CLR.B	W0
0x02E2	0x3D0001  	BRA GE	L__ldexp92
0x02E4	0xEC6000  	INC.B	W0
L__ldexp92:
0x02E6	0xE24000  	CP0.B	W0
0x02E8	0x320003  	BRA Z	L_ldexp14
L__ldexp93:
;__Lib_CMath.c,108 :: 		
0x02EA	0x2FFFF0  	MOV	#65535, W0
0x02EC	0x2FF7F1  	MOV	#65407, W1
0x02EE	0x37000F  	BRA	L_end_ldexp
L_ldexp14:
;__Lib_CMath.c,110 :: 		
0x02F0	0x2FFFF0  	MOV	#65535, W0
0x02F2	0x27F7F1  	MOV	#32639, W1
0x02F4	0x37000C  	BRA	L_end_ldexp
L_ldexp13:
;__Lib_CMath.c,112 :: 		
0x02F6	0xB3C070  	MOV.B	#7, W0
0x02F8	0xFB0000  	SE	W0, W0
0x02FA	0xDD6080  	SL	W12, W0, W1
0x02FC	0x470062  	ADD	W14, #2, W0
0x02FE	0x688090  	XOR	W1, [W0], W1
0x0300	0x27F800  	MOV	#32640, W0
0x0302	0x608080  	AND	W1, W0, W1
0x0304	0x470062  	ADD	W14, #2, W0
0x0306	0x688090  	XOR	W1, [W0], W1
0x0308	0x980711  	MOV	W1, [W14+2]
;__Lib_CMath.c,113 :: 		
0x030A	0x90000E  	MOV	[W14+0], W0
0x030C	0x90009E  	MOV	[W14+2], W1
;__Lib_CMath.c,115 :: 		
L_end_ldexp:
0x030E	0xFA8000  	ULNK
0x0310	0x060000  	RETURN
; end of _ldexp
__Compare_Le_Fp:
0x0272	0xFA0000  	LNK	#0
;__Lib_MathDouble.c,1348 :: 		
;__Lib_MathDouble.c,1349 :: 		
0x0274	0x200014  	MOV	#1, W4
;__Lib_MathDouble.c,1350 :: 		
0x0276	0x07FFC4  	RCALL	__Compare_Fp
;__Lib_MathDouble.c,1351 :: 		
L_end__Compare_Le_Fp:
0x0278	0xFA8000  	ULNK
0x027A	0x060000  	RETURN
; end of __Compare_Le_Fp
__Compare_Fp:
0x0200	0xFA0000  	LNK	#0
;__Lib_MathDouble.c,1272 :: 		
;__Lib_MathDouble.c,1274 :: 		
0x0202	0x070002  	RCALL	CompareFp__fcompare
;__Lib_MathDouble.c,1275 :: 		
0x0204	0x00000004026E  	GOTO	the_end__Compare_Fp
;__Lib_MathDouble.c,1277 :: 		
CompareFp__fcompare:
;__Lib_MathDouble.c,1278 :: 		
0x0208	0x781F84  	MOV	W4, [W15++]
;__Lib_MathDouble.c,1279 :: 		
0x020A	0x070014  	RCALL	CompareFp__funpack2
;__Lib_MathDouble.c,1280 :: 		
0x020C	0x78004F  	MOV	[--W15], W0
;__Lib_MathDouble.c,1281 :: 		
0x020E	0x330011  	BRA N	CompareFp_exit
;__Lib_MathDouble.c,1282 :: 		
0x0210	0x2FFFF0  	MOV	#65535, W0
;__Lib_MathDouble.c,1283 :: 		
0x0212	0x6C8F83  	XOR	W9, W3, [W15]
;__Lib_MathDouble.c,1284 :: 		
0x0214	0x3B0006  	BRA NN	CompareFp_comparemag
;__Lib_MathDouble.c,1285 :: 		
0x0216	0x650504  	AND	W10, W4, W10
;__Lib_MathDouble.c,1286 :: 		
0x0218	0xA7000A  	BTSC	W10, #0
;__Lib_MathDouble.c,1287 :: 		
0x021A	0x370008  	BRA	CompareFp_returnEqual
;__Lib_MathDouble.c,1288 :: 		
0x021C	0xA6F009  	BTSS	W9, #15
;__Lib_MathDouble.c,1289 :: 		
0x021E	0x200010  	MOV	#1, W0
;__Lib_MathDouble.c,1290 :: 		
0x0220	0x370008  	BRA	CompareFp_exit
;__Lib_MathDouble.c,1291 :: 		
CompareFp_comparemag:
;__Lib_MathDouble.c,1292 :: 		
0x0222	0x540F82  	SUB	W8, W2, [W15]
;__Lib_MathDouble.c,1293 :: 		
0x0224	0x5C8F83  	SUBB	W9, W3, [W15]
;__Lib_MathDouble.c,1294 :: 		
0x0226	0x390003  	BRA LTU	CompareFp_adjust
;__Lib_MathDouble.c,1295 :: 		
0x0228	0x200010  	MOV	#1, W0
;__Lib_MathDouble.c,1296 :: 		
0x022A	0x3E0001  	BRA GTU	CompareFp_adjust
;__Lib_MathDouble.c,1297 :: 		
CompareFp_returnEqual:
;__Lib_MathDouble.c,1298 :: 		
0x022C	0x200000  	MOV	#0, W0
;__Lib_MathDouble.c,1299 :: 		
CompareFp_adjust:
;__Lib_MathDouble.c,1300 :: 		
0x022E	0xA7F009  	BTSC	W9, #15
;__Lib_MathDouble.c,1301 :: 		
0x0230	0xEA0000  	NEG	W0, W0
;__Lib_MathDouble.c,1302 :: 		
CompareFp_exit:
;__Lib_MathDouble.c,1303 :: 		
0x0232	0x060000  	RETURN
;__Lib_MathDouble.c,1304 :: 		
CompareFp__funpack2:
;__Lib_MathDouble.c,1305 :: 		
0x0234	0xBE8400  	MOV.D	W0, W8
;__Lib_MathDouble.c,1306 :: 		
0x0236	0x070006  	RCALL	CompareFp__funpack
;__Lib_MathDouble.c,1307 :: 		
0x0238	0xBE8300  	MOV.D	W0, W6
;__Lib_MathDouble.c,1308 :: 		
0x023A	0xBE8504  	MOV.D	W4, W10
;__Lib_MathDouble.c,1309 :: 		
0x023C	0xBE8002  	MOV.D	W2, W0
;__Lib_MathDouble.c,1310 :: 		
0x023E	0x070002  	RCALL	CompareFp__funpack
;__Lib_MathDouble.c,1311 :: 		
0x0240	0x754F84  	IOR.B	W10, W4, [W15]
;__Lib_MathDouble.c,1312 :: 		
0x0242	0x060000  	RETURN
;__Lib_MathDouble.c,1313 :: 		
CompareFp__funpack:
;__Lib_MathDouble.c,1314 :: 		
0x0244	0xDE0AC7  	LSR	W1, #7, W5
;__Lib_MathDouble.c,1315 :: 		
0x0246	0xB207F1  	AND	#127, W1
;__Lib_MathDouble.c,1316 :: 		
0x0248	0xB20FF5  	AND	#255, W5
;__Lib_MathDouble.c,1317 :: 		
0x024A	0x320008  	BRA Z	CompareFp_zeroorsub
;__Lib_MathDouble.c,1318 :: 		
0x024C	0x42CFE1  	ADD.B	W5, #1, [W15]
;__Lib_MathDouble.c,1319 :: 		
0x024E	0x320002  	BRA Z	CompareFp_nanorinf
;__Lib_MathDouble.c,1320 :: 		
CompareFp_finitereturn:
;__Lib_MathDouble.c,1321 :: 		
0x0250	0xA8E002  	BSET	W1, #7
;__Lib_MathDouble.c,1322 :: 		
0x0252	0x050024  	RETLW	#2, W4
;__Lib_MathDouble.c,1323 :: 		
CompareFp_nanorinf:
;__Lib_MathDouble.c,1324 :: 		
0x0254	0x700F81  	IOR	W0, W1, [W15]
;__Lib_MathDouble.c,1325 :: 		
0x0256	0x320001  	BRA Z	CompareFp_infinite
;__Lib_MathDouble.c,1326 :: 		
0x0258	0x050804  	RETLW	#128, W4
;__Lib_MathDouble.c,1327 :: 		
CompareFp_infinite:
;__Lib_MathDouble.c,1328 :: 		
0x025A	0x050044  	RETLW	#4, W4
;__Lib_MathDouble.c,1329 :: 		
CompareFp_zeroorsub:
;__Lib_MathDouble.c,1330 :: 		
0x025C	0x700F81  	IOR	W0, W1, [W15]
;__Lib_MathDouble.c,1331 :: 		
0x025E	0x3A0002  	BRA NZ	CompareFp_subnormal
;__Lib_MathDouble.c,1332 :: 		
0x0260	0x050014  	RETLW	#1, W4
;__Lib_MathDouble.c,1333 :: 		
CompareFp_normalize:
;__Lib_MathDouble.c,1334 :: 		
0x0262	0xE90285  	DEC	W5, W5
;__Lib_MathDouble.c,1335 :: 		
CompareFp_subnormal:
;__Lib_MathDouble.c,1336 :: 		
0x0264	0x400000  	ADD	W0, W0, W0
;__Lib_MathDouble.c,1337 :: 		
0x0266	0x48C081  	ADDC.B	W1, W1, W1
;__Lib_MathDouble.c,1338 :: 		
0x0268	0x3BFFFC  	BRA NN	CompareFp_normalize
;__Lib_MathDouble.c,1339 :: 		
0x026A	0xA8E002  	BSET	W1, #7
;__Lib_MathDouble.c,1340 :: 		
0x026C	0x050024  	RETLW	#2, W4
;__Lib_MathDouble.c,1343 :: 		
the_end__Compare_Fp:
;__Lib_MathDouble.c,1345 :: 		
L_end__Compare_Fp:
0x026E	0xFA8000  	ULNK
0x0270	0x060000  	RETURN
; end of __Compare_Fp
__Div_FP:
0x0312	0xFA0000  	LNK	#0
;__Lib_MathDouble.c,1050 :: 		
;__Lib_MathDouble.c,1052 :: 		
0x0314	0x070002  	RCALL	DivFP___divsf3
;__Lib_MathDouble.c,1053 :: 		
0x0316	0x000000040444  	GOTO	the_end__Div_FP
;__Lib_MathDouble.c,1056 :: 		
DivFP___divsf3:
;__Lib_MathDouble.c,1057 :: 		
0x031A	0xBE9F88  	MOV.D	W8, [W15++]
;__Lib_MathDouble.c,1058 :: 		
0x031C	0xBE9F8A  	MOV.D	W10, [W15++]
;__Lib_MathDouble.c,1059 :: 		
0x031E	0x781F8C  	MOV	W12, [W15++]
;__Lib_MathDouble.c,1060 :: 		
0x0320	0x07003E  	RCALL	DivFP__funpack2
;__Lib_MathDouble.c,1061 :: 		
0x0322	0x330045  	BRA N	DivFP__fPropagateNaN
;__Lib_MathDouble.c,1062 :: 		
0x0324	0x6C8603  	XOR	W9, W3, W12
;__Lib_MathDouble.c,1063 :: 		
0x0326	0xE15064  	CP	W10, #4
;__Lib_MathDouble.c,1064 :: 		
0x0328	0x32002E  	BRA Z	DivFP_aisinfinite
;__Lib_MathDouble.c,1065 :: 		
0x032A	0xE12064  	CP	W4, #4
;__Lib_MathDouble.c,1066 :: 		
0x032C	0x320033  	BRA Z	DivFP_returnZero
;__Lib_MathDouble.c,1067 :: 		
0x032E	0xE15061  	CP	W10, #1
;__Lib_MathDouble.c,1068 :: 		
0x0330	0x32002F  	BRA Z	DivFP_aiszero
;__Lib_MathDouble.c,1069 :: 		
0x0332	0xE12061  	CP	W4, #1
;__Lib_MathDouble.c,1070 :: 		
0x0334	0x320031  	BRA Z	DivFP_returnInf
;__Lib_MathDouble.c,1071 :: 		
DivFP_finitenonzero:
;__Lib_MathDouble.c,1072 :: 		
0x0336	0x558585  	SUB	W11, W5, W11
;__Lib_MathDouble.c,1073 :: 		
0x0338	0xB007EB  	ADD	#126, W11
;__Lib_MathDouble.c,1074 :: 		
0x033A	0x200009  	MOV	#0, W9
;__Lib_MathDouble.c,1075 :: 		
0x033C	0x200408  	MOV	#64, W8
;__Lib_MathDouble.c,1076 :: 		
0x033E	0x370005  	BRA	DivFP_diventry
;__Lib_MathDouble.c,1077 :: 		
DivFP_divnext:
;__Lib_MathDouble.c,1078 :: 		
0x0340	0x440408  	ADD	W8, W8, W8
;__Lib_MathDouble.c,1079 :: 		
0x0342	0x4C8489  	ADDC	W9, W9, W9
;__Lib_MathDouble.c,1080 :: 		
0x0344	0x31000A  	BRA C	DivFP_divdone
;__Lib_MathDouble.c,1081 :: 		
DivFP_divloop:
;__Lib_MathDouble.c,1082 :: 		
0x0346	0x430306  	ADD	W6, W6, W6
;__Lib_MathDouble.c,1083 :: 		
0x0348	0x4B8387  	ADDC	W7, W7, W7
;__Lib_MathDouble.c,1084 :: 		
DivFP_diventry:
;__Lib_MathDouble.c,1085 :: 		
0x034A	0x530100  	SUB	W6, W0, W2
;__Lib_MathDouble.c,1086 :: 		
0x034C	0x5B8181  	SUBB	W7, W1, W3
;__Lib_MathDouble.c,1087 :: 		
0x034E	0x33FFF8  	BRA N	DivFP_divnext
;__Lib_MathDouble.c,1088 :: 		
0x0350	0xBE8302  	MOV.D	W2, W6
;__Lib_MathDouble.c,1089 :: 		
0x0352	0xA80010  	BSET	W8, #0
;__Lib_MathDouble.c,1090 :: 		
0x0354	0x440408  	ADD	W8, W8, W8
;__Lib_MathDouble.c,1091 :: 		
0x0356	0x4C8489  	ADDC	W9, W9, W9
;__Lib_MathDouble.c,1092 :: 		
0x0358	0x39FFF6  	BRA NC	DivFP_divloop
;__Lib_MathDouble.c,1093 :: 		
DivFP_divdone:
;__Lib_MathDouble.c,1094 :: 		
0x035A	0xDD39C6  	SL	W7, #6, W3
;__Lib_MathDouble.c,1095 :: 		
0x035C	0x730183  	IOR	W6, W3, W3
;__Lib_MathDouble.c,1096 :: 		
0x035E	0x320001  	BRA Z	DivFP_stickyok
;__Lib_MathDouble.c,1097 :: 		
0x0360	0x200013  	MOV	#1, W3
;__Lib_MathDouble.c,1098 :: 		
DivFP_stickyok:
;__Lib_MathDouble.c,1099 :: 		
0x0362	0xD10489  	LSR	W9, W9
;__Lib_MathDouble.c,1100 :: 		
0x0364	0xD38408  	RRC	W8, W8
;__Lib_MathDouble.c,1101 :: 		
0x0366	0xA39809  	BTST.Z	W9, #9
;__Lib_MathDouble.c,1102 :: 		
0x0368	0x320005  	BRA Z	DivFP_guardused
;__Lib_MathDouble.c,1103 :: 		
0x036A	0xA70008  	BTSC	W8, #0
;__Lib_MathDouble.c,1104 :: 		
0x036C	0xA80006  	BSET	W3, #0
;__Lib_MathDouble.c,1105 :: 		
0x036E	0xD10489  	LSR	W9, W9
;__Lib_MathDouble.c,1106 :: 		
0x0370	0xD38408  	RRC	W8, W8
;__Lib_MathDouble.c,1107 :: 		
0x0372	0xE8058B  	INC	W11, W11
;__Lib_MathDouble.c,1108 :: 		
DivFP_guardused:
;__Lib_MathDouble.c,1109 :: 		
0x0374	0xD10489  	LSR	W9, W9
;__Lib_MathDouble.c,1110 :: 		
0x0376	0xD38408  	RRC	W8, W8
;__Lib_MathDouble.c,1111 :: 		
0x0378	0xEB0100  	CLR	W2
;__Lib_MathDouble.c,1112 :: 		
0x037A	0xD28102  	RLC	W2, W2
;__Lib_MathDouble.c,1113 :: 		
0x037C	0x070028  	RCALL	DivFP__fpack
;__Lib_MathDouble.c,1114 :: 		
DivFP_return0_1:
;__Lib_MathDouble.c,1115 :: 		
0x037E	0xA1F001  	BCLR	W1, #15
;__Lib_MathDouble.c,1116 :: 		
0x0380	0xA7F00C  	BTSC	W12, #15
;__Lib_MathDouble.c,1117 :: 		
0x0382	0xA8E003  	BSET	W1, #15
;__Lib_MathDouble.c,1118 :: 		
0x0384	0x37001D  	BRA	DivFP__fbopExit
;__Lib_MathDouble.c,1119 :: 		
DivFP_aisinfinite:
;__Lib_MathDouble.c,1120 :: 		
0x0386	0xE12064  	CP	W4, #4
;__Lib_MathDouble.c,1121 :: 		
0x0388	0x32001F  	BRA Z	DivFP__fbopReturnNaN
;__Lib_MathDouble.c,1122 :: 		
DivFP_return8_1:
;__Lib_MathDouble.c,1123 :: 		
0x038A	0xBE8108  	MOV.D	W8, W2
;__Lib_MathDouble.c,1124 :: 		
DivFP_return2_1:
;__Lib_MathDouble.c,1125 :: 		
0x038C	0xBE8002  	MOV.D	W2, W0
;__Lib_MathDouble.c,1126 :: 		
0x038E	0x37FFF7  	BRA	DivFP_return0_1
;__Lib_MathDouble.c,1127 :: 		
DivFP_aiszero:
;__Lib_MathDouble.c,1128 :: 		
0x0390	0xE12061  	CP	W4, #1
;__Lib_MathDouble.c,1129 :: 		
0x0392	0x32001A  	BRA Z	DivFP__fbopReturnNaN
;__Lib_MathDouble.c,1130 :: 		
DivFP_returnZero:
;__Lib_MathDouble.c,1131 :: 		
0x0394	0xB80060  	MUL.UU	W0, #0, W0
;__Lib_MathDouble.c,1132 :: 		
0x0396	0x37FFF3  	BRA	DivFP_return0_1
;__Lib_MathDouble.c,1133 :: 		
DivFP_returnInf:
;__Lib_MathDouble.c,1134 :: 		
0x0398	0x200000  	MOV	#0, W0
;__Lib_MathDouble.c,1135 :: 		
0x039A	0x27F801  	MOV	#32640, W1
;__Lib_MathDouble.c,1136 :: 		
0x039C	0x37FFF0  	BRA	DivFP_return0_1
;__Lib_MathDouble.c,1137 :: 		
DivFP__funpack2:
;__Lib_MathDouble.c,1138 :: 		
0x039E	0xBE8400  	MOV.D	W0, W8
;__Lib_MathDouble.c,1139 :: 		
0x03A0	0x07003C  	RCALL	DivFP__funpack
;__Lib_MathDouble.c,1140 :: 		
0x03A2	0xBE8300  	MOV.D	W0, W6
;__Lib_MathDouble.c,1141 :: 		
0x03A4	0xBE8504  	MOV.D	W4, W10
;__Lib_MathDouble.c,1142 :: 		
0x03A6	0xBE8002  	MOV.D	W2, W0
;__Lib_MathDouble.c,1143 :: 		
0x03A8	0x070038  	RCALL	DivFP__funpack
;__Lib_MathDouble.c,1144 :: 		
0x03AA	0x754F84  	IOR.B	W10, W4, [W15]
;__Lib_MathDouble.c,1145 :: 		
0x03AC	0x060000  	RETURN
;__Lib_MathDouble.c,1146 :: 		
DivFP__fPropagateNaN:
;__Lib_MathDouble.c,1147 :: 		
0x03AE	0xBE8002  	MOV.D	W2, W0
;__Lib_MathDouble.c,1148 :: 		
0x03B0	0xE15064  	CP	W10, #4
;__Lib_MathDouble.c,1149 :: 		
0x03B2	0x360005  	BRA LEU	DivFP_return0
;__Lib_MathDouble.c,1150 :: 		
0x03B4	0xE12064  	CP	W4, #4
;__Lib_MathDouble.c,1151 :: 		
0x03B6	0x360002  	BRA LEU	DivFP_return8
;__Lib_MathDouble.c,1152 :: 		
0x03B8	0xA36809  	BTST.Z	W9, #6
;__Lib_MathDouble.c,1153 :: 		
0x03BA	0x3A0001  	BRA NZ	DivFP_return0
;__Lib_MathDouble.c,1154 :: 		
DivFP_return8:
;__Lib_MathDouble.c,1155 :: 		
0x03BC	0xBE8008  	MOV.D	W8, W0
;__Lib_MathDouble.c,1156 :: 		
DivFP_return0:
;__Lib_MathDouble.c,1157 :: 		
0x03BE	0xA8C002  	BSET	W1, #6
;__Lib_MathDouble.c,1158 :: 		
DivFP__fbopExit:
;__Lib_MathDouble.c,1159 :: 		
0x03C0	0x78064F  	MOV	[--W15], W12
;__Lib_MathDouble.c,1160 :: 		
0x03C2	0xBE054F  	MOV.D	[--W15], W10
;__Lib_MathDouble.c,1161 :: 		
0x03C4	0xBE044F  	MOV.D	[--W15], W8
;__Lib_MathDouble.c,1162 :: 		
0x03C6	0x060000  	RETURN
;__Lib_MathDouble.c,1163 :: 		
DivFP__fbopReturnNaN:
;__Lib_MathDouble.c,1164 :: 		
0x03C8	0x2FFFF0  	MOV	#65535, W0
;__Lib_MathDouble.c,1165 :: 		
0x03CA	0x27FFF1  	MOV	#32767, W1
;__Lib_MathDouble.c,1166 :: 		
0x03CC	0x37FFF9  	BRA	DivFP__fbopExit
;__Lib_MathDouble.c,1167 :: 		
DivFP__fpack:
;__Lib_MathDouble.c,1168 :: 		
0x03CE	0x200081  	MOV	#8, W1
;__Lib_MathDouble.c,1169 :: 		
0x03D0	0x558061  	SUB	W11, #1, W0
;__Lib_MathDouble.c,1170 :: 		
0x03D2	0x3D000B  	BRA GE	DivFP_notsubnormal
;__Lib_MathDouble.c,1171 :: 		
0x03D4	0x20000B  	MOV	#0, W11
;__Lib_MathDouble.c,1172 :: 		
0x03D6	0x2FFE61  	MOV	#65510, W1
;__Lib_MathDouble.c,1173 :: 		
0x03D8	0xE10001  	CP	W0, W1
;__Lib_MathDouble.c,1174 :: 		
0x03DA	0x34001D  	BRA LE	DivFP_zerosig
;__Lib_MathDouble.c,1175 :: 		
DivFP_subnormal:
;__Lib_MathDouble.c,1176 :: 		
0x03DC	0x718182  	IOR	W3, W2, W3
;__Lib_MathDouble.c,1177 :: 		
0x03DE	0x640161  	AND	W8, #1, W2
;__Lib_MathDouble.c,1178 :: 		
0x03E0	0xD10489  	LSR	W9, W9
;__Lib_MathDouble.c,1179 :: 		
0x03E2	0xD38408  	RRC	W8, W8
;__Lib_MathDouble.c,1180 :: 		
0x03E4	0xE80000  	INC	W0, W0
;__Lib_MathDouble.c,1181 :: 		
0x03E6	0x3AFFFA  	BRA NZ	DivFP_subnormal
;__Lib_MathDouble.c,1182 :: 		
0x03E8	0x200071  	MOV	#7, W1
;__Lib_MathDouble.c,1183 :: 		
DivFP_notsubnormal:
;__Lib_MathDouble.c,1184 :: 		
0x03EA	0x640061  	AND	W8, #1, W0
;__Lib_MathDouble.c,1185 :: 		
0x03EC	0x700003  	IOR	W0, W3, W0
;__Lib_MathDouble.c,1186 :: 		
0x03EE	0x600002  	AND	W0, W2, W0
;__Lib_MathDouble.c,1187 :: 		
0x03F0	0x320009  	BRA Z	DivFP_packupandgo
;__Lib_MathDouble.c,1188 :: 		
0x03F2	0x440461  	ADD	W8, #1, W8
;__Lib_MathDouble.c,1189 :: 		
0x03F4	0x4C84E0  	ADDC	W9, #0, W9
;__Lib_MathDouble.c,1190 :: 		
0x03F6	0xA58809  	BTST.Z	W9, W1
;__Lib_MathDouble.c,1191 :: 		
0x03F8	0x320005  	BRA Z	DivFP_packupandgo
;__Lib_MathDouble.c,1192 :: 		
0x03FA	0xE8058B  	INC	W11, W11
;__Lib_MathDouble.c,1193 :: 		
0x03FC	0xE10868  	CP	W1, #8
;__Lib_MathDouble.c,1194 :: 		
0x03FE	0x3A0002  	BRA NZ	DivFP_packupandgo
;__Lib_MathDouble.c,1195 :: 		
0x0400	0xD10489  	LSR	W9, W9
;__Lib_MathDouble.c,1196 :: 		
0x0402	0xD38408  	RRC	W8, W8
;__Lib_MathDouble.c,1197 :: 		
DivFP_packupandgo:
;__Lib_MathDouble.c,1198 :: 		
0x0404	0x200FF2  	MOV	#255, W2
;__Lib_MathDouble.c,1199 :: 		
0x0406	0xE15802  	CP	W11, W2
;__Lib_MathDouble.c,1200 :: 		
0x0408	0x3D0005  	BRA GE	DivFP_overfloW
;__Lib_MathDouble.c,1201 :: 		
0x040A	0xDD5DC7  	SL	W11, #7, W11
;__Lib_MathDouble.c,1202 :: 		
0x040C	0xB207F9  	AND	#127, W9
;__Lib_MathDouble.c,1203 :: 		
0x040E	0x758089  	IOR	W11, W9, W1
;__Lib_MathDouble.c,1204 :: 		
0x0410	0x880008  	MOV	W8, W0
;__Lib_MathDouble.c,1205 :: 		
0x0412	0x060000  	RETURN
;__Lib_MathDouble.c,1206 :: 		
DivFP_overfloW:
;__Lib_MathDouble.c,1207 :: 		
0x0414	0x27F80B  	MOV	#32640, W11
;__Lib_MathDouble.c,1208 :: 		
DivFP_zerosig:
;__Lib_MathDouble.c,1209 :: 		
0x0416	0x88001B  	MOV	W11, W1
;__Lib_MathDouble.c,1210 :: 		
0x0418	0x050000  	RETLW	#0, W0
;__Lib_MathDouble.c,1211 :: 		
DivFP__funpack:
;__Lib_MathDouble.c,1212 :: 		
0x041A	0xDE0AC7  	LSR	W1, #7, W5
;__Lib_MathDouble.c,1213 :: 		
0x041C	0xB207F1  	AND	#127, W1
;__Lib_MathDouble.c,1214 :: 		
0x041E	0xB20FF5  	AND	#255, W5
;__Lib_MathDouble.c,1215 :: 		
0x0420	0x320008  	BRA Z	DivFP_zeroorsub
;__Lib_MathDouble.c,1216 :: 		
0x0422	0x42CFE1  	ADD.B	W5, #1, [W15]
;__Lib_MathDouble.c,1217 :: 		
0x0424	0x320002  	BRA Z	DivFP_nanorinf
;__Lib_MathDouble.c,1218 :: 		
DivFP_finitereturn:
;__Lib_MathDouble.c,1219 :: 		
0x0426	0xA8E002  	BSET	W1, #7
;__Lib_MathDouble.c,1220 :: 		
0x0428	0x050024  	RETLW	#2, W4
;__Lib_MathDouble.c,1221 :: 		
DivFP_nanorinf:
;__Lib_MathDouble.c,1222 :: 		
0x042A	0x700F81  	IOR	W0, W1, [W15]
;__Lib_MathDouble.c,1223 :: 		
0x042C	0x320001  	BRA Z	DivFP_infinite
;__Lib_MathDouble.c,1224 :: 		
0x042E	0x050804  	RETLW	#128, W4
;__Lib_MathDouble.c,1225 :: 		
DivFP_infinite:
;__Lib_MathDouble.c,1226 :: 		
0x0430	0x050044  	RETLW	#4, W4
;__Lib_MathDouble.c,1227 :: 		
DivFP_zeroorsub:
;__Lib_MathDouble.c,1228 :: 		
0x0432	0x700F81  	IOR	W0, W1, [W15]
;__Lib_MathDouble.c,1229 :: 		
0x0434	0x3A0002  	BRA NZ	DivFP_subnormal2
;__Lib_MathDouble.c,1230 :: 		
0x0436	0x050014  	RETLW	#1, W4
;__Lib_MathDouble.c,1231 :: 		
DivFP_normalize:
;__Lib_MathDouble.c,1232 :: 		
0x0438	0xE90285  	DEC	W5, W5
;__Lib_MathDouble.c,1233 :: 		
DivFP_subnormal2:
;__Lib_MathDouble.c,1234 :: 		
0x043A	0x400000  	ADD	W0, W0, W0
;__Lib_MathDouble.c,1235 :: 		
0x043C	0x48C081  	ADDC.B	W1, W1, W1
;__Lib_MathDouble.c,1236 :: 		
0x043E	0x3BFFFC  	BRA NN	DivFP_normalize
;__Lib_MathDouble.c,1237 :: 		
0x0440	0xA8E002  	BSET	W1, #7
;__Lib_MathDouble.c,1238 :: 		
0x0442	0x050024  	RETLW	#2, W4
;__Lib_MathDouble.c,1241 :: 		
the_end__Div_FP:
;__Lib_MathDouble.c,1243 :: 		
L_end__Div_FP:
0x0444	0xFA8000  	ULNK
0x0446	0x060000  	RETURN
; end of __Div_FP
__AddSub_FP:
0x0448	0xFA0000  	LNK	#0
;__Lib_MathDouble.c,582 :: 		
;__Lib_MathDouble.c,584 :: 		
0x044A	0x070002  	RCALL	AddSubFP__addsf3
;__Lib_MathDouble.c,585 :: 		
0x044C	0x0000000405B0  	GOTO	the_end__AddSub_FP
;__Lib_MathDouble.c,588 :: 		
AddSubFP__addsf3:
;__Lib_MathDouble.c,589 :: 		
0x0450	0xBE9F88  	MOV.D	W8, [W15++]
;__Lib_MathDouble.c,590 :: 		
0x0452	0xBE9F8A  	MOV.D	W10, [W15++]
;__Lib_MathDouble.c,591 :: 		
0x0454	0x781F8C  	MOV	W12, [W15++]
;__Lib_MathDouble.c,592 :: 		
0x0456	0x070059  	RCALL	AddSubFP__funpack2
;__Lib_MathDouble.c,593 :: 		
0x0458	0x330060  	BRA N	AddSubFP__fPropagateNaN
;__Lib_MathDouble.c,594 :: 		
0x045A	0xE15064  	CP	W10, #4
;__Lib_MathDouble.c,595 :: 		
0x045C	0x32004F  	BRA Z	AddSubFP_aisinfinite
;__Lib_MathDouble.c,596 :: 		
AddSubFP_checkspecialb:
;__Lib_MathDouble.c,597 :: 		
0x045E	0xE12064  	CP	W4, #4
;__Lib_MathDouble.c,598 :: 		
0x0460	0x320052  	BRA Z	AddSubFP_return2_3
;__Lib_MathDouble.c,599 :: 		
0x0462	0x6C8203  	XOR	W9, W3, W4
;__Lib_MathDouble.c,600 :: 		
0x0464	0x3B0007  	BRA NN	AddSubFP_getsign
;__Lib_MathDouble.c,601 :: 		
0x0466	0xD00509  	SL	W9, W10
;__Lib_MathDouble.c,602 :: 		
0x0468	0xD00603  	SL	W3, W12
;__Lib_MathDouble.c,603 :: 		
0x046A	0x540F82  	SUB	W8, W2, [W15]
;__Lib_MathDouble.c,604 :: 		
0x046C	0x5D060C  	SUBB	W10, W12, W12
;__Lib_MathDouble.c,605 :: 		
0x046E	0x390002  	BRA NC	AddSubFP_getsign
;__Lib_MathDouble.c,606 :: 		
0x0470	0x320002  	BRA Z	AddSubFP_gotsign
;__Lib_MathDouble.c,607 :: 		
0x0472	0x880039  	MOV	W9, W3
;__Lib_MathDouble.c,608 :: 		
AddSubFP_getsign:
;__Lib_MathDouble.c,609 :: 		
0x0474	0x8800C3  	MOV	W3, W12
;__Lib_MathDouble.c,610 :: 		
AddSubFP_gotsign:
;__Lib_MathDouble.c,611 :: 		
0x0476	0x558285  	SUB	W11, W5, W5
;__Lib_MathDouble.c,612 :: 		
0x0478	0x3D0004  	BRA GE	AddSubFP_expcanonical
;__Lib_MathDouble.c,613 :: 		
0x047A	0xFD0300  	EXCH	W0, W6
;__Lib_MathDouble.c,614 :: 		
0x047C	0xFD0381  	EXCH	W1, W7
;__Lib_MathDouble.c,615 :: 		
0x047E	0xEA0285  	NEG	W5, W5
;__Lib_MathDouble.c,616 :: 		
0x0480	0x42858B  	ADD	W5, W11, W11
;__Lib_MathDouble.c,617 :: 		
AddSubFP_expcanonical:
;__Lib_MathDouble.c,618 :: 		
0x0482	0x720F84  	IOR	W4, W4, [W15]
;__Lib_MathDouble.c,619 :: 		
0x0484	0x3B0002  	BRA NN	AddSubFP_nonegate
;__Lib_MathDouble.c,620 :: 		
0x0486	0x100060  	SUBR	W0, #0, W0
;__Lib_MathDouble.c,621 :: 		
0x0488	0x1880E0  	SUBBR	W1, #0, W1
;__Lib_MathDouble.c,622 :: 		
AddSubFP_nonegate:
;__Lib_MathDouble.c,623 :: 		
0x048A	0xB81160  	MUL.UU	W2, #0, W2
;__Lib_MathDouble.c,624 :: 		
0x048C	0xEB0500  	CLR	W10
;__Lib_MathDouble.c,625 :: 		
0x048E	0xE1287A  	CP	W5, #26
;__Lib_MathDouble.c,626 :: 		
0x0490	0x39000A  	BRA NC	AddSubFP_aligniter
;__Lib_MathDouble.c,627 :: 		
0x0492	0x880006  	MOV	W6, W0
;__Lib_MathDouble.c,628 :: 		
0x0494	0xDD5DC7  	SL	W11, #7, W11
;__Lib_MathDouble.c,629 :: 		
0x0496	0xB207F7  	AND	#127, W7
;__Lib_MathDouble.c,630 :: 		
0x0498	0x758087  	IOR	W11, W7, W1
;__Lib_MathDouble.c,631 :: 		
0x049A	0x37002D  	BRA	AddSubFP_signoff
;__Lib_MathDouble.c,632 :: 		
AddSubFP_align:
;__Lib_MathDouble.c,633 :: 		
0x049C	0x718182  	IOR	W3, W2, W3
;__Lib_MathDouble.c,634 :: 		
0x049E	0x88002A  	MOV	W10, W2
;__Lib_MathDouble.c,635 :: 		
0x04A0	0x600561  	AND	W0, #1, W10
;__Lib_MathDouble.c,636 :: 		
0x04A2	0xD18081  	ASR	W1, W1
;__Lib_MathDouble.c,637 :: 		
0x04A4	0xD38000  	RRC	W0, W0
;__Lib_MathDouble.c,638 :: 		
AddSubFP_aligniter:
;__Lib_MathDouble.c,639 :: 		
0x04A6	0xE90285  	DEC	W5, W5
;__Lib_MathDouble.c,640 :: 		
0x04A8	0x3BFFF9  	BRA NN	AddSubFP_align
;__Lib_MathDouble.c,641 :: 		
AddSubFP_aligned:
;__Lib_MathDouble.c,642 :: 		
0x04AA	0x400406  	ADD	W0, W6, W8
;__Lib_MathDouble.c,643 :: 		
0x04AC	0x488487  	ADDC	W1, W7, W9
;__Lib_MathDouble.c,644 :: 		
0x04AE	0x3B0002  	BRA NN	AddSubFP_normalizesum
;__Lib_MathDouble.c,645 :: 		
0x04B0	0x140460  	SUBR	W8, #0, W8
;__Lib_MathDouble.c,646 :: 		
0x04B2	0x1C84E0  	SUBBR	W9, #0, W9
;__Lib_MathDouble.c,647 :: 		
AddSubFP_normalizesum:
;__Lib_MathDouble.c,648 :: 		
0x04B4	0xA38809  	BTST.Z	W9, #8
;__Lib_MathDouble.c,649 :: 		
0x04B6	0x320007  	BRA Z	AddSubFP_checknormal
;__Lib_MathDouble.c,650 :: 		
0x04B8	0x71818A  	IOR	W3, W10, W3
;__Lib_MathDouble.c,651 :: 		
0x04BA	0x718182  	IOR	W3, W2, W3
;__Lib_MathDouble.c,652 :: 		
0x04BC	0x640161  	AND	W8, #1, W2
;__Lib_MathDouble.c,653 :: 		
0x04BE	0xD10489  	LSR	W9, W9
;__Lib_MathDouble.c,654 :: 		
0x04C0	0xD38408  	RRC	W8, W8
;__Lib_MathDouble.c,655 :: 		
0x04C2	0xE8058B  	INC	W11, W11
;__Lib_MathDouble.c,656 :: 		
0x04C4	0x370017  	BRA	AddSubFP_round
;__Lib_MathDouble.c,657 :: 		
AddSubFP_checknormal:
;__Lib_MathDouble.c,658 :: 		
0x04C6	0xA37809  	BTST.Z	W9, #7
;__Lib_MathDouble.c,659 :: 		
0x04C8	0x3A0013  	BRA NZ	AddSubFP_discardguard
;__Lib_MathDouble.c,660 :: 		
AddSubFP_underflow:
;__Lib_MathDouble.c,661 :: 		
0x04CA	0xE20016  	CP0	W11
;__Lib_MathDouble.c,662 :: 		
0x04CC	0x340013  	BRA LE	AddSubFP_round
;__Lib_MathDouble.c,663 :: 		
0x04CE	0xE9058B  	DEC	W11, W11
;__Lib_MathDouble.c,664 :: 		
0x04D0	0x440408  	ADD	W8, W8, W8
;__Lib_MathDouble.c,665 :: 		
0x04D2	0x4C8489  	ADDC	W9, W9, W9
;__Lib_MathDouble.c,666 :: 		
0x04D4	0x74440A  	IOR.B	W8, W10, W8
;__Lib_MathDouble.c,667 :: 		
0x04D6	0xA37809  	BTST.Z	W9, #7
;__Lib_MathDouble.c,668 :: 		
0x04D8	0x3A000D  	BRA NZ	AddSubFP_round
;__Lib_MathDouble.c,669 :: 		
AddSubFP_normalizeloop:
;__Lib_MathDouble.c,670 :: 		
0x04DA	0xE20016  	CP0	W11
;__Lib_MathDouble.c,671 :: 		
0x04DC	0x340007  	BRA LE	AddSubFP_normalizeexit
;__Lib_MathDouble.c,672 :: 		
0x04DE	0xE9058B  	DEC	W11, W11
;__Lib_MathDouble.c,673 :: 		
0x04E0	0x440408  	ADD	W8, W8, W8
;__Lib_MathDouble.c,674 :: 		
0x04E2	0x4C8489  	ADDC	W9, W9, W9
;__Lib_MathDouble.c,675 :: 		
0x04E4	0x3A0001  	BRA NZ	AddSubFP_normalizetest
;__Lib_MathDouble.c,676 :: 		
0x04E6	0x20000B  	MOV	#0, W11
;__Lib_MathDouble.c,677 :: 		
AddSubFP_normalizetest:
;__Lib_MathDouble.c,678 :: 		
0x04E8	0xA37809  	BTST.Z	W9, #7
;__Lib_MathDouble.c,679 :: 		
0x04EA	0x32FFF7  	BRA Z	AddSubFP_normalizeloop
;__Lib_MathDouble.c,680 :: 		
AddSubFP_normalizeexit:
;__Lib_MathDouble.c,681 :: 		
0x04EC	0xEB0100  	CLR	W2
;__Lib_MathDouble.c,682 :: 		
0x04EE	0x370002  	BRA	AddSubFP_round
;__Lib_MathDouble.c,683 :: 		
AddSubFP_discardguard:
;__Lib_MathDouble.c,684 :: 		
0x04F0	0x718182  	IOR	W3, W2, W3
;__Lib_MathDouble.c,685 :: 		
0x04F2	0x88002A  	MOV	W10, W2
;__Lib_MathDouble.c,686 :: 		
AddSubFP_round:
;__Lib_MathDouble.c,687 :: 		
0x04F4	0x070022  	RCALL	AddSubFP__fpack
;__Lib_MathDouble.c,688 :: 		
AddSubFP_signoff:
;__Lib_MathDouble.c,689 :: 		
0x04F6	0xA7F00C  	BTSC	W12, #15
;__Lib_MathDouble.c,690 :: 		
0x04F8	0xA8E003  	BSET	W1, #15
;__Lib_MathDouble.c,691 :: 		
0x04FA	0x370018  	BRA	AddSubFP__fbopExit
;__Lib_MathDouble.c,692 :: 		
AddSubFP_aisinfinite:
;__Lib_MathDouble.c,693 :: 		
0x04FC	0xE12064  	CP	W4, #4
;__Lib_MathDouble.c,694 :: 		
0x04FE	0x3A0002  	BRA NZ	AddSubFP_return8_3
;__Lib_MathDouble.c,695 :: 		
0x0500	0x6C8F83  	XOR	W9, W3, [W15]
;__Lib_MathDouble.c,696 :: 		
0x0502	0x330018  	BRA N	AddSubFP__fbopReturnNaN
;__Lib_MathDouble.c,697 :: 		
AddSubFP_return8_3:
;__Lib_MathDouble.c,698 :: 		
0x0504	0xBE8108  	MOV.D	W8, W2
;__Lib_MathDouble.c,699 :: 		
AddSubFP_return2_3:
;__Lib_MathDouble.c,700 :: 		
0x0506	0xBE8002  	MOV.D	W2, W0
;__Lib_MathDouble.c,701 :: 		
0x0508	0x370011  	BRA	AddSubFP__fbopExit
;__Lib_MathDouble.c,702 :: 		
AddSubFP__funpack2:
;__Lib_MathDouble.c,703 :: 		
0x050A	0xBE8400  	MOV.D	W0, W8
;__Lib_MathDouble.c,704 :: 		
0x050C	0x07003C  	RCALL	AddSubFP__funpack
;__Lib_MathDouble.c,705 :: 		
0x050E	0xBE8300  	MOV.D	W0, W6
;__Lib_MathDouble.c,706 :: 		
0x0510	0xBE8504  	MOV.D	W4, W10
;__Lib_MathDouble.c,707 :: 		
0x0512	0xBE8002  	MOV.D	W2, W0
;__Lib_MathDouble.c,708 :: 		
0x0514	0x070038  	RCALL	AddSubFP__funpack
;__Lib_MathDouble.c,709 :: 		
0x0516	0x754F84  	IOR.B	W10, W4, [W15]
;__Lib_MathDouble.c,710 :: 		
0x0518	0x060000  	RETURN
;__Lib_MathDouble.c,711 :: 		
AddSubFP__fPropagateNaN:
;__Lib_MathDouble.c,712 :: 		
0x051A	0xBE8002  	MOV.D	W2, W0
;__Lib_MathDouble.c,713 :: 		
0x051C	0xE15064  	CP	W10, #4
;__Lib_MathDouble.c,714 :: 		
0x051E	0x360005  	BRA LEU	AddSubFP_return0_1
;__Lib_MathDouble.c,715 :: 		
0x0520	0xE12064  	CP	W4, #4
;__Lib_MathDouble.c,716 :: 		
0x0522	0x360002  	BRA LEU	AddSubFP_return8_1
;__Lib_MathDouble.c,717 :: 		
0x0524	0xA36809  	BTST.Z	W9, #6
;__Lib_MathDouble.c,718 :: 		
0x0526	0x3A0001  	BRA NZ	AddSubFP_return0_1
;__Lib_MathDouble.c,719 :: 		
AddSubFP_return8_1:
;__Lib_MathDouble.c,720 :: 		
0x0528	0xBE8008  	MOV.D	W8, W0
;__Lib_MathDouble.c,721 :: 		
AddSubFP_return0_1:
;__Lib_MathDouble.c,722 :: 		
0x052A	0xA8C002  	BSET	W1, #6
;__Lib_MathDouble.c,723 :: 		
AddSubFP__fbopExit:
;__Lib_MathDouble.c,724 :: 		
0x052C	0x78064F  	MOV	[--W15], W12
;__Lib_MathDouble.c,725 :: 		
0x052E	0xBE054F  	MOV.D	[--W15], W10
;__Lib_MathDouble.c,726 :: 		
0x0530	0xBE044F  	MOV.D	[--W15], W8
;__Lib_MathDouble.c,727 :: 		
0x0532	0x060000  	RETURN
;__Lib_MathDouble.c,728 :: 		
AddSubFP__fbopReturnNaN:
;__Lib_MathDouble.c,729 :: 		
0x0534	0x2FFFF0  	MOV	#65535, W0
;__Lib_MathDouble.c,730 :: 		
0x0536	0x27FFF1  	MOV	#32767, W1
;__Lib_MathDouble.c,731 :: 		
0x0538	0x37FFF9  	BRA	AddSubFP__fbopExit
;__Lib_MathDouble.c,732 :: 		
AddSubFP__fpack:
;__Lib_MathDouble.c,733 :: 		
0x053A	0x200081  	MOV	#8, W1
;__Lib_MathDouble.c,734 :: 		
0x053C	0x558061  	SUB	W11, #1, W0
;__Lib_MathDouble.c,735 :: 		
0x053E	0x3D000B  	BRA GE	AddSubFP_notsubnormal_1
;__Lib_MathDouble.c,736 :: 		
0x0540	0x20000B  	MOV	#0, W11
;__Lib_MathDouble.c,737 :: 		
0x0542	0x2FFE61  	MOV	#65510, W1
;__Lib_MathDouble.c,738 :: 		
0x0544	0xE10001  	CP	W0, W1
;__Lib_MathDouble.c,739 :: 		
0x0546	0x34001D  	BRA LE	AddSubFP_zerosig
;__Lib_MathDouble.c,740 :: 		
AddSubFP_subnormal_1:
;__Lib_MathDouble.c,741 :: 		
0x0548	0x718182  	IOR	W3, W2, W3
;__Lib_MathDouble.c,742 :: 		
0x054A	0x640161  	AND	W8, #1, W2
;__Lib_MathDouble.c,743 :: 		
0x054C	0xD10489  	LSR	W9, W9
;__Lib_MathDouble.c,744 :: 		
0x054E	0xD38408  	RRC	W8, W8
;__Lib_MathDouble.c,745 :: 		
0x0550	0xE80000  	INC	W0, W0
;__Lib_MathDouble.c,746 :: 		
0x0552	0x3AFFFA  	BRA NZ	AddSubFP_subnormal_1
;__Lib_MathDouble.c,747 :: 		
0x0554	0x200071  	MOV	#7, W1
;__Lib_MathDouble.c,748 :: 		
AddSubFP_notsubnormal_1:
;__Lib_MathDouble.c,749 :: 		
0x0556	0x640061  	AND	W8, #1, W0
;__Lib_MathDouble.c,750 :: 		
0x0558	0x700003  	IOR	W0, W3, W0
;__Lib_MathDouble.c,751 :: 		
0x055A	0x600002  	AND	W0, W2, W0
;__Lib_MathDouble.c,752 :: 		
0x055C	0x320009  	BRA Z	AddSubFP_packupandgo
;__Lib_MathDouble.c,753 :: 		
0x055E	0x440461  	ADD	W8, #1, W8
;__Lib_MathDouble.c,754 :: 		
0x0560	0x4C84E0  	ADDC	W9, #0, W9
;__Lib_MathDouble.c,755 :: 		
0x0562	0xA58809  	BTST.Z	W9, W1
;__Lib_MathDouble.c,756 :: 		
0x0564	0x320005  	BRA Z	AddSubFP_packupandgo
;__Lib_MathDouble.c,757 :: 		
0x0566	0xE8058B  	INC	W11, W11
;__Lib_MathDouble.c,758 :: 		
0x0568	0xE10868  	CP	W1, #8
;__Lib_MathDouble.c,759 :: 		
0x056A	0x3A0002  	BRA NZ	AddSubFP_packupandgo
;__Lib_MathDouble.c,760 :: 		
0x056C	0xD10489  	LSR	W9, W9
;__Lib_MathDouble.c,761 :: 		
0x056E	0xD38408  	RRC	W8, W8
;__Lib_MathDouble.c,762 :: 		
AddSubFP_packupandgo:
;__Lib_MathDouble.c,763 :: 		
0x0570	0x200FF2  	MOV	#255, W2
;__Lib_MathDouble.c,764 :: 		
0x0572	0xE15802  	CP	W11, W2
;__Lib_MathDouble.c,765 :: 		
0x0574	0x3D0005  	BRA GE	AddSubFP_overflow
;__Lib_MathDouble.c,766 :: 		
0x0576	0xDD5DC7  	SL	W11, #7, W11
;__Lib_MathDouble.c,767 :: 		
0x0578	0xB207F9  	AND	#127, W9
;__Lib_MathDouble.c,768 :: 		
0x057A	0x758089  	IOR	W11, W9, W1
;__Lib_MathDouble.c,769 :: 		
0x057C	0x880008  	MOV	W8, W0
;__Lib_MathDouble.c,770 :: 		
0x057E	0x060000  	RETURN
;__Lib_MathDouble.c,771 :: 		
AddSubFP_overflow:
;__Lib_MathDouble.c,772 :: 		
0x0580	0x27F80B  	MOV	#32640, W11
;__Lib_MathDouble.c,773 :: 		
AddSubFP_zerosig:
;__Lib_MathDouble.c,774 :: 		
0x0582	0x88001B  	MOV	W11, W1
;__Lib_MathDouble.c,775 :: 		
0x0584	0x050000  	RETLW	#0, W0
;__Lib_MathDouble.c,776 :: 		
AddSubFP__funpack:
;__Lib_MathDouble.c,777 :: 		
0x0586	0xDE0AC7  	LSR	W1, #7, W5
;__Lib_MathDouble.c,778 :: 		
0x0588	0xB207F1  	AND	#127, W1
;__Lib_MathDouble.c,779 :: 		
0x058A	0xB20FF5  	AND	#255, W5
;__Lib_MathDouble.c,780 :: 		
0x058C	0x320008  	BRA Z	AddSubFP_zeroorsub
;__Lib_MathDouble.c,781 :: 		
0x058E	0x42CFE1  	ADD.B	W5, #1, [W15]
;__Lib_MathDouble.c,782 :: 		
0x0590	0x320002  	BRA Z	AddSubFP_nanorinf
;__Lib_MathDouble.c,783 :: 		
AddSubFP_finitereturn:
;__Lib_MathDouble.c,784 :: 		
0x0592	0xA8E002  	BSET	W1, #7
;__Lib_MathDouble.c,785 :: 		
0x0594	0x050024  	RETLW	#2, W4
;__Lib_MathDouble.c,786 :: 		
AddSubFP_nanorinf:
;__Lib_MathDouble.c,787 :: 		
0x0596	0x700F81  	IOR	W0, W1, [W15]
;__Lib_MathDouble.c,788 :: 		
0x0598	0x320001  	BRA Z	AddSubFP_infinite
;__Lib_MathDouble.c,789 :: 		
0x059A	0x050804  	RETLW	#128, W4
;__Lib_MathDouble.c,790 :: 		
AddSubFP_infinite:
;__Lib_MathDouble.c,791 :: 		
0x059C	0x050044  	RETLW	#4, W4
;__Lib_MathDouble.c,792 :: 		
AddSubFP_zeroorsub:
;__Lib_MathDouble.c,793 :: 		
0x059E	0x700F81  	IOR	W0, W1, [W15]
;__Lib_MathDouble.c,794 :: 		
0x05A0	0x3A0002  	BRA NZ	AddSubFP_subnormal_2
;__Lib_MathDouble.c,795 :: 		
0x05A2	0x050014  	RETLW	#1, W4
;__Lib_MathDouble.c,796 :: 		
AddSubFP_normalize:
;__Lib_MathDouble.c,797 :: 		
0x05A4	0xE90285  	DEC	W5, W5
;__Lib_MathDouble.c,798 :: 		
AddSubFP_subnormal_2:
;__Lib_MathDouble.c,799 :: 		
0x05A6	0x400000  	ADD	W0, W0, W0
;__Lib_MathDouble.c,800 :: 		
0x05A8	0x48C081  	ADDC.B	W1, W1, W1
;__Lib_MathDouble.c,801 :: 		
0x05AA	0x3BFFFC  	BRA NN	AddSubFP_normalize
;__Lib_MathDouble.c,802 :: 		
0x05AC	0xA8E002  	BSET	W1, #7
;__Lib_MathDouble.c,803 :: 		
0x05AE	0x050024  	RETLW	#2, W4
;__Lib_MathDouble.c,806 :: 		
the_end__AddSub_FP:
;__Lib_MathDouble.c,809 :: 		
L_end__AddSub_FP:
0x05B0	0xFA8000  	ULNK
0x05B2	0x060000  	RETURN
; end of __AddSub_FP
__Long2Float:
0x0720	0xFA0000  	LNK	#0
;__Lib_MathDouble.c,104 :: 		
;__Lib_MathDouble.c,106 :: 		
0x0722	0x070002  	RCALL	LL_intro_Long2Float
;__Lib_MathDouble.c,107 :: 		
0x0724	0x0000000407D2  	GOTO	the_end__Long2Float
;__Lib_MathDouble.c,109 :: 		
LL_intro_Long2Float:
;__Lib_MathDouble.c,110 :: 		
0x0728	0xE20004  	CP0	W2
;__Lib_MathDouble.c,111 :: 		
0x072A	0x3A0006  	BRA NZ	Longint2Float__floatsisf
;__Lib_MathDouble.c,113 :: 		
Longword2Float__floatuisf:
;__Lib_MathDouble.c,114 :: 		
0x072C	0xEB0500  	CLR	W10
;__Lib_MathDouble.c,115 :: 		
0x072E	0xE20002  	CP0	W1
;__Lib_MathDouble.c,116 :: 		
0x0730	0x3E000F  	BRA GTU	Long2Float_notspecial
;__Lib_MathDouble.c,117 :: 		
0x0732	0xE20000  	CP0	W0
;__Lib_MathDouble.c,118 :: 		
0x0734	0x320027  	BRA Z	Long2Float_return0
;__Lib_MathDouble.c,119 :: 		
0x0736	0x37000C  	BRA	Long2Float_notspecial
;__Lib_MathDouble.c,121 :: 		
Longint2Float__floatsisf:
;__Lib_MathDouble.c,122 :: 		
0x0738	0x8800A1  	MOV	W1, W10
;__Lib_MathDouble.c,123 :: 		
0x073A	0xE20002  	CP0	W1
;__Lib_MathDouble.c,124 :: 		
0x073C	0x350004  	BRA LT	Longint2Float_negative
;__Lib_MathDouble.c,125 :: 		
0x073E	0x3C0008  	BRA GT	Long2Float_notspecial
;__Lib_MathDouble.c,126 :: 		
0x0740	0xE20000  	CP0	W0
;__Lib_MathDouble.c,127 :: 		
0x0742	0x320020  	BRA Z	Long2Float_return0
;__Lib_MathDouble.c,128 :: 		
0x0744	0x370005  	BRA	Long2Float_notspecial
;__Lib_MathDouble.c,129 :: 		
Longint2Float_negative:
;__Lib_MathDouble.c,130 :: 		
0x0746	0x100060  	SUBR	W0, #0, W0
;__Lib_MathDouble.c,131 :: 		
0x0748	0x1880E0  	SUBBR	W1, #0, W1
;__Lib_MathDouble.c,132 :: 		
0x074A	0x3B0002  	BRA NN	Long2Float_notspecial
;__Lib_MathDouble.c,133 :: 		
0x074C	0x2CF001  	MOV	#52992, W1
;__Lib_MathDouble.c,134 :: 		
0x074E	0x37001A  	BRA	Long2Float_return0
;__Lib_MathDouble.c,136 :: 		
Long2Float_notspecial:
;__Lib_MathDouble.c,137 :: 		
0x0750	0xBE8400  	MOV.D	W0, W8
;__Lib_MathDouble.c,138 :: 		
0x0752	0xB81160  	MUL.UU	W2, #0, W2
;__Lib_MathDouble.c,139 :: 		
0x0754	0x20096B  	MOV	#150, W11
;__Lib_MathDouble.c,140 :: 		
0x0756	0xCF8209  	FF1L	W9, W4
;__Lib_MathDouble.c,141 :: 		
0x0758	0x390002  	BRA NC	Long2Float_fixshift
;__Lib_MathDouble.c,142 :: 		
0x075A	0xCF8208  	FF1L	W8, W4
;__Lib_MathDouble.c,143 :: 		
0x075C	0xB04104  	ADD.B	#16, W4
;__Lib_MathDouble.c,144 :: 		
Long2Float_fixshift:
;__Lib_MathDouble.c,145 :: 		
0x075E	0x524269  	SUB.B	W4, #9, W4
;__Lib_MathDouble.c,146 :: 		
0x0760	0x32000E  	BRA Z	Long2Float_round
;__Lib_MathDouble.c,147 :: 		
0x0762	0x3B0008  	BRA NN	Long2Float_shiftleft
;__Lib_MathDouble.c,148 :: 		
Long2Float_shiftright:
;__Lib_MathDouble.c,149 :: 		
0x0764	0x718182  	IOR	W3, W2, W3
;__Lib_MathDouble.c,150 :: 		
0x0766	0x640161  	AND	W8, #1, W2
;__Lib_MathDouble.c,151 :: 		
0x0768	0xD10489  	LSR	W9, W9
;__Lib_MathDouble.c,152 :: 		
0x076A	0xD38408  	RRC	W8, W8
;__Lib_MathDouble.c,153 :: 		
0x076C	0xE8058B  	INC	W11, W11
;__Lib_MathDouble.c,154 :: 		
0x076E	0xE84204  	INC.B	W4, W4
;__Lib_MathDouble.c,155 :: 		
0x0770	0x3AFFF9  	BRA NZ	Long2Float_shiftright
;__Lib_MathDouble.c,156 :: 		
0x0772	0x370005  	BRA	Long2Float_round
;__Lib_MathDouble.c,157 :: 		
Long2Float_shiftleft:
;__Lib_MathDouble.c,158 :: 		
0x0774	0x440408  	ADD	W8, W8, W8
;__Lib_MathDouble.c,159 :: 		
0x0776	0x4C8489  	ADDC	W9, W9, W9
;__Lib_MathDouble.c,160 :: 		
0x0778	0xE9058B  	DEC	W11, W11
;__Lib_MathDouble.c,161 :: 		
0x077A	0xE94204  	DEC.B	W4, W4
;__Lib_MathDouble.c,162 :: 		
0x077C	0x3AFFFB  	BRA NZ	Long2Float_shiftleft
;__Lib_MathDouble.c,163 :: 		
Long2Float_round:
;__Lib_MathDouble.c,164 :: 		
0x077E	0x070003  	RCALL	Long2Float__fpack
;__Lib_MathDouble.c,165 :: 		
0x0780	0xA7F00A  	BTSC	W10, #15
;__Lib_MathDouble.c,166 :: 		
0x0782	0xA8E003  	BSET	W1, #15
;__Lib_MathDouble.c,167 :: 		
Long2Float_return0:
;__Lib_MathDouble.c,168 :: 		
0x0784	0x060000  	RETURN
;__Lib_MathDouble.c,169 :: 		
Long2Float__fpack:
;__Lib_MathDouble.c,170 :: 		
0x0786	0x200081  	MOV	#8, W1
;__Lib_MathDouble.c,171 :: 		
0x0788	0x558061  	SUB	W11, #1, W0
;__Lib_MathDouble.c,172 :: 		
0x078A	0x3D000B  	BRA GE	Long2Float_notsubnormal
;__Lib_MathDouble.c,173 :: 		
0x078C	0x20000B  	MOV	#0, W11
;__Lib_MathDouble.c,174 :: 		
0x078E	0x2FFE61  	MOV	#65510, W1
;__Lib_MathDouble.c,175 :: 		
0x0790	0xE10001  	CP	W0, W1
;__Lib_MathDouble.c,176 :: 		
0x0792	0x34001D  	BRA LE	Long2Float_zerosig
;__Lib_MathDouble.c,177 :: 		
Long2Float_subnormal:
;__Lib_MathDouble.c,178 :: 		
0x0794	0x718182  	IOR	W3, W2, W3
;__Lib_MathDouble.c,179 :: 		
0x0796	0x640161  	AND	W8, #1, W2
;__Lib_MathDouble.c,180 :: 		
0x0798	0xD10489  	LSR	W9, W9
;__Lib_MathDouble.c,181 :: 		
0x079A	0xD38408  	RRC	W8, W8
;__Lib_MathDouble.c,182 :: 		
0x079C	0xE80000  	INC	W0, W0
;__Lib_MathDouble.c,183 :: 		
0x079E	0x3AFFFA  	BRA NZ	Long2Float_subnormal
;__Lib_MathDouble.c,184 :: 		
0x07A0	0x200071  	MOV	#7, W1
;__Lib_MathDouble.c,185 :: 		
Long2Float_notsubnormal:
;__Lib_MathDouble.c,186 :: 		
0x07A2	0x640061  	AND	W8, #1, W0
;__Lib_MathDouble.c,187 :: 		
0x07A4	0x700003  	IOR	W0, W3, W0
;__Lib_MathDouble.c,188 :: 		
0x07A6	0x600002  	AND	W0, W2, W0
;__Lib_MathDouble.c,189 :: 		
0x07A8	0x320009  	BRA Z	Long2Float_packupandgo
;__Lib_MathDouble.c,190 :: 		
0x07AA	0x440461  	ADD	W8, #1, W8
;__Lib_MathDouble.c,191 :: 		
0x07AC	0x4C84E0  	ADDC	W9, #0, W9
;__Lib_MathDouble.c,192 :: 		
0x07AE	0xA58809  	BTST.Z	W9, W1
;__Lib_MathDouble.c,193 :: 		
0x07B0	0x320005  	BRA Z	Long2Float_packupandgo
;__Lib_MathDouble.c,194 :: 		
0x07B2	0xE8058B  	INC	W11, W11
;__Lib_MathDouble.c,195 :: 		
0x07B4	0xE10868  	CP	W1, #8
;__Lib_MathDouble.c,196 :: 		
0x07B6	0x3A0002  	BRA NZ	Long2Float_packupandgo
;__Lib_MathDouble.c,197 :: 		
0x07B8	0xD10489  	LSR	W9, W9
;__Lib_MathDouble.c,198 :: 		
0x07BA	0xD38408  	RRC	W8, W8
;__Lib_MathDouble.c,199 :: 		
Long2Float_packupandgo:
;__Lib_MathDouble.c,200 :: 		
0x07BC	0x200FF2  	MOV	#255, W2
;__Lib_MathDouble.c,201 :: 		
0x07BE	0xE15802  	CP	W11, W2
;__Lib_MathDouble.c,202 :: 		
0x07C0	0x3D0005  	BRA GE	Long2Float_overflow
;__Lib_MathDouble.c,203 :: 		
0x07C2	0xDD5DC7  	SL	W11, #7, W11
;__Lib_MathDouble.c,204 :: 		
0x07C4	0xB207F9  	AND	#127, W9
;__Lib_MathDouble.c,205 :: 		
0x07C6	0x758089  	IOR	W11, W9, W1
;__Lib_MathDouble.c,206 :: 		
0x07C8	0x880008  	MOV	W8, W0
;__Lib_MathDouble.c,207 :: 		
0x07CA	0x060000  	RETURN
;__Lib_MathDouble.c,208 :: 		
Long2Float_overflow:
;__Lib_MathDouble.c,209 :: 		
0x07CC	0x27F80B  	MOV	#32640, W11
;__Lib_MathDouble.c,210 :: 		
Long2Float_zerosig:
;__Lib_MathDouble.c,211 :: 		
0x07CE	0x88001B  	MOV	W11, W1
;__Lib_MathDouble.c,212 :: 		
0x07D0	0x050000  	RETLW	#0, W0
;__Lib_MathDouble.c,215 :: 		
the_end__Long2Float:
;__Lib_MathDouble.c,218 :: 		
L_end__Long2Float:
0x07D2	0xFA8000  	ULNK
0x07D4	0x060000  	RETURN
; end of __Long2Float
__Mul_FP:
0x0606	0xFA0000  	LNK	#0
;__Lib_MathDouble.c,855 :: 		
;__Lib_MathDouble.c,857 :: 		
0x0608	0x070002  	RCALL	MulFP___mulsf3
;__Lib_MathDouble.c,858 :: 		
0x060A	0x00000004071C  	GOTO	the_end__Mul_FP
;__Lib_MathDouble.c,861 :: 		
MulFP___mulsf3:
;__Lib_MathDouble.c,862 :: 		
0x060E	0xBE9F88  	MOV.D	W8, [W15++]
;__Lib_MathDouble.c,863 :: 		
0x0610	0xBE9F8A  	MOV.D	W10, [W15++]
;__Lib_MathDouble.c,864 :: 		
0x0612	0x781F8C  	MOV	W12, [W15++]
;__Lib_MathDouble.c,865 :: 		
0x0614	0x070030  	RCALL	MulFP__funpack2
;__Lib_MathDouble.c,866 :: 		
0x0616	0x330037  	BRA N	MulFP__fPropagateNaN
;__Lib_MathDouble.c,867 :: 		
0x0618	0x6C8603  	XOR	W9, W3, W12
;__Lib_MathDouble.c,868 :: 		
0x061A	0xE15064  	CP	W10, #4
;__Lib_MathDouble.c,869 :: 		
0x061C	0x320024  	BRA Z	MulFP_aisinfinite
;__Lib_MathDouble.c,870 :: 		
0x061E	0xE12064  	CP	W4, #4
;__Lib_MathDouble.c,871 :: 		
0x0620	0x320027  	BRA Z	MulFP_bisinfinite
;__Lib_MathDouble.c,872 :: 		
0x0622	0xE15061  	CP	W10, #1
;__Lib_MathDouble.c,873 :: 		
0x0624	0x320022  	BRA Z	MulFP_return8_1
;__Lib_MathDouble.c,874 :: 		
0x0626	0xE12061  	CP	W4, #1
;__Lib_MathDouble.c,875 :: 		
0x0628	0x320021  	BRA Z	MulFP_return2_1
;__Lib_MathDouble.c,876 :: 		
0x062A	0x42858B  	ADD	W5, W11, W11
;__Lib_MathDouble.c,877 :: 		
0x062C	0xB107EB  	SUB	#126, W11
;__Lib_MathDouble.c,878 :: 		
0x062E	0xB83401  	MUL.UU	W6, W1, W8
;__Lib_MathDouble.c,879 :: 		
0x0630	0xB83A00  	MUL.UU	W7, W0, W4
;__Lib_MathDouble.c,880 :: 		
0x0632	0x420408  	ADD	W4, W8, W8
;__Lib_MathDouble.c,881 :: 		
0x0634	0x4A8489  	ADDC	W5, W9, W9
;__Lib_MathDouble.c,882 :: 		
0x0636	0xB83A01  	MUL.UU	W7, W1, W4
;__Lib_MathDouble.c,883 :: 		
0x0638	0xB83000  	MUL.UU	W6, W0, W0
;__Lib_MathDouble.c,884 :: 		
0x063A	0x408088  	ADD	W1, W8, W1
;__Lib_MathDouble.c,885 :: 		
0x063C	0x4A0109  	ADDC	W4, W9, W2
;__Lib_MathDouble.c,886 :: 		
0x063E	0x330004  	BRA N	MulFP_formsticky
;__Lib_MathDouble.c,887 :: 		
0x0640	0x400000  	ADD	W0, W0, W0
;__Lib_MathDouble.c,888 :: 		
0x0642	0x488081  	ADDC	W1, W1, W1
;__Lib_MathDouble.c,889 :: 		
0x0644	0x490102  	ADDC	W2, W2, W2
;__Lib_MathDouble.c,890 :: 		
0x0646	0xE9058B  	DEC	W11, W11
;__Lib_MathDouble.c,891 :: 		
MulFP_formsticky:
;__Lib_MathDouble.c,892 :: 		
0x0648	0xDD09C9  	SL	W1, #9, W3
;__Lib_MathDouble.c,893 :: 		
0x064A	0x700183  	IOR	W0, W3, W3
;__Lib_MathDouble.c,894 :: 		
0x064C	0x320001  	BRA Z	MulFP_formRandSig
;__Lib_MathDouble.c,895 :: 		
0x064E	0x200013  	MOV	#1, W3
;__Lib_MathDouble.c,896 :: 		
MulFP_formRandSig:
;__Lib_MathDouble.c,897 :: 		
0x0650	0xDE14C8  	LSR	W2, #8, W9
;__Lib_MathDouble.c,898 :: 		
0x0652	0xDD1448  	SL	W2, #8, W8
;__Lib_MathDouble.c,899 :: 		
0x0654	0xDE0947  	LSR	W1, #7, W2
;__Lib_MathDouble.c,900 :: 		
0x0656	0xB20012  	AND	#1, W2
;__Lib_MathDouble.c,901 :: 		
0x0658	0xDE08C8  	LSR	W1, #8, W1
;__Lib_MathDouble.c,902 :: 		
0x065A	0x708408  	IOR	W1, W8, W8
;__Lib_MathDouble.c,903 :: 		
0x065C	0x070024  	RCALL	MulFP__fpack
;__Lib_MathDouble.c,904 :: 		
MulFP_return0_1:
;__Lib_MathDouble.c,905 :: 		
0x065E	0xA1F001  	BCLR	W1, #15
;__Lib_MathDouble.c,906 :: 		
0x0660	0xA7F00C  	BTSC	W12, #15
;__Lib_MathDouble.c,907 :: 		
0x0662	0xA8E003  	BSET	W1, #15
;__Lib_MathDouble.c,908 :: 		
0x0664	0x370019  	BRA	MulFP__fbopExit
;__Lib_MathDouble.c,909 :: 		
MulFP_aisinfinite:
;__Lib_MathDouble.c,910 :: 		
0x0666	0xE12061  	CP	W4, #1
;__Lib_MathDouble.c,911 :: 		
0x0668	0x32001B  	BRA Z	MulFP__fbopReturnNaN
;__Lib_MathDouble.c,912 :: 		
MulFP_return8_1:
;__Lib_MathDouble.c,913 :: 		
0x066A	0xBE8108  	MOV.D	W8, W2
;__Lib_MathDouble.c,914 :: 		
MulFP_return2_1:
;__Lib_MathDouble.c,915 :: 		
0x066C	0xBE8002  	MOV.D	W2, W0
;__Lib_MathDouble.c,916 :: 		
0x066E	0x37FFF7  	BRA	MulFP_return0_1
;__Lib_MathDouble.c,917 :: 		
MulFP_bisinfinite:
;__Lib_MathDouble.c,918 :: 		
0x0670	0xE15061  	CP	W10, #1
;__Lib_MathDouble.c,919 :: 		
0x0672	0x3AFFFC  	BRA NZ	MulFP_return2_1
;__Lib_MathDouble.c,920 :: 		
0x0674	0x370015  	BRA	MulFP__fbopReturnNaN
;__Lib_MathDouble.c,921 :: 		
MulFP__funpack2:
;__Lib_MathDouble.c,922 :: 		
0x0676	0xBE8400  	MOV.D	W0, W8
;__Lib_MathDouble.c,923 :: 		
0x0678	0x07003C  	RCALL	MulFP__funpack
;__Lib_MathDouble.c,924 :: 		
0x067A	0xBE8300  	MOV.D	W0, W6
;__Lib_MathDouble.c,925 :: 		
0x067C	0xBE8504  	MOV.D	W4, W10
;__Lib_MathDouble.c,926 :: 		
0x067E	0xBE8002  	MOV.D	W2, W0
;__Lib_MathDouble.c,927 :: 		
0x0680	0x070038  	RCALL	MulFP__funpack
;__Lib_MathDouble.c,928 :: 		
0x0682	0x754F84  	IOR.B	W10, W4, [W15]
;__Lib_MathDouble.c,929 :: 		
0x0684	0x060000  	RETURN
;__Lib_MathDouble.c,930 :: 		
MulFP__fPropagateNaN:
;__Lib_MathDouble.c,931 :: 		
0x0686	0xBE8002  	MOV.D	W2, W0
;__Lib_MathDouble.c,932 :: 		
0x0688	0xE15064  	CP	W10, #4
;__Lib_MathDouble.c,933 :: 		
0x068A	0x360005  	BRA LEU	MulFP_return0_2
;__Lib_MathDouble.c,934 :: 		
0x068C	0xE12064  	CP	W4, #4
;__Lib_MathDouble.c,935 :: 		
0x068E	0x360002  	BRA LEU	MulFP_return8_2
;__Lib_MathDouble.c,936 :: 		
0x0690	0xA36809  	BTST.Z	W9, #6
;__Lib_MathDouble.c,937 :: 		
0x0692	0x3A0001  	BRA NZ	MulFP_return0_2
;__Lib_MathDouble.c,938 :: 		
MulFP_return8_2:
;__Lib_MathDouble.c,939 :: 		
0x0694	0xBE8008  	MOV.D	W8, W0
;__Lib_MathDouble.c,940 :: 		
MulFP_return0_2:
;__Lib_MathDouble.c,941 :: 		
0x0696	0xA8C002  	BSET	W1, #6
;__Lib_MathDouble.c,942 :: 		
MulFP__fbopExit:
;__Lib_MathDouble.c,943 :: 		
0x0698	0x78064F  	MOV	[--W15], W12
;__Lib_MathDouble.c,944 :: 		
0x069A	0xBE054F  	MOV.D	[--W15], W10
;__Lib_MathDouble.c,945 :: 		
0x069C	0xBE044F  	MOV.D	[--W15], W8
;__Lib_MathDouble.c,946 :: 		
0x069E	0x060000  	RETURN
;__Lib_MathDouble.c,947 :: 		
MulFP__fbopReturnNaN:
;__Lib_MathDouble.c,948 :: 		
0x06A0	0x2FFFF0  	MOV	#65535, W0
;__Lib_MathDouble.c,949 :: 		
0x06A2	0x27FFF1  	MOV	#32767, W1
;__Lib_MathDouble.c,950 :: 		
0x06A4	0x37FFF9  	BRA	MulFP__fbopExit
;__Lib_MathDouble.c,951 :: 		
MulFP__fpack:
;__Lib_MathDouble.c,952 :: 		
0x06A6	0x200081  	MOV	#8, W1
;__Lib_MathDouble.c,953 :: 		
0x06A8	0x558061  	SUB	W11, #1, W0
;__Lib_MathDouble.c,954 :: 		
0x06AA	0x3D000B  	BRA GE	MulFP_notsubnormal
;__Lib_MathDouble.c,955 :: 		
0x06AC	0x20000B  	MOV	#0, W11
;__Lib_MathDouble.c,956 :: 		
0x06AE	0x2FFE61  	MOV	#65510, W1
;__Lib_MathDouble.c,957 :: 		
0x06B0	0xE10001  	CP	W0, W1
;__Lib_MathDouble.c,958 :: 		
0x06B2	0x34001D  	BRA LE	MulFP_zerosig
;__Lib_MathDouble.c,959 :: 		
MulFP_subnormal1:
;__Lib_MathDouble.c,960 :: 		
0x06B4	0x718182  	IOR	W3, W2, W3
;__Lib_MathDouble.c,961 :: 		
0x06B6	0x640161  	AND	W8, #1, W2
;__Lib_MathDouble.c,962 :: 		
0x06B8	0xD10489  	LSR	W9, W9
;__Lib_MathDouble.c,963 :: 		
0x06BA	0xD38408  	RRC	W8, W8
;__Lib_MathDouble.c,964 :: 		
0x06BC	0xE80000  	INC	W0, W0
;__Lib_MathDouble.c,965 :: 		
0x06BE	0x3AFFFA  	BRA NZ	MulFP_subnormal1
;__Lib_MathDouble.c,966 :: 		
0x06C0	0x200071  	MOV	#7, W1
;__Lib_MathDouble.c,967 :: 		
MulFP_notsubnormal:
;__Lib_MathDouble.c,968 :: 		
0x06C2	0x640061  	AND	W8, #1, W0
;__Lib_MathDouble.c,969 :: 		
0x06C4	0x700003  	IOR	W0, W3, W0
;__Lib_MathDouble.c,970 :: 		
0x06C6	0x600002  	AND	W0, W2, W0
;__Lib_MathDouble.c,971 :: 		
0x06C8	0x320009  	BRA Z	MulFP_packupandgo
;__Lib_MathDouble.c,972 :: 		
0x06CA	0x440461  	ADD	W8, #1, W8
;__Lib_MathDouble.c,973 :: 		
0x06CC	0x4C84E0  	ADDC	W9, #0, W9
;__Lib_MathDouble.c,974 :: 		
0x06CE	0xA58809  	BTST.Z	W9, W1
;__Lib_MathDouble.c,975 :: 		
0x06D0	0x320005  	BRA Z	MulFP_packupandgo
;__Lib_MathDouble.c,976 :: 		
0x06D2	0xE8058B  	INC	W11, W11
;__Lib_MathDouble.c,977 :: 		
0x06D4	0xE10868  	CP	W1, #8
;__Lib_MathDouble.c,978 :: 		
0x06D6	0x3A0002  	BRA NZ	MulFP_packupandgo
;__Lib_MathDouble.c,979 :: 		
0x06D8	0xD10489  	LSR	W9, W9
;__Lib_MathDouble.c,980 :: 		
0x06DA	0xD38408  	RRC	W8, W8
;__Lib_MathDouble.c,981 :: 		
MulFP_packupandgo:
;__Lib_MathDouble.c,982 :: 		
0x06DC	0x200FF2  	MOV	#255, W2
;__Lib_MathDouble.c,983 :: 		
0x06DE	0xE15802  	CP	W11, W2
;__Lib_MathDouble.c,984 :: 		
0x06E0	0x3D0005  	BRA GE	MulFP_overflow
;__Lib_MathDouble.c,985 :: 		
0x06E2	0xDD5DC7  	SL	W11, #7, W11
;__Lib_MathDouble.c,986 :: 		
0x06E4	0xB207F9  	AND	#127, W9
;__Lib_MathDouble.c,987 :: 		
0x06E6	0x758089  	IOR	W11, W9, W1
;__Lib_MathDouble.c,988 :: 		
0x06E8	0x880008  	MOV	W8, W0
;__Lib_MathDouble.c,989 :: 		
0x06EA	0x060000  	RETURN
;__Lib_MathDouble.c,990 :: 		
MulFP_overflow:
;__Lib_MathDouble.c,991 :: 		
0x06EC	0x27F80B  	MOV	#32640, W11
;__Lib_MathDouble.c,992 :: 		
MulFP_zerosig:
;__Lib_MathDouble.c,993 :: 		
0x06EE	0x88001B  	MOV	W11, W1
;__Lib_MathDouble.c,994 :: 		
0x06F0	0x050000  	RETLW	#0, W0
;__Lib_MathDouble.c,995 :: 		
MulFP__funpack:
;__Lib_MathDouble.c,996 :: 		
0x06F2	0xDE0AC7  	LSR	W1, #7, W5
;__Lib_MathDouble.c,997 :: 		
0x06F4	0xB207F1  	AND	#127, W1
;__Lib_MathDouble.c,998 :: 		
0x06F6	0xB20FF5  	AND	#255, W5
;__Lib_MathDouble.c,999 :: 		
0x06F8	0x320008  	BRA Z	MulFP_zeroorsub
;__Lib_MathDouble.c,1000 :: 		
0x06FA	0x42CFE1  	ADD.B	W5, #1, [W15]
;__Lib_MathDouble.c,1001 :: 		
0x06FC	0x320002  	BRA Z	MulFP_nanorinf
;__Lib_MathDouble.c,1002 :: 		
MulFP_finitereturn:
;__Lib_MathDouble.c,1003 :: 		
0x06FE	0xA8E002  	BSET	W1, #7
;__Lib_MathDouble.c,1004 :: 		
0x0700	0x050024  	RETLW	#2, W4
;__Lib_MathDouble.c,1005 :: 		
MulFP_nanorinf:
;__Lib_MathDouble.c,1006 :: 		
0x0702	0x700F81  	IOR	W0, W1, [W15]
;__Lib_MathDouble.c,1007 :: 		
0x0704	0x320001  	BRA Z	MulFP_infinite
;__Lib_MathDouble.c,1008 :: 		
0x0706	0x050804  	RETLW	#128, W4
;__Lib_MathDouble.c,1009 :: 		
MulFP_infinite:
;__Lib_MathDouble.c,1010 :: 		
0x0708	0x050044  	RETLW	#4, W4
;__Lib_MathDouble.c,1011 :: 		
MulFP_zeroorsub:
;__Lib_MathDouble.c,1012 :: 		
0x070A	0x700F81  	IOR	W0, W1, [W15]
;__Lib_MathDouble.c,1013 :: 		
0x070C	0x3A0002  	BRA NZ	MulFP_subnormal2
;__Lib_MathDouble.c,1014 :: 		
0x070E	0x050014  	RETLW	#1, W4
;__Lib_MathDouble.c,1015 :: 		
MulFP_normalize:
;__Lib_MathDouble.c,1016 :: 		
0x0710	0xE90285  	DEC	W5, W5
;__Lib_MathDouble.c,1017 :: 		
MulFP_subnormal2:
;__Lib_MathDouble.c,1018 :: 		
0x0712	0x400000  	ADD	W0, W0, W0
;__Lib_MathDouble.c,1019 :: 		
0x0714	0x48C081  	ADDC.B	W1, W1, W1
;__Lib_MathDouble.c,1020 :: 		
0x0716	0x3BFFFC  	BRA NN	MulFP_normalize
;__Lib_MathDouble.c,1021 :: 		
0x0718	0xA8E002  	BSET	W1, #7
;__Lib_MathDouble.c,1022 :: 		
0x071A	0x050024  	RETLW	#2, W4
;__Lib_MathDouble.c,1025 :: 		
the_end__Mul_FP:
;__Lib_MathDouble.c,1028 :: 		
L_end__Mul_FP:
0x071C	0xFA8000  	ULNK
0x071E	0x060000  	RETURN
; end of __Mul_FP
_Vector_Max:
0x09D8	0xFA0000  	LNK	#0
;__Lib_Vectors.c,343 :: 		
;__Lib_Vectors.c,346 :: 		
0x09DA	0x97B92E  	MOV	[W14-12], W2
;__Lib_Vectors.c,347 :: 		
0x09DC	0x97B83E  	MOV	[W14-10], W0
;__Lib_Vectors.c,348 :: 		
0x09DE	0x97B8CE  	MOV	[W14-8], W1
;__Lib_Vectors.c,352 :: 		
0x09E0	0x7802B1  	MOV	[W1++], W5
;__Lib_Vectors.c,353 :: 		
0x09E2	0xEB0900  	CLR	[W2]
;__Lib_Vectors.c,354 :: 		
0x09E4	0xE90200  	DEC	W0, W4
;__Lib_Vectors.c,355 :: 		
0x09E6	0x340007  	BRA LE	_VCT_L23
;__Lib_Vectors.c,356 :: 		
_VCT_L20:
;__Lib_Vectors.c,357 :: 		
0x09E8	0x7801B1  	MOV	[W1++], W3
;__Lib_Vectors.c,358 :: 		
0x09EA	0xE12803  	CP	W5, W3
;__Lib_Vectors.c,359 :: 		
0x09EC	0x3C0002  	BRA GT	_VCT_L22
;__Lib_Vectors.c,360 :: 		
_VCT_L21:
;__Lib_Vectors.c,361 :: 		
0x09EE	0x880053  	MOV	W3, W5
;__Lib_Vectors.c,362 :: 		
0x09F0	0x500904  	SUB	W0, W4, [W2]
;__Lib_Vectors.c,363 :: 		
_VCT_L22:
;__Lib_Vectors.c,364 :: 		
0x09F2	0xE90204  	DEC	W4, W4
;__Lib_Vectors.c,365 :: 		
0x09F4	0x3CFFF9  	BRA GT	_VCT_L20
;__Lib_Vectors.c,366 :: 		
_VCT_L23:
;__Lib_Vectors.c,368 :: 		
0x09F6	0x880005  	MOV	W5, W0
;__Lib_Vectors.c,370 :: 		
L_end_Vector_Max:
0x09F8	0xFA8000  	ULNK
0x09FA	0x060000  	RETURN
; end of _Vector_Max
_Vector_Min:
0x0932	0xFA0000  	LNK	#0
;__Lib_Vectors.c,393 :: 		
;__Lib_Vectors.c,396 :: 		
0x0934	0x97B92E  	MOV	[W14-12], W2
;__Lib_Vectors.c,397 :: 		
0x0936	0x97B83E  	MOV	[W14-10], W0
;__Lib_Vectors.c,398 :: 		
0x0938	0x97B8CE  	MOV	[W14-8], W1
;__Lib_Vectors.c,402 :: 		
0x093A	0x7802B1  	MOV	[W1++], W5
;__Lib_Vectors.c,403 :: 		
0x093C	0xEB0900  	CLR	[W2]
;__Lib_Vectors.c,404 :: 		
0x093E	0xE90200  	DEC	W0, W4
;__Lib_Vectors.c,405 :: 		
0x0940	0x340007  	BRA LE	_VCT_L27
;__Lib_Vectors.c,406 :: 		
_VCT_L24:
;__Lib_Vectors.c,407 :: 		
0x0942	0x7801B1  	MOV	[W1++], W3
;__Lib_Vectors.c,408 :: 		
0x0944	0xE12803  	CP	W5, W3
;__Lib_Vectors.c,409 :: 		
0x0946	0x350002  	BRA LT	_VCT_L26
;__Lib_Vectors.c,410 :: 		
_VCT_L25:
;__Lib_Vectors.c,411 :: 		
0x0948	0x880053  	MOV	W3, W5
;__Lib_Vectors.c,412 :: 		
0x094A	0x500904  	SUB	W0, W4, [W2]
;__Lib_Vectors.c,413 :: 		
_VCT_L26:
;__Lib_Vectors.c,414 :: 		
0x094C	0xE90204  	DEC	W4, W4
;__Lib_Vectors.c,415 :: 		
0x094E	0x3CFFF9  	BRA GT	_VCT_L24
;__Lib_Vectors.c,416 :: 		
_VCT_L27:
;__Lib_Vectors.c,418 :: 		
0x0950	0x880005  	MOV	W5, W0
;__Lib_Vectors.c,420 :: 		
L_end_Vector_Min:
0x0952	0xFA8000  	ULNK
0x0954	0x060000  	RETURN
; end of _Vector_Min
__Sub_FP:
0x09CE	0xFA0000  	LNK	#0
;__Lib_MathDouble.c,830 :: 		
;__Lib_MathDouble.c,831 :: 		
0x09D0	0xAAE007  	BTG	W3, #15
;__Lib_MathDouble.c,832 :: 		
0x09D2	0x07FD3A  	RCALL	__AddSub_FP
;__Lib_MathDouble.c,833 :: 		
L_end__Sub_FP:
0x09D4	0xFA8000  	ULNK
0x09D6	0x060000  	RETURN
; end of __Sub_FP
__Float2Longint:
0x0956	0xFA0000  	LNK	#0
;__Lib_MathDouble.c,479 :: 		
;__Lib_MathDouble.c,481 :: 		
0x0958	0x070002  	RCALL	Float2Longint__fixsfsi
;__Lib_MathDouble.c,482 :: 		
0x095A	0x0000000409CA  	GOTO	the_end__Float2Longint
;__Lib_MathDouble.c,486 :: 		
Float2Longint__fixsfsi:
;__Lib_MathDouble.c,487 :: 		
0x095E	0xBE8100  	MOV.D	W0, W2
;__Lib_MathDouble.c,488 :: 		
0x0960	0x07001F  	RCALL	Float2Longint__funpack
;__Lib_MathDouble.c,489 :: 		
0x0962	0xA77004  	BTSC	W4, #7
;__Lib_MathDouble.c,490 :: 		
0x0964	0xA1F003  	BCLR	W3, #15
;__Lib_MathDouble.c,491 :: 		
0x0966	0xB10965  	SUB	#150, W5
;__Lib_MathDouble.c,492 :: 		
0x0968	0x320016  	BRA Z	Float2Longint_setsign
;__Lib_MathDouble.c,493 :: 		
0x096A	0x35000D  	BRA LT	Float2Longint_shiftright
;__Lib_MathDouble.c,494 :: 		
0x096C	0xE12868  	CP	W5, #8
;__Lib_MathDouble.c,495 :: 		
0x096E	0x350006  	BRA LT	Float2Longint_shiftleft
;__Lib_MathDouble.c,496 :: 		
0x0970	0x2FFFF0  	MOV	#65535, W0
;__Lib_MathDouble.c,497 :: 		
0x0972	0x27FFF1  	MOV	#32767, W1
;__Lib_MathDouble.c,498 :: 		
0x0974	0xE20006  	CP0	W3
;__Lib_MathDouble.c,499 :: 		
0x0976	0x3B0013  	BRA NN	Float2Longint_exit
;__Lib_MathDouble.c,500 :: 		
0x0978	0x280001  	MOV	#32768, W1
;__Lib_MathDouble.c,501 :: 		
0x097A	0x050000  	RETLW	#0, W0
;__Lib_MathDouble.c,502 :: 		
Float2Longint_shiftleft:
;__Lib_MathDouble.c,503 :: 		
0x097C	0x400000  	ADD	W0, W0, W0
;__Lib_MathDouble.c,504 :: 		
0x097E	0x488081  	ADDC	W1, W1, W1
;__Lib_MathDouble.c,505 :: 		
0x0980	0xE90285  	DEC	W5, W5
;__Lib_MathDouble.c,506 :: 		
0x0982	0x3AFFFC  	BRA NZ	Float2Longint_shiftleft
;__Lib_MathDouble.c,507 :: 		
0x0984	0x370008  	BRA	Float2Longint_setsign
;__Lib_MathDouble.c,508 :: 		
Float2Longint_shiftright:
;__Lib_MathDouble.c,509 :: 		
0x0986	0x428FF8  	ADD	W5, #24, [W15]
;__Lib_MathDouble.c,510 :: 		
0x0988	0x3C0002  	BRA GT	Float2Longint_shiftrightloop
;__Lib_MathDouble.c,511 :: 		
0x098A	0xEB0080  	CLR	W1
;__Lib_MathDouble.c,512 :: 		
0x098C	0x050000  	RETLW	#0, W0
;__Lib_MathDouble.c,513 :: 		
Float2Longint_shiftrightloop:
;__Lib_MathDouble.c,514 :: 		
0x098E	0xD10081  	LSR	W1, W1
;__Lib_MathDouble.c,515 :: 		
0x0990	0xD38000  	RRC	W0, W0
;__Lib_MathDouble.c,516 :: 		
0x0992	0xE80285  	INC	W5, W5
;__Lib_MathDouble.c,517 :: 		
0x0994	0x3AFFFC  	BRA NZ	Float2Longint_shiftrightloop
;__Lib_MathDouble.c,518 :: 		
Float2Longint_setsign:
;__Lib_MathDouble.c,519 :: 		
0x0996	0xE20006  	CP0	W3
;__Lib_MathDouble.c,520 :: 		
0x0998	0x3B0002  	BRA NN	Float2Longint_exit
;__Lib_MathDouble.c,521 :: 		
0x099A	0x100060  	SUBR	W0, #0, W0
;__Lib_MathDouble.c,522 :: 		
0x099C	0x1880E0  	SUBBR	W1, #0, W1
;__Lib_MathDouble.c,523 :: 		
Float2Longint_exit:
;__Lib_MathDouble.c,524 :: 		
0x099E	0x060000  	RETURN
;__Lib_MathDouble.c,525 :: 		
Float2Longint__funpack:
;__Lib_MathDouble.c,526 :: 		
0x09A0	0xDE0AC7  	LSR	W1, #7, W5
;__Lib_MathDouble.c,527 :: 		
0x09A2	0xB207F1  	AND	#127, W1
;__Lib_MathDouble.c,528 :: 		
0x09A4	0xB20FF5  	AND	#255, W5
;__Lib_MathDouble.c,529 :: 		
0x09A6	0x320008  	BRA Z	Float2Longint_zeroorsub
;__Lib_MathDouble.c,530 :: 		
0x09A8	0x42CFE1  	ADD.B	W5, #1, [W15]
;__Lib_MathDouble.c,531 :: 		
0x09AA	0x320002  	BRA Z	Float2Longint_nanorinf
;__Lib_MathDouble.c,532 :: 		
Float2Longint_finitereturn:
;__Lib_MathDouble.c,533 :: 		
0x09AC	0xA8E002  	BSET	W1, #7
;__Lib_MathDouble.c,534 :: 		
0x09AE	0x050024  	RETLW	#2, W4
;__Lib_MathDouble.c,535 :: 		
Float2Longint_nanorinf:
;__Lib_MathDouble.c,536 :: 		
0x09B0	0x700F81  	IOR	W0, W1, [W15]
;__Lib_MathDouble.c,537 :: 		
0x09B2	0x320001  	BRA Z	Float2Longint_infinite
;__Lib_MathDouble.c,538 :: 		
0x09B4	0x050804  	RETLW	#128, W4
;__Lib_MathDouble.c,539 :: 		
Float2Longint_infinite:
;__Lib_MathDouble.c,540 :: 		
0x09B6	0x050044  	RETLW	#4, W4
;__Lib_MathDouble.c,541 :: 		
Float2Longint_zeroorsub:
;__Lib_MathDouble.c,542 :: 		
0x09B8	0x700F81  	IOR	W0, W1, [W15]
;__Lib_MathDouble.c,543 :: 		
0x09BA	0x3A0002  	BRA NZ	Float2Longint_subnormal
;__Lib_MathDouble.c,544 :: 		
0x09BC	0x050014  	RETLW	#1, W4
;__Lib_MathDouble.c,545 :: 		
Float2Longint_normalize:
;__Lib_MathDouble.c,546 :: 		
0x09BE	0xE90285  	DEC	W5, W5
;__Lib_MathDouble.c,547 :: 		
Float2Longint_subnormal:
;__Lib_MathDouble.c,548 :: 		
0x09C0	0x400000  	ADD	W0, W0, W0
;__Lib_MathDouble.c,549 :: 		
0x09C2	0x48C081  	ADDC.B	W1, W1, W1
;__Lib_MathDouble.c,550 :: 		
0x09C4	0x3BFFFC  	BRA NN	Float2Longint_normalize
;__Lib_MathDouble.c,551 :: 		
0x09C6	0xA8E002  	BSET	W1, #7
;__Lib_MathDouble.c,552 :: 		
0x09C8	0x050024  	RETLW	#2, W4
;__Lib_MathDouble.c,555 :: 		
the_end__Float2Longint:
;__Lib_MathDouble.c,557 :: 		
L_end__Float2Longint:
0x09CA	0xFA8000  	ULNK
0x09CC	0x060000  	RETURN
; end of __Float2Longint
0x0DB0	0x208001  	MOV	#lo_addr(_x1), W1
0x0DB2	0x28D8E0  	MOV	#36238, W0
0x0DB4	0x090010  	REPEAT	#16
0x0DB6	0x7818B0  	MOV	[W0++], [W1++]
0x0DB8	0x060000  	RETURN
_Timer2Interrupt:
0x0BF4	0xF80034  	PUSH	PSVPAG
0x0BF6	0xF80036  	PUSH	RCOUNT
0x0BF8	0x781F80  	PUSH	W0
0x0BFA	0x200020  	MOV	#2, W0
0x0BFC	0x09000C  	REPEAT	#12
0x0BFE	0x781FB0  	PUSH	[W0++]
;ADC_DAC.c,112 :: 		void Timer2Interrupt() iv IVT_ADDR_T2INTERRUPT{
;ADC_DAC.c,114 :: 		if (contp<10){                                //Controla el numero total de pulsos de exitacion del transductor ultrasonico. (
0x0C00	0x805810  	MOV	_contp, W0
0x0C02	0xE1006A  	CP	W0, #10
0x0C04	0x310002  	BRA GEU	L_Timer2Interrupt13
L__Timer2Interrupt35:
;ADC_DAC.c,115 :: 		RB14_bit = ~RB14_bit;                    //Conmuta el valor del pin RB14
0x0C06	0xAAC2CB  	BTG	RB14_bit, BitPos(RB14_bit+0)
;ADC_DAC.c,116 :: 		} else {
0x0C08	0x37000C  	BRA	L_Timer2Interrupt14
L_Timer2Interrupt13:
;ADC_DAC.c,117 :: 		RB14_bit = 0;                            //Pone a cero despues de enviar todos los pulsos de exitacion.
0x0C0A	0xA9C2CB  	BCLR	RB14_bit, BitPos(RB14_bit+0)
;ADC_DAC.c,118 :: 		if (contp==104){
0x0C0C	0x200681  	MOV	#104, W1
0x0C0E	0x20B020  	MOV	#lo_addr(_contp), W0
0x0C10	0xE10810  	CP	W1, [W0]
0x0C12	0x3A0007  	BRA NZ	L_Timer2Interrupt15
L__Timer2Interrupt36:
;ADC_DAC.c,119 :: 		LATA4_bit = ~LATA4_bit;
0x0C14	0xAA82C4  	BTG	LATA4_bit, BitPos(LATA4_bit+0)
;ADC_DAC.c,120 :: 		IEC0.T2IE = 0;                       //Desabilita la interrupcion por desborde del TMR2 para no interferir con las interrupciones por desborde de TMR1 y por conversion completa del ADC
0x0C16	0xA9E094  	BCLR	IEC0, #7
;ADC_DAC.c,121 :: 		T2CON.TON = 0;                       //Apaga el TMR2
0x0C18	0xA9E111  	BCLR	T2CON, #15
;ADC_DAC.c,122 :: 		IEC0.AD1IE = 0;                      //Habilita la interrupcion por conversion completa del ADC
0x0C1A	0xA9A095  	BCLR	IEC0, #13
;ADC_DAC.c,123 :: 		IEC0.T1IE = 1;                       //Habilita la interrupcion por desborde del TMR1 para dar inicio al muestreo del ADC
0x0C1C	0xA86094  	BSET	IEC0, #3
;ADC_DAC.c,124 :: 		TMR1 = 0;                            //Encera el TMR1
0x0C1E	0xEF2100  	CLR	TMR1
;ADC_DAC.c,125 :: 		T1CON.TON = 1;                       //Enciende el TMR1
0x0C20	0xA8E105  	BSET	T1CON, #15
;ADC_DAC.c,126 :: 		}
L_Timer2Interrupt15:
;ADC_DAC.c,127 :: 		}
L_Timer2Interrupt14:
;ADC_DAC.c,128 :: 		contp++;                                      //Aumenta el contador en una unidad.
0x0C22	0x200011  	MOV	#1, W1
0x0C24	0x20B020  	MOV	#lo_addr(_contp), W0
0x0C26	0x408810  	ADD	W1, [W0], [W0]
;ADC_DAC.c,129 :: 		T2IF_bit = 0;                                 //Limpia la bandera de interrupcion por desbordamiento del TMR2
0x0C28	0xA9E084  	BCLR	T2IF_bit, BitPos(T2IF_bit+0)
;ADC_DAC.c,130 :: 		}
L_end_Timer2Interrupt:
0x0C2A	0x2001A0  	MOV	#26, W0
0x0C2C	0x09000C  	REPEAT	#12
0x0C2E	0x78104F  	POP	[W0--]
0x0C30	0x78004F  	POP	W0
0x0C32	0xF90036  	POP	RCOUNT
0x0C34	0xF90034  	POP	PSVPAG
0x0C36	0x064000  	RETFIE
; end of _Timer2Interrupt
_Timer1Interrupt:
0x0B68	0xF80034  	PUSH	PSVPAG
0x0B6A	0xF80036  	PUSH	RCOUNT
0x0B6C	0x781F80  	PUSH	W0
0x0B6E	0x200020  	MOV	#2, W0
0x0B70	0x09000C  	REPEAT	#12
0x0B72	0x781FB0  	PUSH	[W0++]
;ADC_DAC.c,86 :: 		void Timer1Interrupt() iv IVT_ADDR_T1INTERRUPT{
;ADC_DAC.c,87 :: 		LATA1_bit = ~LATA1_bit;                       //Auxiliar para ver el proceso de la interrupcion
0x0B74	0xAA22C4  	BTG	LATA1_bit, BitPos(LATA1_bit+0)
;ADC_DAC.c,88 :: 		if (bm==0){                                   //Cuando la bandera bm=0, la interrupcion por TMR1 es utilizada para el muestreo de la señal de entrada
0x0B76	0x20B040  	MOV	#lo_addr(_bm), W0
0x0B78	0x784010  	MOV.B	[W0], W0
0x0B7A	0xE10460  	CP.B	W0, #0
0x0B7C	0x3A0017  	BRA NZ	L_Timer1Interrupt5
L__Timer1Interrupt30:
;ADC_DAC.c,89 :: 		SAMP_bit = 0;                              //Limpia el bit SAMP para iniciar la conversion del ADC
0x0B7E	0xA92320  	BCLR	SAMP_bit, BitPos(SAMP_bit+0)
;ADC_DAC.c,90 :: 		while (!AD1CON1bits.DONE);                 // Wait for the conversion to complete
L_Timer1Interrupt6:
0x0B80	0xAF0320  	BTSC	AD1CON1bits, #0
0x0B82	0x370001  	BRA	L_Timer1Interrupt7
0x0B84	0x37FFFD  	BRA	L_Timer1Interrupt6
L_Timer1Interrupt7:
;ADC_DAC.c,91 :: 		if (i<nm){
0x0B86	0x805841  	MOV	_i, W1
0x0B88	0x2016D0  	MOV	#365, W0
0x0B8A	0xE10800  	CP	W1, W0
0x0B8C	0x31000A  	BRA GEU	L_Timer1Interrupt8
L__Timer1Interrupt31:
;ADC_DAC.c,92 :: 		M[i] = ADC1BUF0;                       //Almacena el valor actual de la conversion del ADC en el vector M
0x0B8E	0x805840  	MOV	_i, W0
0x0B90	0xDD00C1  	SL	W0, #1, W1
0x0B92	0x208240  	MOV	#lo_addr(_M), W0
0x0B94	0x400081  	ADD	W0, W1, W1
0x0B96	0xBF8300  	MOV	ADC1BUF0, WREG
0x0B98	0x780880  	MOV	W0, [W1]
;ADC_DAC.c,93 :: 		i++;                                   //Aumenta en 1 el subindice del vector de Muestras
0x0B9A	0x200011  	MOV	#1, W1
0x0B9C	0x20B080  	MOV	#lo_addr(_i), W0
0x0B9E	0x408810  	ADD	W1, [W0], [W0]
;ADC_DAC.c,94 :: 		} else {
0x0BA0	0x370005  	BRA	L_Timer1Interrupt9
L_Timer1Interrupt8:
;ADC_DAC.c,95 :: 		bm = 1;                                    //Cambia el valor de la bandera bm para terminar con el muestreo y dar comienzo al procesamiento de la señal
0x0BA2	0x20B041  	MOV	#lo_addr(_bm), W1
0x0BA4	0xB3C010  	MOV.B	#1, W0
0x0BA6	0x784880  	MOV.B	W0, [W1]
;ADC_DAC.c,96 :: 		T1CON.TON = 0;                             //Apaga el TMR1
0x0BA8	0xA9E105  	BCLR	T1CON, #15
;ADC_DAC.c,97 :: 		IEC0.T1IE = 0;                             //Desabilita la interrupcion por desborde del TMR1
0x0BAA	0xA96094  	BCLR	IEC0, #3
;ADC_DAC.c,98 :: 		}
L_Timer1Interrupt9:
;ADC_DAC.c,99 :: 		}
L_Timer1Interrupt5:
;ADC_DAC.c,100 :: 		if (bm==1) {                                  //Cuando la bandera bm=1, la interrupcion por TMR1 es utilizada para la reconstruccion de la señal mediante el DAC
0x0BAC	0x20B040  	MOV	#lo_addr(_bm), W0
0x0BAE	0x784010  	MOV.B	[W0], W0
0x0BB0	0xE10461  	CP.B	W0, #1
0x0BB2	0x3A0018  	BRA NZ	L_Timer1Interrupt10
L__Timer1Interrupt32:
;ADC_DAC.c,101 :: 		if (j<nm){
0x0BB4	0x805831  	MOV	_j, W1
0x0BB6	0x2016D0  	MOV	#365, W0
0x0BB8	0xE10800  	CP	W1, W0
0x0BBA	0x310010  	BRA GEU	L_Timer1Interrupt11
L__Timer1Interrupt33:
;ADC_DAC.c,102 :: 		LATB = (R[j]&0x7F)|((r[j]<<1)&0x700);
0x0BBC	0x805830  	MOV	_j, W0
0x0BBE	0xDD00C1  	SL	W0, #1, W1
0x0BC0	0x20B0A0  	MOV	#lo_addr(_R), W0
0x0BC2	0x400001  	ADD	W0, W1, W0
0x0BC4	0x780090  	MOV	[W0], W1
0x0BC6	0x2007F0  	MOV	#127, W0
0x0BC8	0x608100  	AND	W1, W0, W2
0x0BCA	0xDD08C1  	SL	W1, #1, W1
0x0BCC	0x207000  	MOV	#1792, W0
0x0BCE	0x608080  	AND	W1, W0, W1
0x0BD0	0x202CC0  	MOV	#lo_addr(LATB), W0
0x0BD2	0x710801  	IOR	W2, W1, [W0]
;ADC_DAC.c,103 :: 		j++;
0x0BD4	0x200011  	MOV	#1, W1
0x0BD6	0x20B060  	MOV	#lo_addr(_j), W0
0x0BD8	0x408810  	ADD	W1, [W0], [W0]
;ADC_DAC.c,104 :: 		} else {
0x0BDA	0x370004  	BRA	L_Timer1Interrupt12
L_Timer1Interrupt11:
;ADC_DAC.c,105 :: 		bm = 0;                               //Cambia el valor de la bandera bm para permitir un nuevo muestreo
0x0BDC	0x20B041  	MOV	#lo_addr(_bm), W1
0x0BDE	0xEF2000  	CLR	W0
0x0BE0	0x784880  	MOV.B	W0, [W1]
;ADC_DAC.c,106 :: 		IEC0.T1IE = 0;                        //Desabilita la interrupcion por desborde del TMR1
0x0BE2	0xA96094  	BCLR	IEC0, #3
;ADC_DAC.c,107 :: 		}
L_Timer1Interrupt12:
;ADC_DAC.c,108 :: 		}
L_Timer1Interrupt10:
;ADC_DAC.c,109 :: 		T1IF_bit = 0;                                 //Limpia la bandera de interrupcion por desbordamiento del TMR1
0x0BE4	0xA96084  	BCLR	T1IF_bit, BitPos(T1IF_bit+0)
;ADC_DAC.c,110 :: 		}
L_end_Timer1Interrupt:
0x0BE6	0x2001A0  	MOV	#26, W0
0x0BE8	0x09000C  	REPEAT	#12
0x0BEA	0x78104F  	POP	[W0--]
0x0BEC	0x78004F  	POP	W0
0x0BEE	0xF90036  	POP	RCOUNT
0x0BF0	0xF90034  	POP	PSVPAG
0x0BF2	0x064000  	RETFIE
; end of _Timer1Interrupt
;ADC_DAC.c,0 :: ?ICS_x1 [4]
0x0D8E	0x0000 ;?ICS_x1+0
0x0D90	0x0000 ;?ICS_x1+2
; end of ?ICS_x1
;ADC_DAC.c,0 :: ?ICS_x0 [4]
0x0D92	0x0000 ;?ICS_x0+0
0x0D94	0x0000 ;?ICS_x0+2
; end of ?ICS_x0
;ADC_DAC.c,0 :: ?ICS_YY [2]
0x0D96	0x0000 ;?ICS_YY+0
; end of ?ICS_YY
;ADC_DAC.c,0 :: ?ICS_y1 [4]
0x0D98	0x0000 ;?ICS_y1+0
0x0D9A	0x0000 ;?ICS_y1+2
; end of ?ICS_y1
;ADC_DAC.c,0 :: ?ICS_y2 [4]
0x0D9C	0x0000 ;?ICS_y2+0
0x0D9E	0x0000 ;?ICS_y2+2
; end of ?ICS_y2
;ADC_DAC.c,0 :: ?ICS_y0 [4]
0x0DA0	0x0000 ;?ICS_y0+0
0x0DA2	0x0000 ;?ICS_y0+2
; end of ?ICS_y0
;ADC_DAC.c,0 :: ?ICS_value [2]
0x0DA4	0x0000 ;?ICS_value+0
; end of ?ICS_value
;ADC_DAC.c,0 :: ?ICS_VMmin [2]
0x0DA6	0x0000 ;?ICS_VMmin+0
; end of ?ICS_VMmin
;ADC_DAC.c,0 :: ?ICS_VMmed [2]
0x0DA8	0x0000 ;?ICS_VMmed+0
; end of ?ICS_VMmed
;ADC_DAC.c,0 :: ?ICS_x2 [4]
0x0DAA	0x0000 ;?ICS_x2+0
0x0DAC	0x0000 ;?ICS_x2+2
; end of ?ICS_x2
;ADC_DAC.c,0 :: ?ICS_VMmax [2]
0x0DAE	0x0000 ;?ICS_VMmax+0
; end of ?ICS_VMmax
Symbol List:
//** Routines locations **
//ADDRESS    SIZE    PROCEDURE
//----------------------------------------------
0x0200     [114]    __Compare_Fp
0x0272      [10]    __Compare_Le_Fp
0x027C      [44]    _frexp
0x02A8      [12]    _Delay_50us
0x02B4      [94]    _ldexp
0x0312     [310]    __Div_FP
0x0448     [364]    __AddSub_FP
0x05B4      [10]    _Delay_1us
0x05BE      [12]    _Delay_80us
0x05CA      [12]    _Delay_500us
0x05D6      [48]    _Ow_Reset
0x0606     [282]    __Mul_FP
0x0720     [182]    __Long2Float
0x07D6      [60]    _Ow_Read
0x0812      [60]    _Ow_Write
0x084E     [228]    _sqrt
0x0932      [36]    _Vector_Min
0x0956     [120]    __Float2Longint
0x09CE      [10]    __Sub_FP
0x09D8      [36]    _Vector_Max
0x09FC     [178]    _Velocidad
0x0AAE     [186]    _Configuracion
0x0B68     [140]    _Timer1Interrupt
0x0BF4      [68]    _Timer2Interrupt
0x0C38     [342]    _main
//** Variables locations ** 
//ADDRESS    SIZE    VARIABLE
//----------------------------------------------
0x0822       [2]    _IndexMax
0x0824     [730]    _M
0x0AFE       [2]    _IndexMin
0x0B00       [2]    _k
0x02CA       [0]    RB14_bit
0x0B02       [2]    _contp
0x0B04       [1]    _bm
0x0106       [2]    TMR2
0x0B06       [2]    _j
0x0B08       [2]    _i
0x0100       [2]    TMR1
0x02C4       [0]    LATA4_bit
0x0B0A     [730]    _R
0x02C4       [0]    LATA1_bit
0x02CC       [2]    LATB
0x0300       [2]    ADC1BUF0
0x0320       [0]    SAMP_bit
0x00A6       [2]    IPC1bits
0x02C8       [2]    TRISB
0x02C0       [0]    TRISA4_bit
0x02C0       [0]    TRISA1_bit
0x0320       [2]    AD1CON1
0x0322       [2]    AD1CON2
0x0322       [2]    AD1CON2bits
0x0320       [2]    AD1CON1bits
0x0DE4       [4]    _VSnd
0x0DE8       [4]    _DSTemp
0x02CA       [2]    PORTB
0x0744       [2]    CLKDIVbits
0x02C0       [0]    TRISA0_bit
0x032C       [2]    AD1PCFGL
0x0746       [2]    PLLFBD
0x0110       [2]    T2CON
0x0102       [2]    PR1
0x0084       [0]    T1IF_bit
0x0084       [0]    T2IF_bit
0x00A4       [2]    IPC0bits
0x0082       [2]    INTCON2
0x010C       [2]    PR2
0x0328       [2]    AD1CHS0
0x0324       [2]    AD1CON3bits
0x0324       [2]    AD1CON3
0x0326       [2]    AD1CHS123
0x0094       [2]    IEC0
0x0104       [2]    T1CON
0x0330       [2]    AD1CSSL
0x0800       [4]    _x1
0x0804       [4]    _x0
0x0808       [2]    _YY
0x080A       [4]    _y1
0x080E       [4]    _y2
0x0812       [4]    _y0
0x0816       [2]    _value
0x0818       [2]    _VMmin
0x081A       [2]    _VMmed
0x081C       [4]    _x2
0x0820       [2]    _VMmax
0x0082       [2]    INTCON2
0x0094       [2]    IEC0
0x0100       [2]    TMR1
0x0102       [2]    PR1
0x0104       [2]    T1CON
0x0106       [2]    TMR2
0x010C       [2]    PR2
0x0110       [2]    T2CON
0x0014       [4]    FARG_frexp_value
0x0018       [2]    FARG_frexp_eptr
0x0014       [4]    FARG_ldexp_value
0x0018       [2]    FARG_ldexp_newexp
0x02C8       [2]    TRISB
0x02CA       [2]    PORTB
0x02CC       [2]    LATB
0x0300       [2]    ADC1BUF0
0x0320       [2]    AD1CON1
0x0322       [2]    AD1CON2
0x0324       [2]    AD1CON3
0x0326       [2]    AD1CHS123
0x0328       [2]    AD1CHS0
0x032C       [2]    AD1PCFGL
0x0330       [2]    AD1CSSL
0x0014       [2]    FARG_Ow_Reset_port
0x0016       [2]    FARG_Ow_Reset_pin
0x0746       [2]    PLLFBD
0x0014       [2]    FARG_Ow_Read_port
0x0016       [2]    FARG_Ow_Read_pin
0x0014       [2]    FARG_Ow_Write_port
0x0016       [2]    FARG_Ow_Write_pin
0x0018       [1]    FARG_Ow_Write_data_
0x0014       [4]    FARG_sqrt_x
//** Constants locations ** 
//ADDRESS    SIZE    CONSTANT
//----------------------------------------------
0x0D8E       [4]    ?ICS_x1
0x0D92       [4]    ?ICS_x0
0x0D96       [2]    ?ICS_YY
0x0D98       [4]    ?ICS_y1
0x0D9C       [4]    ?ICS_y2
0x0DA0       [4]    ?ICS_y0
0x0DA4       [2]    ?ICS_value
0x0DA6       [2]    ?ICS_VMmin
0x0DA8       [2]    ?ICS_VMmed
0x0DAA       [4]    ?ICS_x2
0x0DAE       [2]    ?ICS_VMmax
//** Label List: ** 
//----------------------------------------------
  L_Velocidad0
  L_Velocidad2
  L_Velocidad4
  L_Timer1Interrupt5
  L_Timer1Interrupt6
  L_Timer1Interrupt7
  L_Timer1Interrupt8
  L_Timer1Interrupt9
  L_Timer1Interrupt10
  L_Timer1Interrupt11
  L_Timer1Interrupt12
  L_Timer2Interrupt13
  L_Timer2Interrupt14
  L_Timer2Interrupt15
  L_main16
  L_main17
  L_main18
  L_main19
  L_main20
  L_main21
  L_main22
  L_main23
  L_main24
  L__Velocidad26
  L_end_Envolvente
  _Envolvente
  L_end_Velocidad
  _Velocidad
  L_end_Timer1Interrupt
  _Timer1Interrupt
  L__Timer1Interrupt30
  L__Timer1Interrupt31
  L__Timer1Interrupt32
  L__Timer1Interrupt33
  L_end_Timer2Interrupt
  _Timer2Interrupt
  L__Timer2Interrupt35
  L__Timer2Interrupt36
  L_end_Configuracion
  _Configuracion
  L_end_main
  _main
  L__main39
  L__main40
  L__main41
  L__main_end_loop
  L_fabs0
  L_floor1
  L_floor2
  L_floor3
  L_floor4
  L_floor5
  L_ceil6
  L_ceil7
  L_ceil8
  L_ceil9
  L_ceil10
  L_ldexp11
  L_ldexp12
  L_ldexp13
  L_ldexp14
  L_ldexp15
  L_ldexp16
  L___Lib_CMath_eval_poly17
  L___Lib_CMath_eval_poly18
  L_modf19
  L_modf20
  L_modf21
  L_modf22
  L_modf23
  L_modf24
  L_modf25
  L_modf26
  L_sqrt27
  L_sqrt28
  L_sqrt29
  L_sqrt30
  L_sqrt31
  L_sqrt32
  L_sqrt33
  L_atan34
  L_atan35
  L_atan36
  L_atan37
  L_atan38
  L_asin39
  L_asin40
  L_asin41
  L_atan242
  L_atan243
  L_atan244
  L_atan245
  L_atan246
  L_atan247
  L_sin48
  L_sin49
  L_sin50
  L_sin51
  L_cos52
  L_exp53
  L_exp54
  L_exp55
  L_exp56
  L_exp57
  L_exp58
  L_log59
  L_pow60
  L_pow61
  L_pow62
  L_pow63
  L_pow64
  L__modf65
  L__modf66
  L__modf67
  L__modf68
  L__modf69
  L__atan270
  L_end_fabs
  _fabs
  L__fabs72
  L__fabs73
  L_end_floor
  _floor
  L__floor75
  L__floor76
  L__floor77
  L__floor78
  L__floor79
  L__floor80
  L_end_ceil
  _ceil
  L__ceil82
  L__ceil83
  L__ceil84
  L__ceil85
  L__ceil86
  L__ceil87
  L_end_frexp
  _frexp
  L_end_ldexp
  _ldexp
  L__ldexp90
  L__ldexp91
  L__ldexp92
  L__ldexp93
  L_end_eval_poly
  __Lib_CMath_eval_poly
  L___Lib_CMath_eval_poly95
  L_end_modf
  _modf
  L__modf97
  L__modf98
  L__modf99
  L__modf100
  L__modf101
  L__modf102
  L__modf103
  L__modf104
  L__modf105
  L__modf106
  L_end_sqrt
  _sqrt
  L__sqrt108
  L__sqrt109
  L__sqrt110
  L__sqrt111
  L__sqrt112
  L__sqrt113
  L__sqrt114
  L__sqrt115
  L__sqrt116
  L_end_atan
  _atan
  L__atan118
  L__atan119
  L__atan120
  L__atan121
  L__atan122
  L__atan123
  L__atan124
  L_end_asin
  _asin
  L__asin126
  L__asin127
  L__asin128
  L__asin129
  L__asin130
  L__asin131
  L_end_acos
  _acos
  L_end_atan2
  _atan2
  L__atan2134
  L__atan2135
  L__atan2136
  L__atan2137
  L__atan2138
  L__atan2139
  L__atan2140
  L__atan2141
  L_end_sin
  _sin
  L__sin143
  L__sin144
  L__sin145
  L__sin146
  L__sin147
  L__sin148
  L__sin149
  L__sin150
  L_end_cos
  _cos
  L__cos152
  L__cos153
  L_end_tan
  _tan
  L_end_exp
  _exp
  L__exp156
  L__exp157
  L__exp158
  L__exp159
  L__exp160
  L__exp161
  L__exp162
  L__exp163
  L__exp164
  L__exp165
  L__exp166
  L_end_log
  _log
  L__log168
  L__log169
  L_end_log10
  _log10
  L_end_pow
  _pow
  L__pow172
  L__pow173
  L__pow174
  L__pow175
  L__pow176
  L__pow177
  L__pow178
  L__pow179
  L__pow180
  L_end_sinh
  _sinh
  L_end_cosh
  _cosh
  L_end_tanh
  _tanh
  Delay_Cyc_loop
  Delay_Cyc_rez
  Label1
  Label2
  Delay_Cyc_loop
  Delay_Cyc_rem
  L_VDelay_ms3
  L_VDelay_ms4
  Label1
  Label2
  Delay_Cyc_loop
  Delay_Cyc_rem
  L_VDelay_Advanced_ms7
  L_VDelay_Advanced_ms8
  Label1
  Label2
  Delay_Cyc_loop
  Delay_Cyc_rem
  L_Delay_1us11
  L_Delay_10us13
  L_Delay_22us15
  L_Delay_50us17
  L_Delay_80us19
  L_Delay_500us21
  L_Delay_5500us23
  L_Delay_1ms25
  L_Delay_5ms27
  L_Delay_8ms29
  L_Delay_10ms31
  L_Delay_100ms33
  L_Delay_1sec35
  L_end_Get_Fosc_kHz
  _Get_Fosc_kHz
  L_end_Get_Fosc_Per_Cyc
  _Get_Fosc_Per_Cyc
  L_end_Delay_Cyc
  _Delay_Cyc
  L_end_Delay_Cyc_Long
  _Delay_Cyc_Long
  L_end_VDelay_ms
  _VDelay_ms
  L_end_VDelay_Advanced_ms
  _VDelay_Advanced_ms
  L_end_Delay_W0
  _Delay_W0
  L_end_Delay_1us
  _Delay_1us
  L_end_Delay_10us
  _Delay_10us
  L_end_Delay_22us
  _Delay_22us
  L_end_Delay_50us
  _Delay_50us
  L_end_Delay_80us
  _Delay_80us
  L_end_Delay_500us
  _Delay_500us
  L_end_Delay_5500us
  _Delay_5500us
  L_end_Delay_1ms
  _Delay_1ms
  L_end_Delay_5ms
  _Delay_5ms
  L_end_Delay_8ms
  _Delay_8ms
  L_end_Delay_10ms
  _Delay_10ms
  L_end_Delay_100ms
  _Delay_100ms
  L_end_Delay_1sec
  _Delay_1sec
  Float__fpack
  the_end_Float__fpack
  Float_notsubnormal
  Float_zerosig
  Float_subnormal
  Float_packupandgo
  Float_overflow
  LL_intro_Long2Float
  the_end__Long2Float
  Longint2Float__floatsisf
  Longword2Float__floatuisf
  Long2Float_notspecial
  Long2Float_return0
  Longint2Float_negative
  Long2Float_fixshift
  Long2Float_round
  Long2Float_shiftleft
  Long2Float_shiftright
  Long2Float__fpack
  Long2Float_notsubnormal
  Long2Float_zerosig
  Long2Float_subnormal
  Long2Float_packupandgo
  Long2Float_overflow
  Longlong2Float_floatdisf
  the_end__LongLong2Float
  Longlong2Float_negative
  Longlong2Float_notspecial
  Longlong2Float_return0
  Longlong2Float_fixshift
  Longlong2Float_round
  Longlong2Float_shiftleft
  Longlong2Float_shiftright
  Float2Longword_fixunssfsi
  the_end__Float2Longword
  Float2Longword_funpack
  Float2Longword_returnzero
  Float2Longword_exit
  Float2Longword_shiftright
  Float2Longword_shiftleft
  Float2Longword_shiftrightloop
  Float2Longword_zeroorsub
  Float2Longword_nanorinf
  Float2Longword_finitereturn
  Float2Longword_infinite
  Float2Longword_subnormal
  Float2Longword_normalize
  Float2Longint__fixsfsi
  the_end__Float2Longint
  Float2Longint__funpack
  Float2Longint_setsign
  Float2Longint_shiftright
  Float2Longint_shiftleft
  Float2Longint_exit
  Float2Longint_shiftrightloop
  Float2Longint_zeroorsub
  Float2Longint_nanorinf
  Float2Longint_finitereturn
  Float2Longint_infinite
  Float2Longint_subnormal
  Float2Longint_normalize
  AddSubFP__addsf3
  the_end__AddSub_FP
  AddSubFP__funpack2
  AddSubFP__fPropagateNaN
  AddSubFP_aisinfinite
  AddSubFP_checkspecialb
  AddSubFP_return2_3
  AddSubFP_getsign
  AddSubFP_gotsign
  AddSubFP_expcanonical
  AddSubFP_nonegate
  AddSubFP_aligniter
  AddSubFP_signoff
  AddSubFP_align
  AddSubFP_aligned
  AddSubFP_normalizesum
  AddSubFP_checknormal
  AddSubFP_round
  AddSubFP_discardguard
  AddSubFP_underflow
  AddSubFP_normalizeloop
  AddSubFP_normalizeexit
  AddSubFP_normalizetest
  AddSubFP__fpack
  AddSubFP__fbopExit
  AddSubFP_return8_3
  AddSubFP__fbopReturnNaN
  AddSubFP__funpack
  AddSubFP_return0_1
  AddSubFP_return8_1
  AddSubFP_notsubnormal_1
  AddSubFP_zerosig
  AddSubFP_subnormal_1
  AddSubFP_packupandgo
  AddSubFP_overflow
  AddSubFP_zeroorsub
  AddSubFP_nanorinf
  AddSubFP_finitereturn
  AddSubFP_infinite
  AddSubFP_subnormal_2
  AddSubFP_normalize
  MulFP___mulsf3
  the_end__Mul_FP
  MulFP__funpack2
  MulFP__fPropagateNaN
  MulFP_aisinfinite
  MulFP_bisinfinite
  MulFP_return8_1
  MulFP_return2_1
  MulFP_formsticky
  MulFP_formRandSig
  MulFP__fpack
  MulFP_return0_1
  MulFP__fbopExit
  MulFP__fbopReturnNaN
  MulFP__funpack
  MulFP_return0_2
  MulFP_return8_2
  MulFP_notsubnormal
  MulFP_zerosig
  MulFP_subnormal1
  MulFP_packupandgo
  MulFP_overflow
  MulFP_zeroorsub
  MulFP_nanorinf
  MulFP_finitereturn
  MulFP_infinite
  MulFP_subnormal2
  MulFP_normalize
  DivFP___divsf3
  the_end__Div_FP
  DivFP__funpack2
  DivFP__fPropagateNaN
  DivFP_aisinfinite
  DivFP_returnZero
  DivFP_aiszero
  DivFP_returnInf
  DivFP_finitenonzero
  DivFP_diventry
  DivFP_divnext
  DivFP_divdone
  DivFP_divloop
  DivFP_stickyok
  DivFP_guardused
  DivFP__fpack
  DivFP_return0_1
  DivFP__fbopExit
  DivFP__fbopReturnNaN
  DivFP_return8_1
  DivFP_return2_1
  DivFP__funpack
  DivFP_return0
  DivFP_return8
  DivFP_notsubnormal
  DivFP_zerosig
  DivFP_subnormal
  DivFP_packupandgo
  DivFP_overfloW
  DivFP_zeroorsub
  DivFP_nanorinf
  DivFP_finitereturn
  DivFP_infinite
  DivFP_subnormal2
  DivFP_normalize
  CompareFp__fcompare
  the_end__Compare_Fp
  CompareFp__funpack2
  CompareFp_exit
  CompareFp_comparemag
  CompareFp_returnEqual
  CompareFp_adjust
  CompareFp__funpack
  CompareFp_zeroorsub
  CompareFp_nanorinf
  CompareFp_finitereturn
  CompareFp_infinite
  CompareFp_subnormal
  CompareFp_normalize
  L_end_Float_fpack
  _Float_fpack
  L_end__Long2Float
  __Long2Float
  L_end__LongLong2Float
  __LongLong2Float
  L_end__Float2Longword
  __Float2Longword
  L_end__Float2Longint
  __Float2Longint
  L_end__AddSub_FP
  __AddSub_FP
  L_end__Sub_FP
  __Sub_FP
  L_end__Mul_FP
  __Mul_FP
  L_end__Div_FP
  __Div_FP
  L_end__Compare_Fp
  __Compare_Fp
  L_end__Compare_Le_Fp
  __Compare_Le_Fp
  L_end__Compare_Ge_Fp
  __Compare_Ge_Fp
  L_Ow_Read0
  L_Ow_Read1
  L_Ow_Read2
  L_Ow_Read3
  L_Ow_Write4
  L_Ow_Write5
  L_Ow_Write6
  L_Ow_Write7
  L__Ow_Read8
  L_end_Ow_Reset
  _Ow_Reset
  L__Ow_Reset10
  L_end_Ow_Read
  _Ow_Read
  L__Ow_Read12
  L__Ow_Read13
  L_end_Ow_Write
  _Ow_Write
  L__Ow_Write15
  L__Ow_Write16
  _VCT_L09
  _VCT_L11
  _VCT_L10
  _VCT_L14
  _VCT_L13
  _VCT_L12
  _VCT_L17
  _VCT_L16
  _VCT_L15
  _VCT_L18
  _VCT_L19
  _VCT_L23
  _VCT_L20
  _VCT_L22
  _VCT_L21
  _VCT_L27
  _VCT_L24
  _VCT_L26
  _VCT_L25
  _VCT_L28
  _VCT_L29
  _VCT_L30
  _VCT_L31
  L_Vector_Set4
  _VCT_L32
  L_end_Vector_Add
  _Vector_Add
  L_end_Vector_Convolve
  _Vector_Convolve
  L_end_Vector_Correlate
  _Vector_Correlate
  L_end_Vector_Dot
  _Vector_Dot
  L_end_Vector_Max
  _Vector_Max
  L_end_Vector_Min
  _Vector_Min
  L_end_Vector_Multiply
  _Vector_Multiply
  L_end_Vector_Negate
  _Vector_Negate
  L_end_VectorPower
  _VectorPower
  L_end_VectorScale
  _VectorScale
  L_end_Vector_Set
  _Vector_Set
  L__Vector_Set16
  L_end_Vector_Subtract
  _Vector_Subtract
  L_Velocidad0
  L_Velocidad2
  L_Velocidad4
  L_Timer1Interrupt5
  L_Timer1Interrupt6
  L_Timer1Interrupt7
  L_Timer1Interrupt8
  L_Timer1Interrupt9
  L_Timer1Interrupt10
  L_Timer1Interrupt11
  L_Timer1Interrupt12
  L_Timer2Interrupt13
  L_Timer2Interrupt14
  L_Timer2Interrupt15
  L_main16
  L_main17
  L_main18
  L_main19
  L_main20
  L_main21
  L_main22
  L_main23
  L_main24
  L__Velocidad26
  L_end_Envolvente
  _Envolvente
  L_end_Velocidad
  _Velocidad
  L_end_Timer1Interrupt
  _Timer1Interrupt
  L__Timer1Interrupt30
  L__Timer1Interrupt31
  L__Timer1Interrupt32
  L__Timer1Interrupt33
  L_end_Timer2Interrupt
  _Timer2Interrupt
  L__Timer2Interrupt35
  L__Timer2Interrupt36
  L_end_Configuracion
  _Configuracion
  L_end_main
  _main
  L__main39
  L__main40
  L__main41
  L__main_end_loop
  L_Velocidad0
  L_Velocidad2
  L_Velocidad4
  L_Timer1Interrupt5
  L_Timer1Interrupt6
  L_Timer1Interrupt7
  L_Timer1Interrupt8
  L_Timer1Interrupt9
  L_Timer1Interrupt10
  L_Timer1Interrupt11
  L_Timer1Interrupt12
  L_Timer2Interrupt13
  L_Timer2Interrupt14
  L_Timer2Interrupt15
  L_main16
  L_main17
  L_main18
  L_main19
  L_main20
  L_main21
  L_main22
  L_main23
  L_main24
  L__Velocidad26
  L_end_Envolvente
  _Envolvente
  L_end_Velocidad
  _Velocidad
  L_end_Timer1Interrupt
  _Timer1Interrupt
  L__Timer1Interrupt30
  L__Timer1Interrupt31
  L__Timer1Interrupt32
  L__Timer1Interrupt33
  L_end_Timer2Interrupt
  _Timer2Interrupt
  L__Timer2Interrupt35
  L__Timer2Interrupt36
  L_end_Configuracion
  _Configuracion
  L_end_main
  _main
  L__main39
  L__main40
  L__main41
  L__main_end_loop
