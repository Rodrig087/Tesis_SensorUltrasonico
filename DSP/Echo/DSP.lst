;  LST file generated by mikroListExporter - v.2.0 
; Date/Time: 01/02/2017 15:38:13
;----------------------------------------------

;Address Opcode 	ASM
0x0000	0xF000EF42  	GOTO        132
_Interrupt:
;DSP.c,16 :: 		void Interrupt(){
;DSP.c,19 :: 		if (TMR2IF_bit){
0x0008	0xA29E      	BTFSS       TMR2IF_bit, BitPos(TMR2IF_bit+0) 
0x000A	0xD020      	BRA         L_Interrupt0
;DSP.c,20 :: 		if (ie==1){
0x000C	0x5017      	MOVF        _ie, 0 
0x000E	0x0A01      	XORLW       1
0x0010	0xE11A      	BNZ         L_Interrupt1
;DSP.c,21 :: 		if ((contp>(delay_p))&&(contp<(delay_p+10))){
0x0012	0x0E00      	MOVLW       0
0x0014	0x6E00      	MOVWF       R0 
0x0016	0x5016      	MOVF        _contp+1, 0 
0x0018	0x5C00      	SUBWF       R0, 0 
0x001A	0xE102      	BNZ         L__Interrupt11
0x001C	0x5015      	MOVF        _contp, 0 
0x001E	0x087C      	SUBLW       124
L__Interrupt11:
0x0020	0xE207      	BC          L_Interrupt4
0x0022	0x0E00      	MOVLW       0
0x0024	0x5C16      	SUBWF       _contp+1, 0 
0x0026	0xE102      	BNZ         L__Interrupt12
0x0028	0x0E86      	MOVLW       134
0x002A	0x5C15      	SUBWF       _contp, 0 
L__Interrupt12:
0x002C	0xA0D8      	BTFSS       STATUS, 0 
L__Interrupt8:
;DSP.c,22 :: 		RD0_bit = ~RD0_bit;
0x002E	0x7083      	BTG         RD0_bit, BitPos(RD0_bit+0) 
;DSP.c,23 :: 		}
L_Interrupt4:
;DSP.c,24 :: 		if (contp==(delay_p+10)){
0x0030	0x0E00      	MOVLW       0
0x0032	0x1816      	XORWF       _contp+1, 0 
0x0034	0xE102      	BNZ         L__Interrupt13
0x0036	0x0E86      	MOVLW       134
0x0038	0x1815      	XORWF       _contp, 0 
L__Interrupt13:
0x003A	0xE105      	BNZ         L_Interrupt5
;DSP.c,25 :: 		TMR2ON_bit=0;                          //Apaga el TMR2
0x003C	0x94CA      	BCF         TMR2ON_bit, BitPos(TMR2ON_bit+0) 
;DSP.c,26 :: 		RD0_bit = 0;                           //Pone a cero despues de enviar todos los pulsos de exitacion.
0x003E	0x9083      	BCF         RD0_bit, BitPos(RD0_bit+0) 
;DSP.c,27 :: 		ie = 0;
0x0040	0x6A17      	CLRF        _ie 
;DSP.c,28 :: 		contp = 0;
0x0042	0x6A15      	CLRF        _contp 
0x0044	0x6A16      	CLRF        _contp+1 
;DSP.c,29 :: 		}
L_Interrupt5:
;DSP.c,30 :: 		}
L_Interrupt1:
;DSP.c,31 :: 		contp++;                                  //Aumenta el contador en una unidad.
0x0046	0x4A15      	INFSNZ      _contp, 1 
0x0048	0x2A16      	INCF        _contp+1, 1 
;DSP.c,32 :: 		TMR2IF_bit = 0;                           //Limpia la bandera de interrupcion de Timer2
0x004A	0x929E      	BCF         TMR2IF_bit, BitPos(TMR2IF_bit+0) 
;DSP.c,33 :: 		}
L_Interrupt0:
;DSP.c,36 :: 		if (INTCON.INT0IF == 1){
0x004C	0xA2F2      	BTFSS       INTCON, 1 
0x004E	0xD008      	BRA         L_Interrupt6
;DSP.c,37 :: 		if (ie==0){
0x0050	0x5017      	MOVF        _ie, 0 
0x0052	0x0A00      	XORLW       0
0x0054	0xE102      	BNZ         L_Interrupt7
;DSP.c,38 :: 		TMR2ON_bit=1;                          //Enciende el TMR2.
0x0056	0x84CA      	BSF         TMR2ON_bit, BitPos(TMR2ON_bit+0) 
;DSP.c,39 :: 		RD1_bit = ~RD1_bit;
0x0058	0x7283      	BTG         RD1_bit, BitPos(RD1_bit+0) 
;DSP.c,40 :: 		}
L_Interrupt7:
;DSP.c,41 :: 		ie = 1;
0x005A	0x0E01      	MOVLW       1
0x005C	0x6E17      	MOVWF       _ie 
;DSP.c,42 :: 		INTCON.INT0IF = 0;                              //Limpia la bandera de interrupcion de INT0.
0x005E	0x92F2      	BCF         INTCON, 1 
;DSP.c,43 :: 		}
L_Interrupt6:
;DSP.c,45 :: 		}
L_end_Interrupt:
L__Interrupt10:
0x0060	0x0011      	RETFIE      1
; end of _Interrupt
_Configuracion:
;DSP.c,47 :: 		void Configuracion() {
;DSP.c,49 :: 		INTCON.GIE = 1;                             //Habilita las interrupciones globales
0x0062	0x8EF2      	BSF         INTCON, 7 
;DSP.c,50 :: 		INTCON.PEIE = 1;                            //Habilita las interrupciones perifericas
0x0064	0x8CF2      	BSF         INTCON, 6 
;DSP.c,52 :: 		INTCON.INT0IE = 1;                          //Habilita la interrupcion externas en INT0  !!!
0x0066	0x88F2      	BSF         INTCON, 4 
;DSP.c,53 :: 		INTCON2.RBPU = 1;                           //PORTB pull-ups are enabled by individual port latch values
0x0068	0x8EF1      	BSF         INTCON2, 7 
;DSP.c,54 :: 		INTCON2.INTEDG0 = 1;                        //Habilita la interrupcion por flanco de subida
0x006A	0x8CF1      	BSF         INTCON2, 6 
;DSP.c,56 :: 		ADCON1 = 0b00001111;                        //Configuracion ADCON1
0x006C	0x0E0F      	MOVLW       15
0x006E	0x6EC1      	MOVWF       ADCON1 
;DSP.c,57 :: 		CMCON = 0b00000111;
0x0070	0x0E07      	MOVLW       7
0x0072	0x6EB4      	MOVWF       CMCON 
;DSP.c,59 :: 		T2CON = 0x00;                               //Configuracion T2CON: Post-escalador 1:1, Timer2 Off, Pre-escalador 1:1
0x0074	0x6ACA      	CLRF        T2CON 
;DSP.c,60 :: 		PIE1.TMR2IE = 1;                            //Habilita la interrupcion por desborde de Timer2                        ====> La interrupcion del TMR2 interfiere con la conversion del DHT22
0x0076	0x829D      	BSF         PIE1, 1 
;DSP.c,61 :: 		PR2 = 149;                                  //Produce una interrupcion cada 12,5us
0x0078	0x0E95      	MOVLW       149
0x007A	0x6ECB      	MOVWF       PR2 
;DSP.c,64 :: 		TRISD0_bit = 0;                             //Establece el pin D0 como salida
0x007C	0x9095      	BCF         TRISD0_bit, BitPos(TRISD0_bit+0) 
;DSP.c,65 :: 		TRISD1_bit = 0;
0x007E	0x9295      	BCF         TRISD1_bit, BitPos(TRISD1_bit+0) 
;DSP.c,67 :: 		ie = 0;
0x0080	0x6A17      	CLRF        _ie 
;DSP.c,69 :: 		}
L_end_Configuracion:
0x0082	0x0012      	RETURN      0
; end of _Configuracion
_main:
;DSP.c,72 :: 		void main() {
;DSP.c,74 :: 		Configuracion();
0x0084	0xDFEE      	RCALL       _Configuracion
;DSP.c,75 :: 		}
L_end_main:
0x0086	0xD7FF      	BRA         $+0
; end of _main
Symbol List:
//** Routines locations **
//ADDRESS    SIZE    PROCEDURE
//----------------------------------------------
0x0008      [90]    _Interrupt
0x0062      [34]    _Configuracion
0x0084       [4]    _main
//** Variables locations ** 
//ADDRESS    SIZE    VARIABLE
//----------------------------------------------
0x0000       [1]    R0
0x0001       [1]    R1
0x0002       [1]    R2
0x0003       [1]    R3
0x0004       [1]    R4
0x0005       [1]    R5
0x0006       [1]    R6
0x0007       [1]    R7
0x0008       [1]    R8
0x0009       [1]    R9
0x000A       [1]    R10
0x000B       [1]    R11
0x000C       [1]    R12
0x000D       [1]    R13
0x000E       [1]    R14
0x000F       [1]    R15
0x0010       [1]    R16
0x0011       [1]    R17
0x0012       [1]    R18
0x0013       [1]    R19
0x0014       [1]    R20
0x0015       [2]    _contp
0x0017       [1]    _ie
0x0F83       [0]    RD0_bit
0x0F83       [0]    RD1_bit
0x0F95       [0]    TRISD0_bit
0x0F95       [0]    TRISD1_bit
0x0F9D       [1]    PIE1
0x0F9E       [0]    TMR2IF_bit
0x0FB4       [1]    CMCON
0x0FC1       [1]    ADCON1
0x0FCA       [1]    T2CON
0x0FCA       [0]    TMR2ON_bit
0x0FCB       [1]    PR2
0x0FD8       [1]    STATUS
0x0FD9       [1]    FSR2L
0x0FDA       [1]    FSR2H
0x0FDE       [1]    POSTINC2
0x0FE0       [1]    BSR
0x0FE1       [1]    FSR1L
0x0FE2       [1]    FSR1H
0x0FE4       [1]    PREINC1
0x0FE6       [1]    POSTINC1
0x0FE7       [1]    INDF1
0x0FE8       [1]    WREG
0x0FE9       [1]    FSR0L
0x0FEA       [1]    FSR0H
0x0FEE       [1]    POSTINC0
0x0FF1       [1]    INTCON2
0x0FF2       [1]    INTCON
0x0FF3       [1]    PRODL
0x0FF4       [1]    PRODH
0x0FF5       [1]    TABLAT
0x0FF6       [1]    TBLPTRL
0x0FF7       [1]    TBLPTRH
0x0FF8       [1]    TBLPTRU
