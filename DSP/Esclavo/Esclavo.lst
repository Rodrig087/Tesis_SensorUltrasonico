;  LST file generated by mikroListExporter - v.2.0 
; Date/Time: 08/07/2017 21:17:34
;----------------------------------------------

;Address Opcode 	ASM
0x0000	0xF002EF32  	GOTO        1124
_interrupt:
;Esclavo.c,33 :: 		void interrupt(void){
0x0008	0xF016C000  	MOVFF       R0, 22
0x000C	0xF015C001  	MOVFF       R1, 21
;Esclavo.c,35 :: 		if(PIR1.F5==1){
0x0010	0xF017CFE1  	MOVFF       FSR1L, 23
0x0014	0xF018CFE2  	MOVFF       FSR1H, 24
0x0018	0xAA9E      	BTFSS       PIR1, 5 
0x001A	0xD03A      	BRA         L_interrupt0
;Esclavo.c,36 :: 		if (UART1_Data_Ready()==1){
0x001C	0xD8F6      	RCALL       _UART1_Data_Ready
0x001E	0x5000      	MOVF        R0, 0 
0x0020	0x0A01      	XORLW       1
0x0022	0xE103      	BNZ         L_interrupt1
;Esclavo.c,37 :: 		Dato = UART1_Read();
0x0024	0xD8F7      	RCALL       _UART1_Read
0x0026	0xF048C000  	MOVFF       R0, _Dato
;Esclavo.c,38 :: 		}
L_interrupt1:
;Esclavo.c,39 :: 		if ((Dato==Hdr)&&(ip==0)){                       //Verifica que el primer dato en llegar sea el identificador de inicio de trama
0x002A	0x5048      	MOVF        _Dato, 0 
0x002C	0x0A3A      	XORLW       58
0x002E	0xE10F      	BNZ         L_interrupt4
0x0030	0x502A      	MOVF        _ip, 0 
0x0032	0x0A00      	XORLW       0
0x0034	0xE10C      	BNZ         L_interrupt4
L__interrupt68:
;Esclavo.c,40 :: 		BanT = 1;                                     //Activa la bandera de trama
0x0036	0x0E01      	MOVLW       1
0x0038	0x6E47      	MOVWF       _BanT 
;Esclavo.c,41 :: 		Ptcn[ip] = Dato;                              //Almacena el Dato en la trama de peticion
0x003A	0x0E2F      	MOVLW       _Ptcn
0x003C	0x6EE1      	MOVWF       FSR1L 
0x003E	0x0E00      	MOVLW       hi_addr(_Ptcn)
0x0040	0x6EE2      	MOVWF       FSR1H 
0x0042	0x502A      	MOVF        _ip, 0 
0x0044	0x26E1      	ADDWF       FSR1L, 1 
0x0046	0xB0D8      	BTFSC       STATUS, 0 
0x0048	0x2AE2      	INCF        FSR1H, 1 
0x004A	0xFFE6C048  	MOVFF       _Dato, POSTINC1
;Esclavo.c,42 :: 		}
L_interrupt4:
;Esclavo.c,43 :: 		if ((Dato!=Hdr)&&(ip==0)){                       //Verifica si el primer dato en llegar es diferente al identificador del inicio de trama
0x004E	0x5048      	MOVF        _Dato, 0 
0x0050	0x0A3A      	XORLW       58
0x0052	0xE005      	BZ          L_interrupt7
0x0054	0x502A      	MOVF        _ip, 0 
0x0056	0x0A00      	XORLW       0
0x0058	0xE102      	BNZ         L_interrupt7
L__interrupt67:
;Esclavo.c,44 :: 		ip=-1;                                        //Si es asi: reduce el subindice en una unidad
0x005A	0x0EFF      	MOVLW       255
0x005C	0x6E2A      	MOVWF       _ip 
;Esclavo.c,45 :: 		}
L_interrupt7:
;Esclavo.c,46 :: 		if ((BanT==1)&&(ip!=0)){
0x005E	0x5047      	MOVF        _BanT, 0 
0x0060	0x0A01      	XORLW       1
0x0062	0xE10D      	BNZ         L_interrupt10
0x0064	0x502A      	MOVF        _ip, 0 
0x0066	0x0A00      	XORLW       0
0x0068	0xE00A      	BZ          L_interrupt10
L__interrupt66:
;Esclavo.c,47 :: 		Ptcn[ip] = Dato;                              //Almacena el resto de datos en la trama de peticion si la bandera de trama esta activada
0x006A	0x0E2F      	MOVLW       _Ptcn
0x006C	0x6EE1      	MOVWF       FSR1L 
0x006E	0x0E00      	MOVLW       hi_addr(_Ptcn)
0x0070	0x6EE2      	MOVWF       FSR1H 
0x0072	0x502A      	MOVF        _ip, 0 
0x0074	0x26E1      	ADDWF       FSR1L, 1 
0x0076	0xB0D8      	BTFSC       STATUS, 0 
0x0078	0x2AE2      	INCF        FSR1H, 1 
0x007A	0xFFE6C048  	MOVFF       _Dato, POSTINC1
;Esclavo.c,48 :: 		}
L_interrupt10:
;Esclavo.c,49 :: 		ip++;                                            //Aumenta el subindice una unidad
0x007E	0x2A2A      	INCF        _ip, 1 
;Esclavo.c,50 :: 		if (ip==Psize){                                  //Verifica que se haya terminado de llenar la trama de datos
0x0080	0x502A      	MOVF        _ip, 0 
0x0082	0x0A06      	XORLW       6
0x0084	0xE104      	BNZ         L_interrupt11
;Esclavo.c,51 :: 		BanP = 1;                                     //Habilita la bandera de lectura de datos
0x0086	0x0E01      	MOVLW       1
0x0088	0x6E37      	MOVWF       _BanP 
;Esclavo.c,52 :: 		BanT = 0;
0x008A	0x6A47      	CLRF        _BanT 
;Esclavo.c,53 :: 		ip=0;                                         //Limpia el subindice de la trama de peticion para permitir una nueva secuencia de recepcion de datos
0x008C	0x6A2A      	CLRF        _ip 
;Esclavo.c,54 :: 		}
L_interrupt11:
;Esclavo.c,55 :: 		PIR1.F5 = 0;                                     //Limpia la bandera de interrupcion de UART1
0x008E	0x9A9E      	BCF         PIR1, 5 
;Esclavo.c,56 :: 		}
L_interrupt0:
;Esclavo.c,57 :: 		}
L_end_interrupt:
L__interrupt71:
0x0090	0xF000C016  	MOVFF       22, R0
0x0094	0xF001C015  	MOVFF       21, R1
0x0098	0xFFE1C017  	MOVFF       23, FSR1L
0x009C	0xFFE2C018  	MOVFF       24, FSR1H
0x00A0	0x0011      	RETFIE      1
; end of _interrupt
_StartSignal:
;Esclavo.c,61 :: 		void StartSignal(){
;Esclavo.c,62 :: 		TRISB4_bit = 0;                                     //Configure RD0 as output
0x00A2	0x9893      	BCF         TRISB4_bit, BitPos(TRISB4_bit+0) 
;Esclavo.c,63 :: 		RB4_bit = 0;                                        //RD0 sends 0 to the sensor
0x00A4	0x9881      	BCF         RB4_bit, BitPos(RB4_bit+0) 
;Esclavo.c,64 :: 		delay_ms(18);
0x00A6	0x0E2F      	MOVLW       47
0x00A8	0x6E0C      	MOVWF       R12, 0
0x00AA	0x0EBF      	MOVLW       191
0x00AC	0x6E0D      	MOVWF       R13, 0
L_StartSignal12:
0x00AE	0x2E0D      	DECFSZ      R13, 1, 0
0x00B0	0xD7FE      	BRA         L_StartSignal12
0x00B2	0x2E0C      	DECFSZ      R12, 1, 0
0x00B4	0xD7FC      	BRA         L_StartSignal12
0x00B6	0x0000      	NOP
0x00B8	0x0000      	NOP
;Esclavo.c,65 :: 		RB4_bit = 1;                                        //RD0 sends 1 to the sensor
0x00BA	0x8881      	BSF         RB4_bit, BitPos(RB4_bit+0) 
;Esclavo.c,66 :: 		delay_us(30);
0x00BC	0x0E13      	MOVLW       19
0x00BE	0x6E0D      	MOVWF       R13, 0
L_StartSignal13:
0x00C0	0x2E0D      	DECFSZ      R13, 1, 0
0x00C2	0xD7FE      	BRA         L_StartSignal13
0x00C4	0x0000      	NOP
0x00C6	0x0000      	NOP
;Esclavo.c,67 :: 		TRISB4_bit = 1;                                     //Configure RD0 as input
0x00C8	0x8893      	BSF         TRISB4_bit, BitPos(TRISB4_bit+0) 
;Esclavo.c,68 :: 		}
L_end_StartSignal:
0x00CA	0x0012      	RETURN      0
; end of _StartSignal
_CheckResponse:
;Esclavo.c,70 :: 		void CheckResponse(){
;Esclavo.c,71 :: 		Check = 0;
0x00CC	0x6A19      	CLRF        _Check 
;Esclavo.c,72 :: 		delay_us(40);
0x00CE	0x0E1A      	MOVLW       26
0x00D0	0x6E0D      	MOVWF       R13, 0
L_CheckResponse14:
0x00D2	0x2E0D      	DECFSZ      R13, 1, 0
0x00D4	0xD7FE      	BRA         L_CheckResponse14
0x00D6	0x0000      	NOP
;Esclavo.c,73 :: 		if (RB4_bit == 0){
0x00D8	0xB881      	BTFSC       RB4_bit, BitPos(RB4_bit+0) 
0x00DA	0xD00D      	BRA         L_CheckResponse15
;Esclavo.c,74 :: 		delay_us(80);
0x00DC	0x0E35      	MOVLW       53
0x00DE	0x6E0D      	MOVWF       R13, 0
L_CheckResponse16:
0x00E0	0x2E0D      	DECFSZ      R13, 1, 0
0x00E2	0xD7FE      	BRA         L_CheckResponse16
;Esclavo.c,75 :: 		if (RB4_bit == 1){
0x00E4	0xA881      	BTFSS       RB4_bit, BitPos(RB4_bit+0) 
0x00E6	0xD007      	BRA         L_CheckResponse17
;Esclavo.c,76 :: 		Check = 1;
0x00E8	0x0E01      	MOVLW       1
0x00EA	0x6E19      	MOVWF       _Check 
;Esclavo.c,77 :: 		delay_us(40);
0x00EC	0x0E1A      	MOVLW       26
0x00EE	0x6E0D      	MOVWF       R13, 0
L_CheckResponse18:
0x00F0	0x2E0D      	DECFSZ      R13, 1, 0
0x00F2	0xD7FE      	BRA         L_CheckResponse18
0x00F4	0x0000      	NOP
;Esclavo.c,78 :: 		}
L_CheckResponse17:
;Esclavo.c,79 :: 		}
L_CheckResponse15:
;Esclavo.c,80 :: 		}
L_end_CheckResponse:
0x00F6	0x0012      	RETURN      0
; end of _CheckResponse
_Div_16X16_U:
;__Lib_Math.c,102 :: 		
;__Lib_Math.c,109 :: 		
0x00F8	0x6A08      	CLRF        R8, 0
;__Lib_Math.c,110 :: 		
0x00FA	0x6A09      	CLRF        R9, 0
;__Lib_Math.c,111 :: 		
0x00FC	0x0E10      	MOVLW       16
;__Lib_Math.c,112 :: 		
0x00FE	0x6E0C      	MOVWF       R12, 0
;__Lib_Math.c,113 :: 		
0x0100	0x3401      	RLCF        R1, 0, 0
;__Lib_Math.c,114 :: 		
0x0102	0x3608      	RLCF        R8, 1, 0
;__Lib_Math.c,115 :: 		
0x0104	0x3609      	RLCF        R9, 1, 0
;__Lib_Math.c,116 :: 		
0x0106	0x5004      	MOVF        R4, 0, 0
;__Lib_Math.c,117 :: 		
0x0108	0x5E08      	SUBWF       R8, 1, 0
;__Lib_Math.c,118 :: 		
0x010A	0x5005      	MOVF        R5, 0, 0
;__Lib_Math.c,119 :: 		
0x010C	0xA0D8      	BTFSS       STATUS, 0, 0
;__Lib_Math.c,120 :: 		
0x010E	0x3C05      	INCFSZ      R5, 0, 0
;__Lib_Math.c,121 :: 		
0x0110	0x5E09      	SUBWF       R9, 1, 0
;__Lib_Math.c,122 :: 		
0x0112	0xB0D8      	BTFSC       STATUS, 0, 0
;__Lib_Math.c,123 :: 		
0x0114	0xD007      	BRA         $+16
;__Lib_Math.c,124 :: 		
0x0116	0x5004      	MOVF        R4, 0, 0
;__Lib_Math.c,125 :: 		
0x0118	0x2608      	ADDWF       R8, 1, 0
;__Lib_Math.c,126 :: 		
0x011A	0x5005      	MOVF        R5, 0, 0
;__Lib_Math.c,127 :: 		
0x011C	0xB0D8      	BTFSC       STATUS, 0, 0
;__Lib_Math.c,128 :: 		
0x011E	0x3C05      	INCFSZ      R5, 0, 0
;__Lib_Math.c,129 :: 		
0x0120	0x2609      	ADDWF       R9, 1, 0
;__Lib_Math.c,130 :: 		
0x0122	0x90D8      	BCF         STATUS, 0, 0
;__Lib_Math.c,131 :: 		
0x0124	0x3600      	RLCF        R0, 1, 0
;__Lib_Math.c,132 :: 		
0x0126	0x3601      	RLCF        R1, 1, 0
;__Lib_Math.c,133 :: 		
0x0128	0x2E0C      	DECFSZ      R12, 1, 0
;__Lib_Math.c,134 :: 		
0x012A	0xD7EA      	BRA         $-42
;__Lib_Math.c,136 :: 		
L_end_Div_16X16_U:
0x012C	0x0012      	RETURN      0
; end of _Div_16X16_U
_UART1_Write:
;__Lib_UART_c67b67.c,63 :: 		
;__Lib_UART_c67b67.c,64 :: 		
L_UART1_Write3:
0x012E	0xB2AC      	BTFSC       TXSTA, 1 
0x0130	0xD002      	BRA         L_UART1_Write4
;__Lib_UART_c67b67.c,65 :: 		
0x0132	0x0000      	NOP
0x0134	0xD7FC      	BRA         L_UART1_Write3
L_UART1_Write4:
;__Lib_UART_c67b67.c,66 :: 		
0x0136	0xFFADC055  	MOVFF       FARG_UART1_Write_data_, TXREG
;__Lib_UART_c67b67.c,67 :: 		
L_end_UART1_Write:
0x013A	0x0012      	RETURN      0
; end of _UART1_Write
_UART1_Tx_Idle:
;__Lib_UART_c67b67.c,57 :: 		
;__Lib_UART_c67b67.c,58 :: 		
0x013C	0x0E00      	MOVLW       0
0x013E	0xB2AC      	BTFSC       TXSTA, 1 
0x0140	0x0E01      	MOVLW       1
0x0142	0x6E00      	MOVWF       R0 
;__Lib_UART_c67b67.c,59 :: 		
L_end_UART1_Tx_Idle:
0x0144	0x0012      	RETURN      0
; end of _UART1_Tx_Idle
_ReadData:
;Esclavo.c,82 :: 		char ReadData(){
;Esclavo.c,84 :: 		for(j = 0; j < 8; j++){
0x0146	0x6A03      	CLRF        R3 
L_ReadData19:
0x0148	0x0E08      	MOVLW       8
0x014A	0x5C03      	SUBWF       R3, 0 
0x014C	0xE230      	BC          L_ReadData20
;Esclavo.c,85 :: 		while(!RB4_bit);                              //Espera hasta RB4 pase a alto
L_ReadData22:
0x014E	0xB881      	BTFSC       RB4_bit, BitPos(RB4_bit+0) 
0x0150	0xD001      	BRA         L_ReadData23
0x0152	0xD7FD      	BRA         L_ReadData22
L_ReadData23:
;Esclavo.c,86 :: 		delay_us(30);
0x0154	0x0E13      	MOVLW       19
0x0156	0x6E0D      	MOVWF       R13, 0
L_ReadData24:
0x0158	0x2E0D      	DECFSZ      R13, 1, 0
0x015A	0xD7FE      	BRA         L_ReadData24
0x015C	0x0000      	NOP
0x015E	0x0000      	NOP
;Esclavo.c,87 :: 		if(RB4_bit == 0){
0x0160	0xB881      	BTFSC       RB4_bit, BitPos(RB4_bit+0) 
0x0162	0xD011      	BRA         L_ReadData25
;Esclavo.c,88 :: 		i&= ~(1<<(7 - j));                       //Clear bit (7-b)
0x0164	0x5003      	MOVF        R3, 0 
0x0166	0x0807      	SUBLW       7
0x0168	0x6E00      	MOVWF       R0 
0x016A	0xF001C000  	MOVFF       R0, R1
0x016E	0x0E01      	MOVLW       1
0x0170	0x6E00      	MOVWF       R0 
0x0172	0x5001      	MOVF        R1, 0 
L__ReadData75:
0x0174	0xE004      	BZ          L__ReadData76
0x0176	0x3600      	RLCF        R0, 1 
0x0178	0x9000      	BCF         R0, 0 
0x017A	0x0FFF      	ADDLW       255
0x017C	0xD7FB      	BRA         L__ReadData75
L__ReadData76:
0x017E	0x1E00      	COMF        R0, 1 
0x0180	0x5000      	MOVF        R0, 0 
0x0182	0x1602      	ANDWF       R2, 1 
;Esclavo.c,89 :: 		}else {
0x0184	0xD012      	BRA         L_ReadData26
L_ReadData25:
;Esclavo.c,90 :: 		i|= (1 << (7 - j));                      //Set bit (7-b)
0x0186	0x5003      	MOVF        R3, 0 
0x0188	0x0807      	SUBLW       7
0x018A	0x6E00      	MOVWF       R0 
0x018C	0xF001C000  	MOVFF       R0, R1
0x0190	0x0E01      	MOVLW       1
0x0192	0x6E00      	MOVWF       R0 
0x0194	0x5001      	MOVF        R1, 0 
L__ReadData77:
0x0196	0xE004      	BZ          L__ReadData78
0x0198	0x3600      	RLCF        R0, 1 
0x019A	0x9000      	BCF         R0, 0 
0x019C	0x0FFF      	ADDLW       255
0x019E	0xD7FB      	BRA         L__ReadData77
L__ReadData78:
0x01A0	0x5000      	MOVF        R0, 0 
0x01A2	0x1202      	IORWF       R2, 1 
;Esclavo.c,91 :: 		while(RB4_bit);                          //Espera hasta RB4 pase a bajo
L_ReadData27:
0x01A4	0xA881      	BTFSS       RB4_bit, BitPos(RB4_bit+0) 
0x01A6	0xD001      	BRA         L_ReadData28
0x01A8	0xD7FD      	BRA         L_ReadData27
L_ReadData28:
;Esclavo.c,92 :: 		}
L_ReadData26:
;Esclavo.c,84 :: 		for(j = 0; j < 8; j++){
0x01AA	0x2A03      	INCF        R3, 1 
;Esclavo.c,93 :: 		}
0x01AC	0xD7CD      	BRA         L_ReadData19
L_ReadData20:
;Esclavo.c,94 :: 		return i;
0x01AE	0xF000C002  	MOVFF       R2, R0
;Esclavo.c,95 :: 		}
L_end_ReadData:
0x01B2	0x0012      	RETURN      0
; end of _ReadData
_UART1_Init:
;__Lib_UART_c67b67.c,20 :: 		
;__Lib_UART_c67b67.c,23 :: 		
0x01B4	0x0E2E      	MOVLW       _UART1_Write
0x01B6	0x6E43      	MOVWF       _UART_Wr_Ptr 
0x01B8	0x0E01      	MOVLW       hi_addr(_UART1_Write)
0x01BA	0x6E44      	MOVWF       _UART_Wr_Ptr+1 
0x01BC	0x0E55      	MOVLW       FARG_UART1_Write_data_
0x01BE	0x6E45      	MOVWF       _UART_Wr_Ptr+2 
0x01C0	0x0E00      	MOVLW       hi_addr(FARG_UART1_Write_data_)
0x01C2	0x6E46      	MOVWF       _UART_Wr_Ptr+3 
;__Lib_UART_c67b67.c,24 :: 		
0x01C4	0x0E14      	MOVLW       _UART1_Read
0x01C6	0x6E3F      	MOVWF       _UART_Rd_Ptr 
0x01C8	0x0E02      	MOVLW       hi_addr(_UART1_Read)
0x01CA	0x6E40      	MOVWF       _UART_Rd_Ptr+1 
0x01CC	0x0E00      	MOVLW       0
0x01CE	0x6E41      	MOVWF       _UART_Rd_Ptr+2 
0x01D0	0x0E00      	MOVLW       0
0x01D2	0x6E42      	MOVWF       _UART_Rd_Ptr+3 
;__Lib_UART_c67b67.c,25 :: 		
0x01D4	0x0E0A      	MOVLW       _UART1_Data_Ready
0x01D6	0x6E3B      	MOVWF       _UART_Rdy_Ptr 
0x01D8	0x0E02      	MOVLW       hi_addr(_UART1_Data_Ready)
0x01DA	0x6E3C      	MOVWF       _UART_Rdy_Ptr+1 
0x01DC	0x0E00      	MOVLW       0
0x01DE	0x6E3D      	MOVWF       _UART_Rdy_Ptr+2 
0x01E0	0x0E00      	MOVLW       0
0x01E2	0x6E3E      	MOVWF       _UART_Rdy_Ptr+3 
;__Lib_UART_c67b67.c,26 :: 		
0x01E4	0x0E3C      	MOVLW       _UART1_Tx_Idle
0x01E6	0x6E49      	MOVWF       _UART_Tx_Idle_Ptr 
0x01E8	0x0E01      	MOVLW       hi_addr(_UART1_Tx_Idle)
0x01EA	0x6E4A      	MOVWF       _UART_Tx_Idle_Ptr+1 
0x01EC	0x0E00      	MOVLW       0
0x01EE	0x6E4B      	MOVWF       _UART_Tx_Idle_Ptr+2 
0x01F0	0x0E00      	MOVLW       0
0x01F2	0x6E4C      	MOVWF       _UART_Tx_Idle_Ptr+3 
;__Lib_UART_c67b67.c,28 :: 		
0x01F4	0x8AAC      	BSF         TXSTA, 5 
;__Lib_UART_c67b67.c,29 :: 		
0x01F6	0x0E90      	MOVLW       144
0x01F8	0x6EAB      	MOVWF       RCSTA 
;__Lib_UART_c67b67.c,30 :: 		
0x01FA	0x8E94      	BSF         TRISC7_bit, BitPos(TRISC7_bit+0) 
;__Lib_UART_c67b67.c,31 :: 		
0x01FC	0x9C94      	BCF         TRISC6_bit, BitPos(TRISC6_bit+0) 
;__Lib_UART_c67b67.c,33 :: 		
L_UART1_Init0:
0x01FE	0xAA9E      	BTFSS       PIR1, 5 
0x0200	0xD003      	BRA         L_UART1_Init1
;__Lib_UART_c67b67.c,34 :: 		
0x0202	0xF000CFAE  	MOVFF       RCREG, R0
0x0206	0xD7FB      	BRA         L_UART1_Init0
L_UART1_Init1:
;__Lib_UART_c67b67.c,35 :: 		
L_end_UART1_Init:
0x0208	0x0012      	RETURN      0
; end of _UART1_Init
_UART1_Data_Ready:
;__Lib_UART_c67b67.c,39 :: 		
;__Lib_UART_c67b67.c,40 :: 		
0x020A	0x0E00      	MOVLW       0
0x020C	0xBA9E      	BTFSC       PIR1, 5 
0x020E	0x0E01      	MOVLW       1
0x0210	0x6E00      	MOVWF       R0 
;__Lib_UART_c67b67.c,41 :: 		
L_end_UART1_Data_Ready:
0x0212	0x0012      	RETURN      0
; end of _UART1_Data_Ready
_UART1_Read:
;__Lib_UART_c67b67.c,44 :: 		
;__Lib_UART_c67b67.c,47 :: 		
0x0214	0xF001CFAE  	MOVFF       RCREG, R1
;__Lib_UART_c67b67.c,48 :: 		
0x0218	0xA2AB      	BTFSS       RCSTA, 1 
0x021A	0xD002      	BRA         L_UART1_Read2
;__Lib_UART_c67b67.c,49 :: 		
0x021C	0x98AB      	BCF         RCSTA, 4 
;__Lib_UART_c67b67.c,50 :: 		
0x021E	0x88AB      	BSF         RCSTA, 4 
;__Lib_UART_c67b67.c,51 :: 		
L_UART1_Read2:
;__Lib_UART_c67b67.c,52 :: 		
0x0220	0xF000C001  	MOVFF       R1, R0
;__Lib_UART_c67b67.c,53 :: 		
L_end_UART1_Read:
0x0224	0x0012      	RETURN      0
; end of _UART1_Read
_Configuracion:
;Esclavo.c,166 :: 		void Configuracion(){
;Esclavo.c,168 :: 		ANSELA = 0;                                       //Configura PORTA como digital
0x0226	0x010F      	MOVLB       15
0x0228	0x6B38      	CLRF        ANSELA, 1
;Esclavo.c,169 :: 		ANSELB = 0;                                       //Configura PORTB como digital
0x022A	0x6B39      	CLRF        ANSELB, 1
;Esclavo.c,170 :: 		ANSELC = 0;                                       //Configura PORTC como digital
0x022C	0x6B3A      	CLRF        ANSELC, 1
;Esclavo.c,172 :: 		TRISA = 1;                                        //Configura el puerto A como entrada
0x022E	0x0E01      	MOVLW       1
0x0230	0x6E92      	MOVWF       TRISA 
;Esclavo.c,173 :: 		TRISC5_bit = 0;                                   //Configura el pin C5 como salida
0x0232	0x9A94      	BCF         TRISC5_bit, BitPos(TRISC5_bit+0) 
;Esclavo.c,174 :: 		TRISC0_bit = 1;                                   //Configura el pin C0 como entrada
0x0234	0x8094      	BSF         TRISC0_bit, BitPos(TRISC0_bit+0) 
;Esclavo.c,175 :: 		TRISC1_bit = 1;                                   //Configura el pin C1 como entrada
0x0236	0x8294      	BSF         TRISC1_bit, BitPos(TRISC1_bit+0) 
;Esclavo.c,177 :: 		INTCON.GIE = 1;                                   //Habilita las interrupciones globales
0x0238	0x8EF2      	BSF         INTCON, 7 
;Esclavo.c,178 :: 		INTCON.PEIE = 1;                                  //Habilita las interrupciones perifericas
0x023A	0x8CF2      	BSF         INTCON, 6 
;Esclavo.c,180 :: 		PIE1.RC1IE = 1;                                   //Habilita la interrupcion en UART1 receive
0x023C	0x8A9D      	BSF         PIE1, 5 
;Esclavo.c,181 :: 		PIR1.F5 = 0;                                      //Limpia la bandera de interrupcion
0x023E	0x9A9E      	BCF         PIR1, 5 
;Esclavo.c,183 :: 		UART1_Init(9600);                                 //Inicializa el UART1 a 9600 bps
0x0240	0x86B8      	BSF         BAUDCON, 3, 0
0x0242	0x6AB0      	CLRF        SPBRGH 
0x0244	0x0ECF      	MOVLW       207
0x0246	0x6EAF      	MOVWF       SPBRG 
0x0248	0x84AC      	BSF         TXSTA, 2, 0
0x024A	0xDFB4      	RCALL       _UART1_Init
;Esclavo.c,184 :: 		Delay_ms(100);                                    //Espera para que el modulo UART se estabilice
0x024C	0x0E02      	MOVLW       2
0x024E	0x6E0B      	MOVWF       R11, 0
0x0250	0x0E04      	MOVLW       4
0x0252	0x6E0C      	MOVWF       R12, 0
0x0254	0x0EBA      	MOVLW       186
0x0256	0x6E0D      	MOVWF       R13, 0
L_Configuracion50:
0x0258	0x2E0D      	DECFSZ      R13, 1, 0
0x025A	0xD7FE      	BRA         L_Configuracion50
0x025C	0x2E0C      	DECFSZ      R12, 1, 0
0x025E	0xD7FC      	BRA         L_Configuracion50
0x0260	0x2E0B      	DECFSZ      R11, 1, 0
0x0262	0xD7FA      	BRA         L_Configuracion50
0x0264	0x0000      	NOP
;Esclavo.c,186 :: 		}
L_end_Configuracion:
0x0266	0x0012      	RETURN      0
; end of _Configuracion
_Calcular:
;Esclavo.c,97 :: 		void Calcular(){
;Esclavo.c,99 :: 		StartSignal();
0x0268	0xDF1C      	RCALL       _StartSignal
;Esclavo.c,100 :: 		CheckResponse();
0x026A	0xDF30      	RCALL       _CheckResponse
;Esclavo.c,101 :: 		if(Check == 1){
0x026C	0x5019      	MOVF        _Check, 0 
0x026E	0x0A01      	XORLW       1
0x0270	0xA4D8      	BTFSS       STATUS, 2 
0x0272	0xD082      	BRA         L_Calcular29
;Esclavo.c,102 :: 		RH_byte1 = ReadData();
0x0274	0xDF68      	RCALL       _ReadData
0x0276	0xF024C000  	MOVFF       R0, _RH_byte1
;Esclavo.c,103 :: 		RH_byte2 = ReadData();
0x027A	0xDF65      	RCALL       _ReadData
0x027C	0xF025C000  	MOVFF       R0, _RH_byte2
;Esclavo.c,104 :: 		T_byte1 = ReadData();
0x0280	0xDF62      	RCALL       _ReadData
0x0282	0xF022C000  	MOVFF       R0, _T_byte1
;Esclavo.c,105 :: 		T_byte2 = ReadData();
0x0286	0xDF5F      	RCALL       _ReadData
0x0288	0xF023C000  	MOVFF       R0, _T_byte2
;Esclavo.c,106 :: 		Sum = ReadData();
0x028C	0xDF5C      	RCALL       _ReadData
0x028E	0xF039C000  	MOVFF       R0, _Sum
0x0292	0x0E00      	MOVLW       0
0x0294	0x6E3A      	MOVWF       _Sum+1 
;Esclavo.c,107 :: 		if(Sum == ((RH_byte1+RH_byte2+T_byte1+T_byte2) & 0XFF)){
0x0296	0x5025      	MOVF        _RH_byte2, 0 
0x0298	0x2424      	ADDWF       _RH_byte1, 0 
0x029A	0x6E00      	MOVWF       R0 
0x029C	0x6A01      	CLRF        R1 
0x029E	0x0E00      	MOVLW       0
0x02A0	0x2201      	ADDWFC      R1, 1 
0x02A2	0x5022      	MOVF        _T_byte1, 0 
0x02A4	0x2600      	ADDWF       R0, 1 
0x02A6	0x0E00      	MOVLW       0
0x02A8	0x2201      	ADDWFC      R1, 1 
0x02AA	0x5023      	MOVF        _T_byte2, 0 
0x02AC	0x2600      	ADDWF       R0, 1 
0x02AE	0x0E00      	MOVLW       0
0x02B0	0x2201      	ADDWFC      R1, 1 
0x02B2	0x0EFF      	MOVLW       255
0x02B4	0x1400      	ANDWF       R0, 0 
0x02B6	0x6E02      	MOVWF       R2 
0x02B8	0xF003C001  	MOVFF       R1, R3
0x02BC	0x0E00      	MOVLW       0
0x02BE	0x1603      	ANDWF       R3, 1 
0x02C0	0x503A      	MOVF        _Sum+1, 0 
0x02C2	0x1803      	XORWF       R3, 0 
0x02C4	0xE102      	BNZ         L__Calcular80
0x02C6	0x5002      	MOVF        R2, 0 
0x02C8	0x1839      	XORWF       _Sum, 0 
L__Calcular80:
0x02CA	0xE14D      	BNZ         L_Calcular30
;Esclavo.c,108 :: 		ITemp = T_byte1;
0x02CC	0xF04DC022  	MOVFF       _T_byte1, _ITemp
0x02D0	0x0E00      	MOVLW       0
0x02D2	0x6E4E      	MOVWF       _ITemp+1 
;Esclavo.c,109 :: 		ITemp = (ITemp << 8) | T_byte2;
0x02D4	0xF001C04D  	MOVFF       _ITemp, R1
0x02D8	0x6A00      	CLRF        R0 
0x02DA	0x5023      	MOVF        _T_byte2, 0 
0x02DC	0x1000      	IORWF       R0, 0 
0x02DE	0x6E03      	MOVWF       R3 
0x02E0	0xF004C001  	MOVFF       R1, R4
0x02E4	0x0E00      	MOVLW       0
0x02E6	0x1204      	IORWF       R4, 1 
0x02E8	0xF04DC003  	MOVFF       R3, _ITemp
0x02EC	0xF04EC004  	MOVFF       R4, _ITemp+1
;Esclavo.c,110 :: 		IHmd = RH_byte1;
0x02F0	0xF04FC024  	MOVFF       _RH_byte1, _IHmd
0x02F4	0x0E00      	MOVLW       0
0x02F6	0x6E50      	MOVWF       _IHmd+1 
;Esclavo.c,111 :: 		IHmd = (IHmd << 8) | RH_byte2;
0x02F8	0xF001C04F  	MOVFF       _IHmd, R1
0x02FC	0x6A00      	CLRF        R0 
0x02FE	0x5025      	MOVF        _RH_byte2, 0 
0x0300	0x1000      	IORWF       R0, 0 
0x0302	0x6E53      	MOVWF       FLOC__Calcular+2 
0x0304	0xF054C001  	MOVFF       R1, FLOC__Calcular+3
0x0308	0x0E00      	MOVLW       0
0x030A	0x1254      	IORWF       FLOC__Calcular+3, 1 
0x030C	0xF04FC053  	MOVFF       FLOC__Calcular+2, _IHmd
0x0310	0xF050C054  	MOVFF       FLOC__Calcular+3, _IHmd+1
;Esclavo.c,112 :: 		ITemp = ITemp/10;
0x0314	0xF000C003  	MOVFF       R3, R0
0x0318	0xF001C004  	MOVFF       R4, R1
0x031C	0x0E0A      	MOVLW       10
0x031E	0x6E04      	MOVWF       R4 
0x0320	0x0E00      	MOVLW       0
0x0322	0x6E05      	MOVWF       R5 
0x0324	0xDEE9      	RCALL       _Div_16X16_U
0x0326	0xF051C000  	MOVFF       R0, FLOC__Calcular
0x032A	0xF052C001  	MOVFF       R1, FLOC__Calcular+1
0x032E	0xF04DC051  	MOVFF       FLOC__Calcular, _ITemp
0x0332	0xF04EC052  	MOVFF       FLOC__Calcular+1, _ITemp+1
;Esclavo.c,113 :: 		IHmd = IHmd/10;
0x0336	0x0E0A      	MOVLW       10
0x0338	0x6E04      	MOVWF       R4 
0x033A	0x0E00      	MOVLW       0
0x033C	0x6E05      	MOVWF       R5 
0x033E	0xF000C053  	MOVFF       FLOC__Calcular+2, R0
0x0342	0xF001C054  	MOVFF       FLOC__Calcular+3, R1
0x0346	0xDED8      	RCALL       _Div_16X16_U
0x0348	0xF04FC000  	MOVFF       R0, _IHmd
0x034C	0xF050C001  	MOVFF       R1, _IHmd+1
;Esclavo.c,115 :: 		if (ITemp > 0X8000){                //Temperatura negativa
0x0350	0x5052      	MOVF        FLOC__Calcular+1, 0 
0x0352	0x0880      	SUBLW       128
0x0354	0xE102      	BNZ         L__Calcular81
0x0356	0x5051      	MOVF        FLOC__Calcular, 0 
0x0358	0x0800      	SUBLW       0
L__Calcular81:
0x035A	0xE204      	BC          L_Calcular31
;Esclavo.c,116 :: 		ITemp = 0;
0x035C	0x6A4D      	CLRF        _ITemp 
0x035E	0x6A4E      	CLRF        _ITemp+1 
;Esclavo.c,117 :: 		IHmd = 0;
0x0360	0x6A4F      	CLRF        _IHmd 
0x0362	0x6A50      	CLRF        _IHmd+1 
;Esclavo.c,118 :: 		}
L_Calcular31:
;Esclavo.c,120 :: 		} else {
0x0364	0xD008      	BRA         L_Calcular32
L_Calcular30:
;Esclavo.c,121 :: 		ITemp = 100;
0x0366	0x0E64      	MOVLW       100
0x0368	0x6E4D      	MOVWF       _ITemp 
0x036A	0x0E00      	MOVLW       0
0x036C	0x6E4E      	MOVWF       _ITemp+1 
;Esclavo.c,122 :: 		IHmd = 100;
0x036E	0x0E64      	MOVLW       100
0x0370	0x6E4F      	MOVWF       _IHmd 
0x0372	0x0E00      	MOVLW       0
0x0374	0x6E50      	MOVWF       _IHmd+1 
;Esclavo.c,123 :: 		}
L_Calcular32:
;Esclavo.c,124 :: 		} else {
0x0376	0xD008      	BRA         L_Calcular33
L_Calcular29:
;Esclavo.c,125 :: 		ITemp = 200;
0x0378	0x0EC8      	MOVLW       200
0x037A	0x6E4D      	MOVWF       _ITemp 
0x037C	0x0E00      	MOVLW       0
0x037E	0x6E4E      	MOVWF       _ITemp+1 
;Esclavo.c,126 :: 		IHmd = 200;
0x0380	0x0EC8      	MOVLW       200
0x0382	0x6E4F      	MOVWF       _IHmd 
0x0384	0x0E00      	MOVLW       0
0x0386	0x6E50      	MOVWF       _IHmd+1 
;Esclavo.c,127 :: 		}
L_Calcular33:
;Esclavo.c,129 :: 		chTemp = (unsigned char *) & ITemp;                 //Asocia el valor calculado de Temperatura al puntero chTemp
0x0388	0x0E4D      	MOVLW       _ITemp
0x038A	0x6E26      	MOVWF       _chTemp 
0x038C	0x0E00      	MOVLW       hi_addr(_ITemp)
0x038E	0x6E27      	MOVWF       _chTemp+1 
;Esclavo.c,130 :: 		chHmd = (unsigned char *) & IHmd;                   //Asocia el valor calculado de Temperatura al puntero chTemp
0x0390	0x0E4F      	MOVLW       _IHmd
0x0392	0x6E35      	MOVWF       _chHmd 
0x0394	0x0E00      	MOVLW       hi_addr(_IHmd)
0x0396	0x6E36      	MOVWF       _chHmd+1 
;Esclavo.c,132 :: 		}
L_end_Calcular:
0x0398	0x0012      	RETURN      0
; end of _Calcular
_Responder:
;Esclavo.c,134 :: 		void Responder(unsigned int Reg){
;Esclavo.c,136 :: 		if (Reg==0x01){
0x039A	0x0E00      	MOVLW       0
0x039C	0x1852      	XORWF       FARG_Responder_Reg+1, 0 
0x039E	0xE102      	BNZ         L__Responder83
0x03A0	0x0E01      	MOVLW       1
0x03A2	0x1851      	XORWF       FARG_Responder_Reg, 0 
L__Responder83:
0x03A4	0xE117      	BNZ         L_Responder34
;Esclavo.c,137 :: 		for (ir=4;ir>=3;ir--){
0x03A6	0x0E04      	MOVLW       4
0x03A8	0x6E21      	MOVWF       _ir 
L_Responder35:
0x03AA	0x0E03      	MOVLW       3
0x03AC	0x5C21      	SUBWF       _ir, 0 
0x03AE	0xE312      	BNC         L_Responder36
;Esclavo.c,138 :: 		Rspt[ir]=(*chTemp++);                        //Rellena los bytes 3 y 4 de la trama de respuesta con el dato de la Temperatura calculada
0x03B0	0x0E1B      	MOVLW       _Rspt
0x03B2	0x6EE1      	MOVWF       FSR1L 
0x03B4	0x0E00      	MOVLW       hi_addr(_Rspt)
0x03B6	0x6EE2      	MOVWF       FSR1H 
0x03B8	0x5021      	MOVF        _ir, 0 
0x03BA	0x26E1      	ADDWF       FSR1L, 1 
0x03BC	0xB0D8      	BTFSC       STATUS, 0 
0x03BE	0x2AE2      	INCF        FSR1H, 1 
0x03C0	0xFFE9C026  	MOVFF       _chTemp, FSR0L
0x03C4	0xFFEAC027  	MOVFF       _chTemp+1, FSR0H
0x03C8	0xFFE6CFEE  	MOVFF       POSTINC0, POSTINC1
0x03CC	0x4A26      	INFSNZ      _chTemp, 1 
0x03CE	0x2A27      	INCF        _chTemp+1, 1 
;Esclavo.c,137 :: 		for (ir=4;ir>=3;ir--){
0x03D0	0x0621      	DECF        _ir, 1 
;Esclavo.c,139 :: 		}
0x03D2	0xD7EB      	BRA         L_Responder35
L_Responder36:
;Esclavo.c,140 :: 		}
L_Responder34:
;Esclavo.c,142 :: 		if (Reg==0x02){
0x03D4	0x0E00      	MOVLW       0
0x03D6	0x1852      	XORWF       FARG_Responder_Reg+1, 0 
0x03D8	0xE102      	BNZ         L__Responder84
0x03DA	0x0E02      	MOVLW       2
0x03DC	0x1851      	XORWF       FARG_Responder_Reg, 0 
L__Responder84:
0x03DE	0xE117      	BNZ         L_Responder38
;Esclavo.c,143 :: 		for (ir=4;ir>=3;ir--){
0x03E0	0x0E04      	MOVLW       4
0x03E2	0x6E21      	MOVWF       _ir 
L_Responder39:
0x03E4	0x0E03      	MOVLW       3
0x03E6	0x5C21      	SUBWF       _ir, 0 
0x03E8	0xE312      	BNC         L_Responder40
;Esclavo.c,144 :: 		Rspt[ir]=(*chHmd++);                         //Rellena los bytes 3 y 4 de la trama de respuesta con el dato de la Humedad calculada
0x03EA	0x0E1B      	MOVLW       _Rspt
0x03EC	0x6EE1      	MOVWF       FSR1L 
0x03EE	0x0E00      	MOVLW       hi_addr(_Rspt)
0x03F0	0x6EE2      	MOVWF       FSR1H 
0x03F2	0x5021      	MOVF        _ir, 0 
0x03F4	0x26E1      	ADDWF       FSR1L, 1 
0x03F6	0xB0D8      	BTFSC       STATUS, 0 
0x03F8	0x2AE2      	INCF        FSR1H, 1 
0x03FA	0xFFE9C035  	MOVFF       _chHmd, FSR0L
0x03FE	0xFFEAC036  	MOVFF       _chHmd+1, FSR0H
0x0402	0xFFE6CFEE  	MOVFF       POSTINC0, POSTINC1
0x0406	0x4A35      	INFSNZ      _chHmd, 1 
0x0408	0x2A36      	INCF        _chHmd+1, 1 
;Esclavo.c,143 :: 		for (ir=4;ir>=3;ir--){
0x040A	0x0621      	DECF        _ir, 1 
;Esclavo.c,145 :: 		}
0x040C	0xD7EB      	BRA         L_Responder39
L_Responder40:
;Esclavo.c,146 :: 		}
L_Responder38:
;Esclavo.c,148 :: 		Rspt[2]=Ptcn[2];                                    //Rellena el byte 2 con el tipo de funcion de la trama de peticion
0x040E	0xF01DC031  	MOVFF       _Ptcn+2, _Rspt+2
;Esclavo.c,150 :: 		RC5_bit = 1;                                        //Establece el Max485 en modo de escritura
0x0412	0x8A82      	BSF         RC5_bit, BitPos(RC5_bit+0) 
;Esclavo.c,152 :: 		for (ir=0;ir<Rsize;ir++){
0x0414	0x6A21      	CLRF        _ir 
L_Responder42:
0x0416	0x0E06      	MOVLW       6
0x0418	0x5C21      	SUBWF       _ir, 0 
0x041A	0xE20D      	BC          L_Responder43
;Esclavo.c,153 :: 		UART1_Write(Rspt[ir]);                          //Envia la trama de respuesta
0x041C	0x0E1B      	MOVLW       _Rspt
0x041E	0x6EE9      	MOVWF       FSR0L 
0x0420	0x0E00      	MOVLW       hi_addr(_Rspt)
0x0422	0x6EEA      	MOVWF       FSR0H 
0x0424	0x5021      	MOVF        _ir, 0 
0x0426	0x26E9      	ADDWF       FSR0L, 1 
0x0428	0xB0D8      	BTFSC       STATUS, 0 
0x042A	0x2AEA      	INCF        FSR0H, 1 
0x042C	0xF055CFEE  	MOVFF       POSTINC0, FARG_UART1_Write_data_
0x0430	0xDE7E      	RCALL       _UART1_Write
;Esclavo.c,152 :: 		for (ir=0;ir<Rsize;ir++){
0x0432	0x2A21      	INCF        _ir, 1 
;Esclavo.c,154 :: 		}
0x0434	0xD7F0      	BRA         L_Responder42
L_Responder43:
;Esclavo.c,155 :: 		while(UART1_Tx_Idle()==0);                          //Espera hasta que se haya terminado de enviar todo el dato por UART antes de continuar
L_Responder45:
0x0436	0xDE82      	RCALL       _UART1_Tx_Idle
0x0438	0x5000      	MOVF        R0, 0 
0x043A	0x0A00      	XORLW       0
0x043C	0xE101      	BNZ         L_Responder46
0x043E	0xD7FB      	BRA         L_Responder45
L_Responder46:
;Esclavo.c,157 :: 		RC5_bit = 0;                                        //Establece el Max485 en modo de lectura
0x0440	0x9A82      	BCF         RC5_bit, BitPos(RC5_bit+0) 
;Esclavo.c,159 :: 		for (ir=3;ir<5;ir++){
0x0442	0x0E03      	MOVLW       3
0x0444	0x6E21      	MOVWF       _ir 
L_Responder47:
0x0446	0x0E05      	MOVLW       5
0x0448	0x5C21      	SUBWF       _ir, 0 
0x044A	0xE20B      	BC          L_Responder48
;Esclavo.c,160 :: 		Rspt[ir]=0;;                                    //Limpia la trama de respuesta
0x044C	0x0E1B      	MOVLW       _Rspt
0x044E	0x6EE1      	MOVWF       FSR1L 
0x0450	0x0E00      	MOVLW       hi_addr(_Rspt)
0x0452	0x6EE2      	MOVWF       FSR1H 
0x0454	0x5021      	MOVF        _ir, 0 
0x0456	0x26E1      	ADDWF       FSR1L, 1 
0x0458	0xB0D8      	BTFSC       STATUS, 0 
0x045A	0x2AE2      	INCF        FSR1H, 1 
0x045C	0x6AE6      	CLRF        POSTINC1 
;Esclavo.c,159 :: 		for (ir=3;ir<5;ir++){
0x045E	0x2A21      	INCF        _ir, 1 
;Esclavo.c,161 :: 		}
0x0460	0xD7F2      	BRA         L_Responder47
L_Responder48:
;Esclavo.c,163 :: 		}
L_end_Responder:
0x0462	0x0012      	RETURN      0
; end of _Responder
_main:
;Esclavo.c,189 :: 		void main() {
;Esclavo.c,191 :: 		Configuracion();
0x0464	0xDEE0      	RCALL       _Configuracion
;Esclavo.c,192 :: 		RC5_bit = 0;                                             //Inicia el Max 485 en modo lectura
0x0466	0x9A82      	BCF         RC5_bit, BitPos(RC5_bit+0) 
;Esclavo.c,194 :: 		Id = (PORTA&0x3F)+((PORTC&0x03)<<6);
0x0468	0x0E3F      	MOVLW       63
0x046A	0x1480      	ANDWF       PORTA, 0 
0x046C	0x6E04      	MOVWF       R4 
0x046E	0x0E03      	MOVLW       3
0x0470	0x1482      	ANDWF       PORTC, 0 
0x0472	0x6E03      	MOVWF       R3 
0x0474	0x0E06      	MOVLW       6
0x0476	0x6E02      	MOVWF       R2 
0x0478	0xF000C003  	MOVFF       R3, R0
0x047C	0x0E00      	MOVLW       0
0x047E	0x6E01      	MOVWF       R1 
0x0480	0x5002      	MOVF        R2, 0 
L__main87:
0x0482	0xE005      	BZ          L__main88
0x0484	0x3600      	RLCF        R0, 1 
0x0486	0x9000      	BCF         R0, 0 
0x0488	0x3601      	RLCF        R1, 1 
0x048A	0x0FFF      	ADDLW       255
0x048C	0xD7FA      	BRA         L__main87
L__main88:
0x048E	0x5004      	MOVF        R4, 0 
0x0490	0x2600      	ADDWF       R0, 1 
0x0492	0x0E00      	MOVLW       0
0x0494	0x2201      	ADDWFC      R1, 1 
0x0496	0xF02BC000  	MOVFF       R0, _Id
0x049A	0xF02CC001  	MOVFF       R1, _Id+1
;Esclavo.c,196 :: 		chDP = &DatoPtcn;                                        //Asocia el valor de DatoPtcn al puntero chDP
0x049E	0x0E28      	MOVLW       _DatoPtcn
0x04A0	0x6E2D      	MOVWF       _chDP 
0x04A2	0x0E00      	MOVLW       hi_addr(_DatoPtcn)
0x04A4	0x6E2E      	MOVWF       _chDP+1 
;Esclavo.c,197 :: 		ip=0;
0x04A6	0x6A2A      	CLRF        _ip 
;Esclavo.c,199 :: 		Rspt[0] = Hdr;                                           //Se rellena el primer byte de la trama de respuesta con el delimitador de inicio de trama
0x04A8	0x0E3A      	MOVLW       58
0x04AA	0x6E1B      	MOVWF       _Rspt 
;Esclavo.c,200 :: 		Rspt[1] = Id;                                            //Se rellena el segundo byte de la trama de repuesta con el Id del tipo de sensor
0x04AC	0xF01CC000  	MOVFF       R0, _Rspt+1
;Esclavo.c,201 :: 		Rspt[Rsize-1] = End;                                     //Se rellena el ultimo byte de la trama de repuesta con el delimitador de final de trama
0x04B0	0x0E0D      	MOVLW       13
0x04B2	0x6E20      	MOVWF       _Rspt+5 
;Esclavo.c,203 :: 		while (1){
L_main51:
;Esclavo.c,207 :: 		if (BanP==1){                                      //Verifica si se realizo una peticion
0x04B4	0x5037      	MOVF        _BanP, 0 
0x04B6	0x0A01      	XORLW       1
0x04B8	0xE145      	BNZ         L_main53
;Esclavo.c,208 :: 		if ((Ptcn[1]==Id)&&(Ptcn[Psize-1]==End)){    //Verifica el identificador de esclavo y el byte de final de trama
0x04BA	0x0E00      	MOVLW       0
0x04BC	0x182C      	XORWF       _Id+1, 0 
0x04BE	0xE102      	BNZ         L__main89
0x04C0	0x502B      	MOVF        _Id, 0 
0x04C2	0x1830      	XORWF       _Ptcn+1, 0 
L__main89:
0x04C4	0xE12F      	BNZ         L_main56
0x04C6	0x5034      	MOVF        _Ptcn+5, 0 
0x04C8	0x0A0D      	XORLW       13
0x04CA	0xE12C      	BNZ         L_main56
L__main69:
;Esclavo.c,210 :: 		Fcn = Ptcn[2];
0x04CC	0xF038C031  	MOVFF       _Ptcn+2, _Fcn
;Esclavo.c,212 :: 		if (Fcn==0x02){                           //02: Lee un registro especicfico (01:Temperatura, 02:Humedad)
0x04D0	0x5031      	MOVF        _Ptcn+2, 0 
0x04D2	0x0A02      	XORLW       2
0x04D4	0xE114      	BNZ         L_main57
;Esclavo.c,213 :: 		Calcular();                            //Realiza una secuencia de calculo
0x04D6	0xDEC8      	RCALL       _Calcular
;Esclavo.c,214 :: 		*chDP = Ptcn[4];                       //Almacena el byte 4 de la trama de peticion en el LSB de la variable DatoPtcn
0x04D8	0xFFE1C02D  	MOVFF       _chDP, FSR1L
0x04DC	0xFFE2C02E  	MOVFF       _chDP+1, FSR1H
0x04E0	0xFFE6C033  	MOVFF       _Ptcn+4, POSTINC1
;Esclavo.c,215 :: 		*(chDP+1) = Ptcn[3];                   //Almacena el byte 3 de la trama de peticion en el MSB de la variable DatoPtcn
0x04E4	0x0E01      	MOVLW       1
0x04E6	0x242D      	ADDWF       _chDP, 0 
0x04E8	0x6EE1      	MOVWF       FSR1L 
0x04EA	0x0E00      	MOVLW       0
0x04EC	0x202E      	ADDWFC      _chDP+1, 0 
0x04EE	0x6EE2      	MOVWF       FSR1H 
0x04F0	0xFFE6C032  	MOVFF       _Ptcn+3, POSTINC1
;Esclavo.c,216 :: 		Responder(DatoPtcn);                   //Envia la trama de repuesta con el valor del registro requerido
0x04F4	0xF051C028  	MOVFF       _DatoPtcn, FARG_Responder_Reg
0x04F8	0xF052C029  	MOVFF       _DatoPtcn+1, FARG_Responder_Reg+1
0x04FC	0xDF4E      	RCALL       _Responder
;Esclavo.c,217 :: 		}
L_main57:
;Esclavo.c,219 :: 		DatoPtcn = 0;                             //Limpia la variable
0x04FE	0x6A28      	CLRF        _DatoPtcn 
0x0500	0x6A29      	CLRF        _DatoPtcn+1 
;Esclavo.c,220 :: 		for (ipp=0;ipp<Psize;ipp++){
0x0502	0x6A1A      	CLRF        _ipp 
L_main58:
0x0504	0x0E06      	MOVLW       6
0x0506	0x5C1A      	SUBWF       _ipp, 0 
0x0508	0xE20B      	BC          L_main59
;Esclavo.c,221 :: 		Ptcn[ipp]=0;                          //Limpia la trama de peticion
0x050A	0x0E2F      	MOVLW       _Ptcn
0x050C	0x6EE1      	MOVWF       FSR1L 
0x050E	0x0E00      	MOVLW       hi_addr(_Ptcn)
0x0510	0x6EE2      	MOVWF       FSR1H 
0x0512	0x501A      	MOVF        _ipp, 0 
0x0514	0x26E1      	ADDWF       FSR1L, 1 
0x0516	0xB0D8      	BTFSC       STATUS, 0 
0x0518	0x2AE2      	INCF        FSR1H, 1 
0x051A	0x6AE6      	CLRF        POSTINC1 
;Esclavo.c,220 :: 		for (ipp=0;ipp<Psize;ipp++){
0x051C	0x2A1A      	INCF        _ipp, 1 
;Esclavo.c,222 :: 		}
0x051E	0xD7F2      	BRA         L_main58
L_main59:
;Esclavo.c,223 :: 		BanP = 0;                                 //Limpia la bandera de lectura de datos
0x0520	0x6A37      	CLRF        _BanP 
;Esclavo.c,225 :: 		} else{
0x0522	0xD010      	BRA         L_main61
L_main56:
;Esclavo.c,226 :: 		for (ipp=0;ipp<Psize;ipp++){
0x0524	0x6A1A      	CLRF        _ipp 
L_main62:
0x0526	0x0E06      	MOVLW       6
0x0528	0x5C1A      	SUBWF       _ipp, 0 
0x052A	0xE20B      	BC          L_main63
;Esclavo.c,227 :: 		Ptcn[ipp]=0;                       //Limpia la trama de peticion
0x052C	0x0E2F      	MOVLW       _Ptcn
0x052E	0x6EE1      	MOVWF       FSR1L 
0x0530	0x0E00      	MOVLW       hi_addr(_Ptcn)
0x0532	0x6EE2      	MOVWF       FSR1H 
0x0534	0x501A      	MOVF        _ipp, 0 
0x0536	0x26E1      	ADDWF       FSR1L, 1 
0x0538	0xB0D8      	BTFSC       STATUS, 0 
0x053A	0x2AE2      	INCF        FSR1H, 1 
0x053C	0x6AE6      	CLRF        POSTINC1 
;Esclavo.c,226 :: 		for (ipp=0;ipp<Psize;ipp++){
0x053E	0x2A1A      	INCF        _ipp, 1 
;Esclavo.c,228 :: 		}
0x0540	0xD7F2      	BRA         L_main62
L_main63:
;Esclavo.c,229 :: 		BanP = 0;                              //Limpia la bandera de lectura de datos
0x0542	0x6A37      	CLRF        _BanP 
;Esclavo.c,230 :: 		}
L_main61:
;Esclavo.c,231 :: 		}
L_main53:
;Esclavo.c,232 :: 		Delay_ms(50);                                      //Retraso necesario para que la Rpi tenga tiempo de recibir la trama de respuesta
0x0544	0x0E82      	MOVLW       130
0x0546	0x6E0C      	MOVWF       R12, 0
0x0548	0x0EDD      	MOVLW       221
0x054A	0x6E0D      	MOVWF       R13, 0
L_main65:
0x054C	0x2E0D      	DECFSZ      R13, 1, 0
0x054E	0xD7FE      	BRA         L_main65
0x0550	0x2E0C      	DECFSZ      R12, 1, 0
0x0552	0xD7FC      	BRA         L_main65
0x0554	0x0000      	NOP
0x0556	0x0000      	NOP
;Esclavo.c,234 :: 		}
0x0558	0xD7AD      	BRA         L_main51
;Esclavo.c,236 :: 		}
L_end_main:
0x055A	0xD7FF      	BRA         $+0
; end of _main
Symbol List:
//** Routines locations **
//ADDRESS    SIZE    PROCEDURE
//----------------------------------------------
0x0008     [154]    _interrupt
0x00A2      [42]    _StartSignal
0x00CC      [44]    _CheckResponse
0x00F8      [54]    _Div_16X16_U
0x012E      [14]    _UART1_Write
0x013C      [10]    _UART1_Tx_Idle
0x0146     [110]    _ReadData
0x01B4      [86]    _UART1_Init
0x020A      [10]    _UART1_Data_Ready
0x0214      [18]    _UART1_Read
0x0226      [66]    _Configuracion
0x0268     [306]    _Calcular
0x039A     [202]    _Responder
0x0464     [248]    _main
//** Variables locations ** 
//ADDRESS    SIZE    VARIABLE
//----------------------------------------------
0x0000       [1]    R0
0x0000       [1]    UART2_Init_tmp_L0
0x0000       [1]    UART1_Init_tmp_L0
0x0001       [1]    UART1_Read___tmp_UART1_Read_L0
0x0001       [1]    R1
0x0001       [1]    UART2_Read___tmp_UART2_Read_L0
0x0002       [1]    R2
0x0002       [1]    ReadData_i_L0
0x0003       [1]    R3
0x0003       [1]    ReadData_j_L0
0x0004       [1]    R4
0x0005       [1]    R5
0x0006       [1]    R6
0x0007       [1]    R7
0x0008       [1]    R8
0x0009       [1]    R9
0x000A       [1]    R10
0x000B       [1]    R11
0x000C       [1]    R12
0x000D       [1]    R13
0x000E       [1]    R14
0x000F       [1]    R15
0x0010       [1]    R16
0x0011       [1]    R17
0x0012       [1]    R18
0x0013       [1]    R19
0x0014       [1]    R20
0x0019       [1]    _Check
0x001A       [1]    _ipp
0x001B       [6]    _Rspt
0x0021       [1]    _ir
0x0022       [1]    _T_byte1
0x0023       [1]    _T_byte2
0x0024       [1]    _RH_byte1
0x0025       [1]    _RH_byte2
0x0026       [2]    _chTemp
0x0028       [2]    _DatoPtcn
0x002A       [1]    _ip
0x002B       [2]    _Id
0x002D       [2]    _chDP
0x002F       [6]    _Ptcn
0x0035       [2]    _chHmd
0x0037       [1]    _BanP
0x0038       [1]    _Fcn
0x0039       [2]    _Sum
0x003B       [4]    _UART_Rdy_Ptr
0x003F       [4]    _UART_Rd_Ptr
0x0043       [4]    _UART_Wr_Ptr
0x0047       [1]    _BanT
0x0048       [1]    _Dato
0x0049       [4]    _UART_Tx_Idle_Ptr
0x004D       [2]    _ITemp
0x004F       [2]    _IHmd
0x0051       [4]    FLOC__Calcular
0x0051       [2]    FARG_Responder_Reg
0x0055       [1]    FARG_UART1_Write_data_
0x0F38       [1]    ANSELA
0x0F39       [1]    ANSELB
0x0F3A       [1]    ANSELC
0x0F80       [1]    PORTA
0x0F81       [0]    RB4_bit
0x0F82       [0]    RC5_bit
0x0F82       [1]    PORTC
0x0F92       [1]    TRISA
0x0F93       [0]    TRISB4_bit
0x0F94       [0]    TRISC6_bit
0x0F94       [0]    TRISC7_bit
0x0F94       [0]    TRISC5_bit
0x0F94       [0]    TRISC0_bit
0x0F94       [0]    TRISC1_bit
0x0F9D       [1]    PIE1
0x0F9E       [1]    PIR1
0x0FAB       [1]    RCSTA
0x0FAC       [1]    TXSTA
0x0FAD       [1]    TXREG
0x0FAE       [1]    RCREG
0x0FAF       [1]    SPBRG
0x0FB0       [1]    SPBRGH
0x0FB8       [1]    BAUDCON
0x0FD8       [1]    STATUS
0x0FD9       [1]    FSR2L
0x0FDA       [1]    FSR2H
0x0FDE       [1]    POSTINC2
0x0FE0       [1]    BSR
0x0FE1       [1]    FSR1L
0x0FE2       [1]    FSR1H
0x0FE4       [1]    PREINC1
0x0FE6       [1]    POSTINC1
0x0FE7       [1]    INDF1
0x0FE8       [1]    WREG
0x0FE9       [1]    FSR0L
0x0FEA       [1]    FSR0H
0x0FEE       [1]    POSTINC0
0x0FF2       [1]    INTCON
0x0FF3       [1]    PRODL
0x0FF4       [1]    PRODH
0x0FF5       [1]    TABLAT
0x0FF6       [1]    TBLPTRL
0x0FF7       [1]    TBLPTRH
0x0FF8       [1]    TBLPTRU
