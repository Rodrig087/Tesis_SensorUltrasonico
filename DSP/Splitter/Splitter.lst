;  LST file generated by mikroListExporter - v.2.0 
; Date/Time: 21/02/2017 21:32:43
;----------------------------------------------

;Address Opcode 	ASM
0x0000	0xF001EF32  	GOTO        612
_interrupt:
;Splitter.c,28 :: 		void interrupt(void){
0x0008	0xF016C000  	MOVFF       R0, 22
0x000C	0xF015C001  	MOVFF       R1, 21
;Splitter.c,30 :: 		if(PIR1.F5==1){
0x0010	0xF017CFE1  	MOVFF       FSR1L, 23
0x0014	0xF018CFE2  	MOVFF       FSR1H, 24
0x0018	0xAA9E      	BTFSS       PIR1, 5 
0x001A	0xD03A      	BRA         L_interrupt0
;Splitter.c,31 :: 		ByPtcn = UART1_Read();                     //Lee el byte de peticion
0x001C	0xD8DD      	RCALL       _UART1_Read
0x001E	0xF033C000  	MOVFF       R0, _ByPtcn
;Splitter.c,32 :: 		if ((ByPtcn==Hdr)&&(ip==0)){               //Verifica que el primer dato en llegar sea el identificador de inicio de trama
0x0022	0x5000      	MOVF        R0, 0 
0x0024	0x0AEE      	XORLW       238
0x0026	0xE111      	BNZ         L_interrupt3
0x0028	0x503B      	MOVF        _ip, 0 
0x002A	0x0A00      	XORLW       0
0x002C	0xE10E      	BNZ         L_interrupt3
L__interrupt64:
;Splitter.c,33 :: 		BanAP = 1;                              //Activa la bandera de almacenamiento de trama de peticion
0x002E	0x0E01      	MOVLW       1
0x0030	0x6E32      	MOVWF       _BanAP 
;Splitter.c,34 :: 		Ptcn[ip] = ByPtcn;                      //Almacena el Dato en la trama de peticion
0x0032	0x0E36      	MOVLW       _Ptcn
0x0034	0x6EE1      	MOVWF       FSR1L 
0x0036	0x0E00      	MOVLW       hi_addr(_Ptcn)
0x0038	0x6EE2      	MOVWF       FSR1H 
0x003A	0x503B      	MOVF        _ip, 0 
0x003C	0x26E1      	ADDWF       FSR1L, 1 
0x003E	0x0E00      	MOVLW       0
0x0040	0xBE3B      	BTFSC       _ip, 7 
0x0042	0x0EFF      	MOVLW       255
0x0044	0x22E2      	ADDWFC      FSR1H, 1 
0x0046	0xFFE6C033  	MOVFF       _ByPtcn, POSTINC1
;Splitter.c,35 :: 		}
L_interrupt3:
;Splitter.c,36 :: 		if ((ByPtcn!=Hdr)&&(ip==0)){               //Verifica si el primer dato en llegar es diferente del identificador del inicio de trama
0x004A	0x5033      	MOVF        _ByPtcn, 0 
0x004C	0x0AEE      	XORLW       238
0x004E	0xE005      	BZ          L_interrupt6
0x0050	0x503B      	MOVF        _ip, 0 
0x0052	0x0A00      	XORLW       0
0x0054	0xE102      	BNZ         L_interrupt6
L__interrupt63:
;Splitter.c,37 :: 		ip=-1;                                  //Si es asi, reduce el subindice en una unidad
0x0056	0x0EFF      	MOVLW       255
0x0058	0x6E3B      	MOVWF       _ip 
;Splitter.c,38 :: 		}
L_interrupt6:
;Splitter.c,39 :: 		if ((BanAP==1)&&(ip!=0)){
0x005A	0x5032      	MOVF        _BanAP, 0 
0x005C	0x0A01      	XORLW       1
0x005E	0xE10F      	BNZ         L_interrupt9
0x0060	0x503B      	MOVF        _ip, 0 
0x0062	0x0A00      	XORLW       0
0x0064	0xE00C      	BZ          L_interrupt9
L__interrupt62:
;Splitter.c,40 :: 		Ptcn[ip] = ByPtcn;                      //Almacena el resto de datos en la trama de peticion si la bandera de almacenamiento de trama esta activada
0x0066	0x0E36      	MOVLW       _Ptcn
0x0068	0x6EE1      	MOVWF       FSR1L 
0x006A	0x0E00      	MOVLW       hi_addr(_Ptcn)
0x006C	0x6EE2      	MOVWF       FSR1H 
0x006E	0x503B      	MOVF        _ip, 0 
0x0070	0x26E1      	ADDWF       FSR1L, 1 
0x0072	0x0E00      	MOVLW       0
0x0074	0xBE3B      	BTFSC       _ip, 7 
0x0076	0x0EFF      	MOVLW       255
0x0078	0x22E2      	ADDWFC      FSR1H, 1 
0x007A	0xFFE6C033  	MOVFF       _ByPtcn, POSTINC1
;Splitter.c,41 :: 		}
L_interrupt9:
;Splitter.c,42 :: 		ip++;                                      //Aumenta el subindice una unidad
0x007E	0x2A3B      	INCF        _ip, 1 
;Splitter.c,43 :: 		if (ip==Psize){                            //Verifica que se haya terminado de llenar la trama de peticion
0x0080	0x503B      	MOVF        _ip, 0 
0x0082	0x0A04      	XORLW       4
0x0084	0xE104      	BNZ         L_interrupt10
;Splitter.c,44 :: 		BanLP = 1;                              //Habilita la bandera de lectura de peticion
0x0086	0x0E01      	MOVLW       1
0x0088	0x6E3C      	MOVWF       _BanLP 
;Splitter.c,45 :: 		BanAP = 0;                              //Limpia la bandera de almacenamiento de trama de peticion
0x008A	0x6A32      	CLRF        _BanAP 
;Splitter.c,46 :: 		ip=0;                                   //Limpia el subindice de la trama de peticion para permitir una nueva secuencia de recepcion de datos
0x008C	0x6A3B      	CLRF        _ip 
;Splitter.c,47 :: 		}
L_interrupt10:
;Splitter.c,48 :: 		PIR1.F5 = 0;                               //Limpia la bandera de interrupcion de UART1
0x008E	0x9A9E      	BCF         PIR1, 5 
;Splitter.c,49 :: 		}
L_interrupt0:
;Splitter.c,51 :: 		if (PIR3.F5==1){
0x0090	0xAAA4      	BTFSS       PIR3, 5 
0x0092	0xD03A      	BRA         L_interrupt11
;Splitter.c,52 :: 		ByRspt = UART2_Read();                     //Lee el byte de respuesta
0x0094	0xD898      	RCALL       _UART2_Read
0x0096	0xF035C000  	MOVFF       R0, _ByRspt
;Splitter.c,53 :: 		if ((ByRspt==Hdr)&&(ir==0)){               //Verifica que el primer dato en llegar sea el identificador de inicio de trama
0x009A	0x5000      	MOVF        R0, 0 
0x009C	0x0AEE      	XORLW       238
0x009E	0xE111      	BNZ         L_interrupt14
0x00A0	0x503A      	MOVF        _ir, 0 
0x00A2	0x0A00      	XORLW       0
0x00A4	0xE10E      	BNZ         L_interrupt14
L__interrupt61:
;Splitter.c,54 :: 		BanAR = 1;                              //Activa la bandera de almacenamiento de trama de respuesta
0x00A6	0x0E01      	MOVLW       1
0x00A8	0x6E34      	MOVWF       _BanAR 
;Splitter.c,55 :: 		Rspt[ir] = ByRspt;                      //Almacena el Dato en la trama de respuesta
0x00AA	0x0E22      	MOVLW       _Rspt
0x00AC	0x6EE1      	MOVWF       FSR1L 
0x00AE	0x0E00      	MOVLW       hi_addr(_Rspt)
0x00B0	0x6EE2      	MOVWF       FSR1H 
0x00B2	0x503A      	MOVF        _ir, 0 
0x00B4	0x26E1      	ADDWF       FSR1L, 1 
0x00B6	0x0E00      	MOVLW       0
0x00B8	0xBE3A      	BTFSC       _ir, 7 
0x00BA	0x0EFF      	MOVLW       255
0x00BC	0x22E2      	ADDWFC      FSR1H, 1 
0x00BE	0xFFE6C035  	MOVFF       _ByRspt, POSTINC1
;Splitter.c,56 :: 		}
L_interrupt14:
;Splitter.c,57 :: 		if ((ByRspt!=Hdr)&&(ir==0)){               //Verifica si el primer dato en llegar es diferente del identificador del inicio de trama
0x00C2	0x5035      	MOVF        _ByRspt, 0 
0x00C4	0x0AEE      	XORLW       238
0x00C6	0xE005      	BZ          L_interrupt17
0x00C8	0x503A      	MOVF        _ir, 0 
0x00CA	0x0A00      	XORLW       0
0x00CC	0xE102      	BNZ         L_interrupt17
L__interrupt60:
;Splitter.c,58 :: 		ir=-1;                                  //Si es asi, reduce el subindice en una unidad
0x00CE	0x0EFF      	MOVLW       255
0x00D0	0x6E3A      	MOVWF       _ir 
;Splitter.c,59 :: 		}
L_interrupt17:
;Splitter.c,60 :: 		if ((BanAR==1)&&(ir!=0)){
0x00D2	0x5034      	MOVF        _BanAR, 0 
0x00D4	0x0A01      	XORLW       1
0x00D6	0xE10F      	BNZ         L_interrupt20
0x00D8	0x503A      	MOVF        _ir, 0 
0x00DA	0x0A00      	XORLW       0
0x00DC	0xE00C      	BZ          L_interrupt20
L__interrupt59:
;Splitter.c,61 :: 		Rspt[ir] = ByRspt;                      //Almacena el resto de datos en la trama de respuesta si la bandera de almacenamiento de trama esta activada
0x00DE	0x0E22      	MOVLW       _Rspt
0x00E0	0x6EE1      	MOVWF       FSR1L 
0x00E2	0x0E00      	MOVLW       hi_addr(_Rspt)
0x00E4	0x6EE2      	MOVWF       FSR1H 
0x00E6	0x503A      	MOVF        _ir, 0 
0x00E8	0x26E1      	ADDWF       FSR1L, 1 
0x00EA	0x0E00      	MOVLW       0
0x00EC	0xBE3A      	BTFSC       _ir, 7 
0x00EE	0x0EFF      	MOVLW       255
0x00F0	0x22E2      	ADDWFC      FSR1H, 1 
0x00F2	0xFFE6C035  	MOVFF       _ByRspt, POSTINC1
;Splitter.c,62 :: 		}
L_interrupt20:
;Splitter.c,63 :: 		ir++;                                      //Aumenta el subindice una unidad
0x00F6	0x2A3A      	INCF        _ir, 1 
;Splitter.c,64 :: 		if (ir==Rsize){                            //Verifica que se haya terminado de llenar la trama de respuesta
0x00F8	0x503A      	MOVF        _ir, 0 
0x00FA	0x0A06      	XORLW       6
0x00FC	0xE104      	BNZ         L_interrupt21
;Splitter.c,65 :: 		BanLR = 1;                              //Habilita la bandera de lectura de respuesta
0x00FE	0x0E01      	MOVLW       1
0x0100	0x6E28      	MOVWF       _BanLR 
;Splitter.c,66 :: 		BanAR = 0;                              //Limpia la bandera de almacenamiento de trama de respuesta
0x0102	0x6A34      	CLRF        _BanAR 
;Splitter.c,67 :: 		ir=0;                                   //Limpia el subindice de la trama de respuesta para permitir una nueva secuencia de recepcion de datos
0x0104	0x6A3A      	CLRF        _ir 
;Splitter.c,68 :: 		}
L_interrupt21:
;Splitter.c,69 :: 		PIR3.F5 = 0;                               //Limpia la bandera de interrupcion de UART2
0x0106	0x9AA4      	BCF         PIR3, 5 
;Splitter.c,70 :: 		}
L_interrupt11:
;Splitter.c,73 :: 		}
L_end_interrupt:
L__interrupt70:
0x0108	0xF000C016  	MOVFF       22, R0
0x010C	0xF001C015  	MOVFF       21, R1
0x0110	0xFFE1C017  	MOVFF       23, FSR1L
0x0114	0xFFE2C018  	MOVFF       24, FSR1H
0x0118	0x0011      	RETFIE      1
; end of _interrupt
_UART1_Init:
;__Lib_UART_c67b67.c,20 :: 		
;__Lib_UART_c67b67.c,23 :: 		
0x011A	0x0E56      	MOVLW       _UART1_Write
0x011C	0x6E19      	MOVWF       _UART_Wr_Ptr 
0x011E	0x0E02      	MOVLW       hi_addr(_UART1_Write)
0x0120	0x6E1A      	MOVWF       _UART_Wr_Ptr+1 
0x0122	0x0E3D      	MOVLW       FARG_UART1_Write_data_
0x0124	0x6E1B      	MOVWF       _UART_Wr_Ptr+2 
0x0126	0x0E00      	MOVLW       hi_addr(FARG_UART1_Write_data_)
0x0128	0x6E1C      	MOVWF       _UART_Wr_Ptr+3 
;__Lib_UART_c67b67.c,24 :: 		
0x012A	0x0ED8      	MOVLW       _UART1_Read
0x012C	0x6E1D      	MOVWF       _UART_Rd_Ptr 
0x012E	0x0E01      	MOVLW       hi_addr(_UART1_Read)
0x0130	0x6E1E      	MOVWF       _UART_Rd_Ptr+1 
0x0132	0x0E00      	MOVLW       0
0x0134	0x6E1F      	MOVWF       _UART_Rd_Ptr+2 
0x0136	0x0E00      	MOVLW       0
0x0138	0x6E20      	MOVWF       _UART_Rd_Ptr+3 
;__Lib_UART_c67b67.c,25 :: 		
0x013A	0x0EFF      	MOVLW       _UART1_Data_Ready
0x013C	0x6E2D      	MOVWF       _UART_Rdy_Ptr 
0x013E	0x0EFF      	MOVLW       hi_addr(_UART1_Data_Ready)
0x0140	0x6E2E      	MOVWF       _UART_Rdy_Ptr+1 
0x0142	0x0E00      	MOVLW       0
0x0144	0x6E2F      	MOVWF       _UART_Rdy_Ptr+2 
0x0146	0x0E00      	MOVLW       0
0x0148	0x6E30      	MOVWF       _UART_Rdy_Ptr+3 
;__Lib_UART_c67b67.c,26 :: 		
0x014A	0x0EFF      	MOVLW       _UART1_Tx_Idle
0x014C	0x6E29      	MOVWF       _UART_Tx_Idle_Ptr 
0x014E	0x0EFF      	MOVLW       hi_addr(_UART1_Tx_Idle)
0x0150	0x6E2A      	MOVWF       _UART_Tx_Idle_Ptr+1 
0x0152	0x0E00      	MOVLW       0
0x0154	0x6E2B      	MOVWF       _UART_Tx_Idle_Ptr+2 
0x0156	0x0E00      	MOVLW       0
0x0158	0x6E2C      	MOVWF       _UART_Tx_Idle_Ptr+3 
;__Lib_UART_c67b67.c,28 :: 		
0x015A	0x8AAC      	BSF         TXSTA, 5 
;__Lib_UART_c67b67.c,29 :: 		
0x015C	0x0E90      	MOVLW       144
0x015E	0x6EAB      	MOVWF       RCSTA 
;__Lib_UART_c67b67.c,30 :: 		
0x0160	0x8E94      	BSF         TRISC7_bit, BitPos(TRISC7_bit+0) 
;__Lib_UART_c67b67.c,31 :: 		
0x0162	0x9C94      	BCF         TRISC6_bit, BitPos(TRISC6_bit+0) 
;__Lib_UART_c67b67.c,33 :: 		
L_UART1_Init0:
0x0164	0xAA9E      	BTFSS       PIR1, 5 
0x0166	0xD003      	BRA         L_UART1_Init1
;__Lib_UART_c67b67.c,34 :: 		
0x0168	0xF000CFAE  	MOVFF       RCREG, R0
0x016C	0xD7FB      	BRA         L_UART1_Init0
L_UART1_Init1:
;__Lib_UART_c67b67.c,35 :: 		
L_end_UART1_Init:
0x016E	0x0012      	RETURN      0
; end of _UART1_Init
_UART2_Init:
;__Lib_UART_c67b67.c,117 :: 		
;__Lib_UART_c67b67.c,120 :: 		
0x0170	0x0EEA      	MOVLW       _UART2_Write
0x0172	0x6E19      	MOVWF       _UART_Wr_Ptr 
0x0174	0x0E01      	MOVLW       hi_addr(_UART2_Write)
0x0176	0x6E1A      	MOVWF       _UART_Wr_Ptr+1 
0x0178	0x0E3D      	MOVLW       FARG_UART2_Write_data_
0x017A	0x6E1B      	MOVWF       _UART_Wr_Ptr+2 
0x017C	0x0E00      	MOVLW       hi_addr(FARG_UART2_Write_data_)
0x017E	0x6E1C      	MOVWF       _UART_Wr_Ptr+3 
;__Lib_UART_c67b67.c,121 :: 		
0x0180	0x0EC6      	MOVLW       _UART2_Read
0x0182	0x6E1D      	MOVWF       _UART_Rd_Ptr 
0x0184	0x0E01      	MOVLW       hi_addr(_UART2_Read)
0x0186	0x6E1E      	MOVWF       _UART_Rd_Ptr+1 
0x0188	0x0E00      	MOVLW       0
0x018A	0x6E1F      	MOVWF       _UART_Rd_Ptr+2 
0x018C	0x0E00      	MOVLW       0
0x018E	0x6E20      	MOVWF       _UART_Rd_Ptr+3 
;__Lib_UART_c67b67.c,122 :: 		
0x0190	0x0EFF      	MOVLW       _UART2_Data_Ready
0x0192	0x6E2D      	MOVWF       _UART_Rdy_Ptr 
0x0194	0x0EFF      	MOVLW       hi_addr(_UART2_Data_Ready)
0x0196	0x6E2E      	MOVWF       _UART_Rdy_Ptr+1 
0x0198	0x0E00      	MOVLW       0
0x019A	0x6E2F      	MOVWF       _UART_Rdy_Ptr+2 
0x019C	0x0E00      	MOVLW       0
0x019E	0x6E30      	MOVWF       _UART_Rdy_Ptr+3 
;__Lib_UART_c67b67.c,123 :: 		
0x01A0	0x0EFF      	MOVLW       _UART2_Tx_Idle
0x01A2	0x6E29      	MOVWF       _UART_Tx_Idle_Ptr 
0x01A4	0x0EFF      	MOVLW       hi_addr(_UART2_Tx_Idle)
0x01A6	0x6E2A      	MOVWF       _UART_Tx_Idle_Ptr+1 
0x01A8	0x0E00      	MOVLW       0
0x01AA	0x6E2B      	MOVWF       _UART_Tx_Idle_Ptr+2 
0x01AC	0x0E00      	MOVLW       0
0x01AE	0x6E2C      	MOVWF       _UART_Tx_Idle_Ptr+3 
;__Lib_UART_c67b67.c,125 :: 		
0x01B0	0x8A72      	BSF         TXSTA2, 5 
;__Lib_UART_c67b67.c,126 :: 		
0x01B2	0x0E90      	MOVLW       144
0x01B4	0x6E71      	MOVWF       RCSTA2 
;__Lib_UART_c67b67.c,127 :: 		
0x01B6	0x8E93      	BSF         TRISB7_bit, BitPos(TRISB7_bit+0) 
;__Lib_UART_c67b67.c,128 :: 		
0x01B8	0x9C93      	BCF         TRISB6_bit, BitPos(TRISB6_bit+0) 
;__Lib_UART_c67b67.c,130 :: 		
L_UART2_Init16:
0x01BA	0xAAA4      	BTFSS       RC2IF_bit, BitPos(RC2IF_bit+0) 
0x01BC	0xD003      	BRA         L_UART2_Init17
;__Lib_UART_c67b67.c,131 :: 		
0x01BE	0xF000CF74  	MOVFF       RCREG2, R0
0x01C2	0xD7FB      	BRA         L_UART2_Init16
L_UART2_Init17:
;__Lib_UART_c67b67.c,132 :: 		
L_end_UART2_Init:
0x01C4	0x0012      	RETURN      0
; end of _UART2_Init
_UART2_Read:
;__Lib_UART_c67b67.c,141 :: 		
;__Lib_UART_c67b67.c,144 :: 		
0x01C6	0xF001CF74  	MOVFF       RCREG2, R1
;__Lib_UART_c67b67.c,145 :: 		
0x01CA	0xA271      	BTFSS       RCSTA2, 1 
0x01CC	0xD002      	BRA         L_UART2_Read18
;__Lib_UART_c67b67.c,146 :: 		
0x01CE	0x9871      	BCF         RCSTA2, 4 
;__Lib_UART_c67b67.c,147 :: 		
0x01D0	0x8871      	BSF         RCSTA2, 4 
;__Lib_UART_c67b67.c,148 :: 		
L_UART2_Read18:
;__Lib_UART_c67b67.c,149 :: 		
0x01D2	0xF000C001  	MOVFF       R1, R0
;__Lib_UART_c67b67.c,150 :: 		
L_end_UART2_Read:
0x01D6	0x0012      	RETURN      0
; end of _UART2_Read
_UART1_Read:
;__Lib_UART_c67b67.c,44 :: 		
;__Lib_UART_c67b67.c,47 :: 		
0x01D8	0xF001CFAE  	MOVFF       RCREG, R1
;__Lib_UART_c67b67.c,48 :: 		
0x01DC	0xA2AB      	BTFSS       RCSTA, 1 
0x01DE	0xD002      	BRA         L_UART1_Read2
;__Lib_UART_c67b67.c,49 :: 		
0x01E0	0x98AB      	BCF         RCSTA, 4 
;__Lib_UART_c67b67.c,50 :: 		
0x01E2	0x88AB      	BSF         RCSTA, 4 
;__Lib_UART_c67b67.c,51 :: 		
L_UART1_Read2:
;__Lib_UART_c67b67.c,52 :: 		
0x01E4	0xF000C001  	MOVFF       R1, R0
;__Lib_UART_c67b67.c,53 :: 		
L_end_UART1_Read:
0x01E8	0x0012      	RETURN      0
; end of _UART1_Read
_UART2_Write:
;__Lib_UART_c67b67.c,160 :: 		
;__Lib_UART_c67b67.c,161 :: 		
L_UART2_Write19:
0x01EA	0xB272      	BTFSC       TXSTA2, 1 
0x01EC	0xD001      	BRA         L_UART2_Write20
;__Lib_UART_c67b67.c,162 :: 		
0x01EE	0xD7FD      	BRA         L_UART2_Write19
L_UART2_Write20:
;__Lib_UART_c67b67.c,163 :: 		
0x01F0	0xFF73C03D  	MOVFF       FARG_UART2_Write_data_, TXREG2
;__Lib_UART_c67b67.c,164 :: 		
L_end_UART2_Write:
0x01F4	0x0012      	RETURN      0
; end of _UART2_Write
_Configuracion:
;Splitter.c,76 :: 		void Configuracion(){
;Splitter.c,78 :: 		ANSELB = 0;                                       //Configura PORTB como digital
0x01F6	0x010F      	MOVLB       15
0x01F8	0x6B39      	CLRF        ANSELB, 1
;Splitter.c,79 :: 		ANSELC = 0;                                       //Configura PORTC como digital
0x01FA	0x6B3A      	CLRF        ANSELC, 1
;Splitter.c,81 :: 		TRISB5_bit = 0;                                   //Configura el pin B5 como salida
0x01FC	0x9A93      	BCF         TRISB5_bit, BitPos(TRISB5_bit+0) 
;Splitter.c,82 :: 		TRISC5_bit = 0;                                   //Configura el pin C5 como salida
0x01FE	0x9A94      	BCF         TRISC5_bit, BitPos(TRISC5_bit+0) 
;Splitter.c,84 :: 		INTCON.GIE = 1;                                   //Habilita las interrupciones globales
0x0200	0x8EF2      	BSF         INTCON, 7 
;Splitter.c,85 :: 		INTCON.PEIE = 1;                                  //Habilita las interrupciones perifericas
0x0202	0x8CF2      	BSF         INTCON, 6 
;Splitter.c,88 :: 		PIE1.RC1IE = 1;                                   //Habilita la interrupcion en UART1 receive
0x0204	0x8A9D      	BSF         PIE1, 5 
;Splitter.c,89 :: 		PIR1.F5 = 0;                                      //Limpia la bandera de interrupcion
0x0206	0x9A9E      	BCF         PIR1, 5 
;Splitter.c,90 :: 		PIE3.RC2IE = 1;                                   //Habilita la interrupcion en UART2 receive
0x0208	0x8AA3      	BSF         PIE3, 5 
;Splitter.c,91 :: 		PIR3.F5 = 0;                                      //Limpia la bandera de interrupcion
0x020A	0x9AA4      	BCF         PIR3, 5 
;Splitter.c,94 :: 		UART1_Init(9600);                                 //Inicializa el UART1 a 9600 bps
0x020C	0x86B8      	BSF         BAUDCON, 3, 0
0x020E	0x0E02      	MOVLW       2
0x0210	0x6EB0      	MOVWF       SPBRGH 
0x0212	0x0E08      	MOVLW       8
0x0214	0x6EAF      	MOVWF       SPBRG 
0x0216	0x84AC      	BSF         TXSTA, 2, 0
0x0218	0xDF80      	RCALL       _UART1_Init
;Splitter.c,95 :: 		UART2_Init(9600);                                 //Inicializa el UART2 a 9600 bps
0x021A	0x8670      	BSF         BAUDCON2, 3, 0
0x021C	0x0E02      	MOVLW       2
0x021E	0x6E76      	MOVWF       SPBRGH2 
0x0220	0x0E08      	MOVLW       8
0x0222	0x6E75      	MOVWF       SPBRG2 
0x0224	0x8472      	BSF         TXSTA2, 2, 0
0x0226	0xDFA4      	RCALL       _UART2_Init
;Splitter.c,96 :: 		Delay_ms(100);                                    //Espera para que el modulo UART se estabilice
0x0228	0x0E03      	MOVLW       3
0x022A	0x6E0B      	MOVWF       R11, 0
0x022C	0x0E8A      	MOVLW       138
0x022E	0x6E0C      	MOVWF       R12, 0
0x0230	0x0E55      	MOVLW       85
0x0232	0x6E0D      	MOVWF       R13, 0
L_Configuracion22:
0x0234	0x2E0D      	DECFSZ      R13, 1, 0
0x0236	0xD7FE      	BRA         L_Configuracion22
0x0238	0x2E0C      	DECFSZ      R12, 1, 0
0x023A	0xD7FC      	BRA         L_Configuracion22
0x023C	0x2E0B      	DECFSZ      R11, 1, 0
0x023E	0xD7FA      	BRA         L_Configuracion22
0x0240	0x0000      	NOP
0x0242	0x0000      	NOP
;Splitter.c,98 :: 		}
L_end_Configuracion:
0x0244	0x0012      	RETURN      0
; end of _Configuracion
___CC2DW:
;__Lib_System.c,21 :: 		
;__Lib_System.c,23 :: 		
_CC2DL_Loop1:
;__Lib_System.c,24 :: 		
0x0246	0x0009      	TBLRD*+
;__Lib_System.c,25 :: 		
0x0248	0xFFE6CFF5  	MOVFF       TABLAT, POSTINC1
;__Lib_System.c,26 :: 		
0x024C	0x0600      	DECF        R0, 1, 0
;__Lib_System.c,27 :: 		
0x024E	0xE1FB      	BNZ         _CC2DL_Loop1
;__Lib_System.c,28 :: 		
0x0250	0x0601      	DECF        R1, 1, 0
;__Lib_System.c,29 :: 		
0x0252	0xE1F9      	BNZ         _CC2DL_Loop1
;__Lib_System.c,31 :: 		
L_end___CC2DW:
0x0254	0x0012      	RETURN      0
; end of ___CC2DW
_UART1_Write:
;__Lib_UART_c67b67.c,63 :: 		
;__Lib_UART_c67b67.c,64 :: 		
L_UART1_Write3:
0x0256	0xB2AC      	BTFSC       TXSTA, 1 
0x0258	0xD002      	BRA         L_UART1_Write4
;__Lib_UART_c67b67.c,65 :: 		
0x025A	0x0000      	NOP
0x025C	0xD7FC      	BRA         L_UART1_Write3
L_UART1_Write4:
;__Lib_UART_c67b67.c,66 :: 		
0x025E	0xFFADC03D  	MOVFF       FARG_UART1_Write_data_, TXREG
;__Lib_UART_c67b67.c,67 :: 		
L_end_UART1_Write:
0x0262	0x0012      	RETURN      0
; end of _UART1_Write
_main:
;Splitter.c,100 :: 		void main() {
;Splitter.c,102 :: 		Configuracion();
0x0264	0xDFC8      	RCALL       _Configuracion
;Splitter.c,103 :: 		ip=0;
0x0266	0x6A3B      	CLRF        _ip 
;Splitter.c,104 :: 		ir=0;
0x0268	0x6A3A      	CLRF        _ir 
;Splitter.c,106 :: 		while (1){
L_main23:
;Splitter.c,108 :: 		if (BanLP==1){                                          //Verifica la bandera de lectura de la trama de peticion
0x026A	0x503C      	MOVF        _BanLP, 0 
0x026C	0x0A01      	XORLW       1
0x026E	0xE150      	BNZ         L_main25
;Splitter.c,109 :: 		if ((Ptcn[0]==Hdr)&&(Ptcn[Psize-1]==End)){           //Verifica que el primer y el ultimo elemento de la trama correspondan a los delimitadores de inicio y fin de trama
0x0270	0x5036      	MOVF        _Ptcn, 0 
0x0272	0x0AEE      	XORLW       238
0x0274	0xE137      	BNZ         L_main28
0x0276	0x5039      	MOVF        _Ptcn+3, 0 
0x0278	0x0AFF      	XORLW       255
0x027A	0xE134      	BNZ         L_main28
L__main68:
;Splitter.c,110 :: 		if ((Ptcn[1]==TP)&&(Ptcn[2]==Id)){                //Verifica el identificador de tipo de sensor y el identificador de esclavo
0x027C	0x5037      	MOVF        _Ptcn+1, 0 
0x027E	0x0A01      	XORLW       1
0x0280	0xE130      	BNZ         L_main31
0x0282	0x5038      	MOVF        _Ptcn+2, 0 
0x0284	0x0A07      	XORLW       7
0x0286	0xE12D      	BNZ         L_main31
L__main67:
;Splitter.c,112 :: 		for (ipp=0;ipp<(Psize);ipp++){
0x0288	0x6A31      	CLRF        _ipp 
L_main32:
0x028A	0x0E80      	MOVLW       128
0x028C	0x1831      	XORWF       _ipp, 0 
0x028E	0x6E00      	MOVWF       R0 
0x0290	0x0E80      	MOVLW       128
0x0292	0x0A04      	XORLW       4
0x0294	0x5C00      	SUBWF       R0, 0 
0x0296	0xE20F      	BC          L_main33
;Splitter.c,113 :: 		UART2_Write(Ptcn[ipp]);                   //Reenvia la trama de peticion a travez del UART2
0x0298	0x0E36      	MOVLW       _Ptcn
0x029A	0x6EE9      	MOVWF       FSR0L 
0x029C	0x0E00      	MOVLW       hi_addr(_Ptcn)
0x029E	0x6EEA      	MOVWF       FSR0H 
0x02A0	0x5031      	MOVF        _ipp, 0 
0x02A2	0x26E9      	ADDWF       FSR0L, 1 
0x02A4	0x0E00      	MOVLW       0
0x02A6	0xBE31      	BTFSC       _ipp, 7 
0x02A8	0x0EFF      	MOVLW       255
0x02AA	0x22EA      	ADDWFC      FSR0H, 1 
0x02AC	0xF03DCFEE  	MOVFF       POSTINC0, FARG_UART2_Write_data_
0x02B0	0xDF9C      	RCALL       _UART2_Write
;Splitter.c,112 :: 		for (ipp=0;ipp<(Psize);ipp++){
0x02B2	0x2A31      	INCF        _ipp, 1 
;Splitter.c,114 :: 		}
0x02B4	0xD7EA      	BRA         L_main32
L_main33:
;Splitter.c,115 :: 		for (ipp=0;ipp<(Psize);ipp++){
0x02B6	0x6A31      	CLRF        _ipp 
L_main35:
0x02B8	0x0E80      	MOVLW       128
0x02BA	0x1831      	XORWF       _ipp, 0 
0x02BC	0x6E00      	MOVWF       R0 
0x02BE	0x0E80      	MOVLW       128
0x02C0	0x0A04      	XORLW       4
0x02C2	0x5C00      	SUBWF       R0, 0 
0x02C4	0xE20D      	BC          L_main36
;Splitter.c,116 :: 		Ptcn[ipp]=0;;                             //Limpia la trama de peticion
0x02C6	0x0E36      	MOVLW       _Ptcn
0x02C8	0x6EE1      	MOVWF       FSR1L 
0x02CA	0x0E00      	MOVLW       hi_addr(_Ptcn)
0x02CC	0x6EE2      	MOVWF       FSR1H 
0x02CE	0x5031      	MOVF        _ipp, 0 
0x02D0	0x26E1      	ADDWF       FSR1L, 1 
0x02D2	0x0E00      	MOVLW       0
0x02D4	0xBE31      	BTFSC       _ipp, 7 
0x02D6	0x0EFF      	MOVLW       255
0x02D8	0x22E2      	ADDWFC      FSR1H, 1 
0x02DA	0x6AE6      	CLRF        POSTINC1 
;Splitter.c,115 :: 		for (ipp=0;ipp<(Psize);ipp++){
0x02DC	0x2A31      	INCF        _ipp, 1 
;Splitter.c,117 :: 		}
0x02DE	0xD7EC      	BRA         L_main35
L_main36:
;Splitter.c,118 :: 		BanLP = 0;                                     //Limpia la bandera de lectura de la trama de peticion
0x02E0	0x6A3C      	CLRF        _BanLP 
;Splitter.c,120 :: 		}
L_main31:
;Splitter.c,121 :: 		} else {
0x02E2	0xD016      	BRA         L_main38
L_main28:
;Splitter.c,123 :: 		for (ipp=0;ipp<(Psize-1);ipp++){
0x02E4	0x6A31      	CLRF        _ipp 
L_main39:
0x02E6	0x0E80      	MOVLW       128
0x02E8	0x1831      	XORWF       _ipp, 0 
0x02EA	0x6E00      	MOVWF       R0 
0x02EC	0x0E80      	MOVLW       128
0x02EE	0x0A03      	XORLW       3
0x02F0	0x5C00      	SUBWF       R0, 0 
0x02F2	0xE20D      	BC          L_main40
;Splitter.c,124 :: 		Ptcn[ipp]=0;;                            //Limpia la trama de peticion
0x02F4	0x0E36      	MOVLW       _Ptcn
0x02F6	0x6EE1      	MOVWF       FSR1L 
0x02F8	0x0E00      	MOVLW       hi_addr(_Ptcn)
0x02FA	0x6EE2      	MOVWF       FSR1H 
0x02FC	0x5031      	MOVF        _ipp, 0 
0x02FE	0x26E1      	ADDWF       FSR1L, 1 
0x0300	0x0E00      	MOVLW       0
0x0302	0xBE31      	BTFSC       _ipp, 7 
0x0304	0x0EFF      	MOVLW       255
0x0306	0x22E2      	ADDWFC      FSR1H, 1 
0x0308	0x6AE6      	CLRF        POSTINC1 
;Splitter.c,123 :: 		for (ipp=0;ipp<(Psize-1);ipp++){
0x030A	0x2A31      	INCF        _ipp, 1 
;Splitter.c,125 :: 		}
0x030C	0xD7EC      	BRA         L_main39
L_main40:
;Splitter.c,126 :: 		BanLP = 0;                                    //Limpia la bandera de lectura de la trama de peticion
0x030E	0x6A3C      	CLRF        _BanLP 
;Splitter.c,128 :: 		}
L_main38:
;Splitter.c,129 :: 		}
L_main25:
;Splitter.c,132 :: 		if (BanLR==1){                                          //Verifica la bandera de lectura de la trama de respuesta
0x0310	0x5028      	MOVF        _BanLR, 0 
0x0312	0x0A01      	XORLW       1
0x0314	0xE150      	BNZ         L_main42
;Splitter.c,133 :: 		if ((Rspt[0]==Hdr)&&(Rspt[Rsize-1]==End)){           //Verifica que el primer y el ultimo elemento de la trama correspondan a los delimitadores de inicio y fin de trama
0x0316	0x5022      	MOVF        _Rspt, 0 
0x0318	0x0AEE      	XORLW       238
0x031A	0xE137      	BNZ         L_main45
0x031C	0x5027      	MOVF        _Rspt+5, 0 
0x031E	0x0AFF      	XORLW       255
0x0320	0xE134      	BNZ         L_main45
L__main66:
;Splitter.c,134 :: 		if ((Rspt[1]==TP)&&(Rspt[2]==Id)){                //Verifica el identificador de tipo de sensor y el identificador de esclavo
0x0322	0x5023      	MOVF        _Rspt+1, 0 
0x0324	0x0A01      	XORLW       1
0x0326	0xE130      	BNZ         L_main48
0x0328	0x5024      	MOVF        _Rspt+2, 0 
0x032A	0x0A07      	XORLW       7
0x032C	0xE12D      	BNZ         L_main48
L__main65:
;Splitter.c,136 :: 		for (irr=0;irr<(Rsize);irr++){
0x032E	0x6A21      	CLRF        _irr 
L_main49:
0x0330	0x0E80      	MOVLW       128
0x0332	0x1821      	XORWF       _irr, 0 
0x0334	0x6E00      	MOVWF       R0 
0x0336	0x0E80      	MOVLW       128
0x0338	0x0A06      	XORLW       6
0x033A	0x5C00      	SUBWF       R0, 0 
0x033C	0xE20F      	BC          L_main50
;Splitter.c,137 :: 		UART1_Write(Rspt[irr]);                  //Reenvia la trama de respuesta a travez del UART1
0x033E	0x0E22      	MOVLW       _Rspt
0x0340	0x6EE9      	MOVWF       FSR0L 
0x0342	0x0E00      	MOVLW       hi_addr(_Rspt)
0x0344	0x6EEA      	MOVWF       FSR0H 
0x0346	0x5021      	MOVF        _irr, 0 
0x0348	0x26E9      	ADDWF       FSR0L, 1 
0x034A	0x0E00      	MOVLW       0
0x034C	0xBE21      	BTFSC       _irr, 7 
0x034E	0x0EFF      	MOVLW       255
0x0350	0x22EA      	ADDWFC      FSR0H, 1 
0x0352	0xF03DCFEE  	MOVFF       POSTINC0, FARG_UART1_Write_data_
0x0356	0xDF7F      	RCALL       _UART1_Write
;Splitter.c,136 :: 		for (irr=0;irr<(Rsize);irr++){
0x0358	0x2A21      	INCF        _irr, 1 
;Splitter.c,138 :: 		}
0x035A	0xD7EA      	BRA         L_main49
L_main50:
;Splitter.c,139 :: 		for (irr=0;irr<(Rsize);irr++){
0x035C	0x6A21      	CLRF        _irr 
L_main52:
0x035E	0x0E80      	MOVLW       128
0x0360	0x1821      	XORWF       _irr, 0 
0x0362	0x6E00      	MOVWF       R0 
0x0364	0x0E80      	MOVLW       128
0x0366	0x0A06      	XORLW       6
0x0368	0x5C00      	SUBWF       R0, 0 
0x036A	0xE20D      	BC          L_main53
;Splitter.c,140 :: 		Rspt[irr]=0;;                            //Limpia la trama de respuesta
0x036C	0x0E22      	MOVLW       _Rspt
0x036E	0x6EE1      	MOVWF       FSR1L 
0x0370	0x0E00      	MOVLW       hi_addr(_Rspt)
0x0372	0x6EE2      	MOVWF       FSR1H 
0x0374	0x5021      	MOVF        _irr, 0 
0x0376	0x26E1      	ADDWF       FSR1L, 1 
0x0378	0x0E00      	MOVLW       0
0x037A	0xBE21      	BTFSC       _irr, 7 
0x037C	0x0EFF      	MOVLW       255
0x037E	0x22E2      	ADDWFC      FSR1H, 1 
0x0380	0x6AE6      	CLRF        POSTINC1 
;Splitter.c,139 :: 		for (irr=0;irr<(Rsize);irr++){
0x0382	0x2A21      	INCF        _irr, 1 
;Splitter.c,141 :: 		}
0x0384	0xD7EC      	BRA         L_main52
L_main53:
;Splitter.c,142 :: 		BanLR = 0;                                    //Limpia la bandera de lectura de la trama de respuesta
0x0386	0x6A28      	CLRF        _BanLR 
;Splitter.c,144 :: 		}
L_main48:
;Splitter.c,145 :: 		} else {
0x0388	0xD016      	BRA         L_main55
L_main45:
;Splitter.c,147 :: 		for (irr=0;irr<(Rsize-1);irr++){
0x038A	0x6A21      	CLRF        _irr 
L_main56:
0x038C	0x0E80      	MOVLW       128
0x038E	0x1821      	XORWF       _irr, 0 
0x0390	0x6E00      	MOVWF       R0 
0x0392	0x0E80      	MOVLW       128
0x0394	0x0A05      	XORLW       5
0x0396	0x5C00      	SUBWF       R0, 0 
0x0398	0xE20D      	BC          L_main57
;Splitter.c,148 :: 		Rspt[irr]=0;;                            //Limpia la trama de respuesta
0x039A	0x0E22      	MOVLW       _Rspt
0x039C	0x6EE1      	MOVWF       FSR1L 
0x039E	0x0E00      	MOVLW       hi_addr(_Rspt)
0x03A0	0x6EE2      	MOVWF       FSR1H 
0x03A2	0x5021      	MOVF        _irr, 0 
0x03A4	0x26E1      	ADDWF       FSR1L, 1 
0x03A6	0x0E00      	MOVLW       0
0x03A8	0xBE21      	BTFSC       _irr, 7 
0x03AA	0x0EFF      	MOVLW       255
0x03AC	0x22E2      	ADDWFC      FSR1H, 1 
0x03AE	0x6AE6      	CLRF        POSTINC1 
;Splitter.c,147 :: 		for (irr=0;irr<(Rsize-1);irr++){
0x03B0	0x2A21      	INCF        _irr, 1 
;Splitter.c,149 :: 		}
0x03B2	0xD7EC      	BRA         L_main56
L_main57:
;Splitter.c,150 :: 		BanLR = 0;                                    //Limpia la bandera de lectura de la trama de respuesta
0x03B4	0x6A28      	CLRF        _BanLR 
;Splitter.c,152 :: 		}
L_main55:
;Splitter.c,153 :: 		}
L_main42:
;Splitter.c,157 :: 		}
0x03B6	0xD759      	BRA         L_main23
;Splitter.c,158 :: 		}
L_end_main:
0x03B8	0xD7FF      	BRA         $+0
; end of _main
Symbol List:
//** Routines locations **
//ADDRESS    SIZE    PROCEDURE
//----------------------------------------------
0x0008     [274]    _interrupt
0x011A      [86]    _UART1_Init
0x0170      [86]    _UART2_Init
0x01C6      [18]    _UART2_Read
0x01D8      [18]    _UART1_Read
0x01EA      [12]    _UART2_Write
0x01F6      [80]    _Configuracion
0x0246      [16]    ___CC2DW
0x0256      [14]    _UART1_Write
0x0264     [342]    _main
//** Variables locations ** 
//ADDRESS    SIZE    VARIABLE
//----------------------------------------------
0x0000       [1]    UART2_Init_tmp_L0
0x0000       [1]    UART1_Init_tmp_L0
0x0000       [1]    R0
0x0001       [1]    R1
0x0001       [1]    UART2_Read___tmp_UART2_Read_L0
0x0001       [1]    UART1_Read___tmp_UART1_Read_L0
0x0002       [1]    R2
0x0002       [2]    memset_pp_L0
0x0002       [2]    strlen_cp_L0
0x0002       [2]    memcpy_dd_L0
0x0002       [2]    memchr_s_L0
0x0003       [2]    memmove_tt_L0
0x0003       [2]    Ltrim_original_L0
0x0003       [1]    R3
0x0004       [2]    strncat_cp_L0
0x0004       [2]    strncpy_cp_L0
0x0004       [1]    R4
0x0004       [2]    memcpy_ss_L0
0x0004       [2]    strcat_cp_L0
0x0004       [2]    strcpy_cp_L0
0x0005       [2]    Ltrim_p_L0
0x0005       [1]    R5
0x0005       [2]    LongWordToHex_input_half_L0
0x0005       [2]    memmove_ff_L0
0x0005       [2]    LongIntToHex_input_half_L0
0x0006       [1]    R6
0x0007       [1]    R7
0x0008       [1]    R8
0x0009       [1]    R9
0x000A       [1]    R10
0x000B       [1]    R11
0x000C       [1]    R12
0x000D       [1]    R13
0x000E       [1]    R14
0x000F       [1]    R15
0x0010       [1]    R16
0x0011       [1]    R17
0x0012       [1]    R18
0x0013       [1]    R19
0x0014       [1]    R20
0x0019       [4]    _UART_Wr_Ptr
0x001D       [4]    _UART_Rd_Ptr
0x0021       [1]    _irr
0x0022       [6]    _Rspt
0x0028       [1]    _BanLR
0x0029       [4]    _UART_Tx_Idle_Ptr
0x002D       [4]    _UART_Rdy_Ptr
0x0031       [1]    _ipp
0x0032       [1]    _BanAP
0x0033       [1]    _ByPtcn
0x0034       [1]    _BanAR
0x0035       [1]    _ByRspt
0x0036       [4]    _Ptcn
0x003A       [1]    _ir
0x003B       [1]    _ip
0x003C       [1]    _BanLP
0x003D       [1]    FARG_UART2_Write_data_
0x003D       [1]    FARG_UART1_Write_data_
0x0F39       [1]    ANSELB
0x0F3A       [1]    ANSELC
0x0F70       [1]    BAUDCON2
0x0F71       [1]    RCSTA2
0x0F72       [1]    TXSTA2
0x0F73       [1]    TXREG2
0x0F74       [1]    RCREG2
0x0F75       [1]    SPBRG2
0x0F76       [1]    SPBRGH2
0x0F93       [0]    TRISB6_bit
0x0F93       [0]    TRISB7_bit
0x0F93       [0]    TRISB5_bit
0x0F94       [0]    TRISC5_bit
0x0F94       [0]    TRISC7_bit
0x0F94       [0]    TRISC6_bit
0x0F9D       [1]    PIE1
0x0F9E       [1]    PIR1
0x0FA3       [1]    PIE3
0x0FA4       [0]    RC2IF_bit
0x0FA4       [1]    PIR3
0x0FAB       [1]    RCSTA
0x0FAC       [1]    TXSTA
0x0FAD       [1]    TXREG
0x0FAE       [1]    RCREG
0x0FAF       [1]    SPBRG
0x0FB0       [1]    SPBRGH
0x0FB8       [1]    BAUDCON
0x0FD8       [1]    STATUS
0x0FD9       [1]    FSR2L
0x0FDA       [1]    FSR2H
0x0FDE       [1]    POSTINC2
0x0FE0       [1]    BSR
0x0FE1       [1]    FSR1L
0x0FE2       [1]    FSR1H
0x0FE4       [1]    PREINC1
0x0FE6       [1]    POSTINC1
0x0FE7       [1]    INDF1
0x0FE8       [1]    WREG
0x0FE9       [1]    FSR0L
0x0FEA       [1]    FSR0H
0x0FEE       [1]    POSTINC0
0x0FF2       [1]    INTCON
0x0FF3       [1]    PRODL
0x0FF4       [1]    PRODH
0x0FF5       [1]    TABLAT
0x0FF6       [1]    TBLPTRL
0x0FF7       [1]    TBLPTRH
0x0FF8       [1]    TBLPTRU
